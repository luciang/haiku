<HTML>
<HEAD>
<TITLE>ColorUtils.htm</TITLE>
<style type="text/css">
  <!--
	.Default {background-color: rgb(255,255,255); color: rgb(0,0,0); font-family: 'Dutch801 Rm BT'; font-size: 12pt}
	.OBOS-Function-Def {background-color: rgb(255,255,255); color: rgb(0,0,0); font-family: 'Dutch801 Rm BT'; font-size: 16pt}
	.OBOS-Title {background-color: rgb(255,255,255); color: rgb(0,128,0); font-family: 'Dutch801 Rm BT'; font-size: 24pt}
	.Text-Background {background-color: rgb(255,255,255)}
	.GR-Default {}
	.Body {margin: 0px}
	.Footer {margin: 0px}
	.Header {margin: 0px}
	.WP-Default {text-align: left; text-indent: 0px; margin-left: 0px; margin-right: 0px}
  -->
</style>
</HEAD>
<BODY BGCOLOR="#ffffff">
<DIV class="sheet" id="Sheet 1">
<P class="Body" style="margin: 0px"><span class="OBOS-Title">ColorUtils</span><span style="color: rgb(0,0,0); font-size: 24pt"></span></P>
<P class="Body" style="margin: 0px"><BR>
</P>
<P class="Body" style="margin: 0px">These functions are used for general purpose color-related tasks.</P>
<P class="Body" style="margin: 0px"><BR>
<BR>
<HR>
</P>
<P class="Body" style="margin: 0px">Global Functions</P>
<P class="Body" style="margin: 0px"><BR>
void SetRGBColor32(rgb_color *col, uint8 r, uint8 g, uint8 b, uint8 a=255)</P>
<P class="Body" style="margin: 0px">void SetRGBAColor32(rgb_color *col, uint16 color16)</P>
<P class="Body" style="margin: 0px">void SetRGBColor16(uint16 *col, uint8 r, uint8 g, uint8 b)</P>
<P class="Body" style="margin: 0px">void SetRGBAColor15(uint16 *col, uint8 r, uint8 g, uint8 b, bool opaque=true)</P>
<P class="Body" style="margin: 0px"><BR>
uint8 FindClosestColor(rgb_color *palette,rgb_color col)</P>
<P class="Body" style="margin: 0px">uint16 FindClosestColor16(rgb_color col)</P>
<P class="Body" style="margin: 0px">uint16 FindClosestColor15(rgb_color col)</P>
<P class="Body" style="margin: 0px"><BR>
rgb_color MakeBlendColor(rgb_color col, rgb_color col2, float position)</P>
<P class="Body" style="margin: 0px"><BR>
<HR>
</P>
<P class="Body" style="margin: 0px"><span class="OBOS-Function-Def">void SetRGBColor32(rgb_color *col, uint8 r, uint8 g, uint8 b, uint8 a=255)</span></P>
<P class="Body" style="margin: 0px"><BR>
Simply assigns the passed parameters to the internal members of the passed color</P>
<P class="Body" style="margin: 0px"><BR>
<BR>
<span class="OBOS-Function-Def">void SetRGBAColor32(rgb_color *col, uint16 color16)</span></P>
<P class="Body" style="margin: 0px"><BR>
Maps a 16-bit color to a 32-bit one.</P>
<P class="Body" style="margin: 0px"><BR>
gggbbbbb  arrrrrgg</P>
<P class="Body" style="margin: 0px">1) Extract component values using the following calculations:</P>
<P class="Body" style="margin: 0px"><BR>
	red16 = (uint8[1] &amp; 124) &gt;&gt;  2</P>
<P class="Body" style="margin: 0px"><BR>
	green16 = ((uint8[0] &amp; 224) &gt;&gt; 5) | ((uint8[1] &amp; 3) &lt;&lt; 3)</P>
<P class="Body" style="margin: 0px"><BR>
	blue16 = uint8[0] &amp; 31</P>
<P class="Body" style="margin: 0px">2) Use cross-multiplication to map each 16-bit color component from 0-31 space to 0-255 space, i.e. red32 = (red16 / 31) * 255</P>
<P class="Body" style="margin: 0px">3) Assign mapped values to the rgb_color passed to the function</P>
<P class="Body" style="margin: 0px"><BR>
<BR>
<span class="OBOS-Function-Def">void SetRGBColor16(uint16 *col, uint8 r, uint8 g, uint8 b)</span></P>
<P class="Body" style="margin: 0px"><BR>
Used for easy assignment of opaque (B_RGB16) 16-bit colors.</P>
<P class="Body" style="margin: 0px"><BR>
1) Clip parameters via a bitwise AND with 31 (var &amp;=31)</P>
<P class="Body" style="margin: 0px">2) Create a uint8 * to the passed color</P>
<P class="Body" style="margin: 0px">3) Assign as follows and return:</P>
<P class="Body" style="margin: 0px">	a) uint8[0] = ( (g &amp; 7) &lt;&lt; 5) | (b  &amp; 31)</P>
<P class="Body" style="margin: 0px">	b) uint8[1] = ( (r &amp; 31) &lt;&lt; 3) | ( (g &amp; 56) &gt;&gt; 3)</P>
<P class="Body" style="margin: 0px"><BR>
<BR>
<span class="OBOS-Function-Def">void SetRGBAColor15(uint16 *col, uint8 r, uint8 g, uint8 b, bool opaque=true)</span></P>
<P class="Body" style="margin: 0px"><BR>
Used for easy assignment of alpha-aware (B_RGBA16) 16-bit colors.</P>
<P class="Body" style="margin: 0px"><BR>
1) Clip parameters via a bitwise AND with 31 (var &amp;=31)</P>
<P class="Body" style="margin: 0px">2) Create a uint8 * to the passed color</P>
<P class="Body" style="margin: 0px">3) Assign as follows and return:</P>
<P class="Body" style="margin: 0px">	a) uint8[0] = ( (g &amp; 7) &lt;&lt; 5) | (b  &amp; 31)</P>
<P class="Body" style="margin: 0px">	b) uint8[1] = ( (r &amp; 31) &lt;&lt; 2) | ( (g &amp; 24) &gt;&gt; 3) | (a) ? 128 : 0</P>
<P class="Body" style="margin: 0px"><BR>
<BR>
<span class="OBOS-Function-Def">uint8 FindClosestColor(rgb_color *palette,rgb_color col)</span></P>
<P class="Body" style="margin: 0px"><BR>
Finds the color which most closely resembles the given one in the given palette.</P>
<P class="Body" style="margin: 0px"><BR>
1) Set the saved delta value to 765 (maximum difference)</P>
<P class="Body" style="margin: 0px">2) Loop through all the colors in the palette. For each color,</P>
<P class="Body" style="margin: 0px">	a) calculate the delta value for each color component and add them together</P>
<P class="Body" style="margin: 0px">	b) compare the new combined delta with the saved one</P>
<P class="Body" style="margin: 0px">	c) if the delta is 0, immediately return the current index</P>
<P class="Body" style="margin: 0px">	d) if the new one is smaller, save it and also the palette index</P>
<P class="Body" style="margin: 0px"><BR>
<BR>
<span class="OBOS-Function-Def">uint16 FindClosestColor16(rgb_color col)</span></P>
<P class="Body" style="margin: 0px"><BR>
Returns a 16-bit approximation of the given 32-bit color. Alpha values are ignored.</P>
<P class="Body" style="margin: 0px">1) Create an opaque, 16-bit approximation of col using the following calculations:</P>
<P class="Body" style="margin: 0px">	r16=(31*col.red)/255</P>
<P class="Body" style="margin: 0px">	g16=(31*col.green)/255</P>
<P class="Body" style="margin: 0px">	b16=(31*col.blue)/255</P>
<P class="Body" style="margin: 0px">2) Assign it to a uint16 using the same code as in SetRGBColor16() and return it.</P>
<P class="Body" style="margin: 0px"><BR>
<BR>
<span class="OBOS-Function-Def">uint16 FindClosestColor15(rgb_color col)</span></P>
<P class="Body" style="margin: 0px"><BR>
This functions almost exactly like the 16-bit version, but this also takes into account the alpha transparency bit and works in the color space B_RGBA15. Follow the same algorithm as FindClosestColor16(), but assign the return value using SetRGBColor15.</P>
<P class="Body" style="margin: 0px"><BR>
<BR>
<span class="OBOS-Function-Def">rgb_color MakeBlendColor(rgb_color col, rgb_color col2, float position)</span></P>
<P class="Body" style="margin: 0px"><BR>
MakeBlendColor calculates a color that is somewhere between start color col and end color col2, based on position, where 0&lt;= position &lt;= 1. If position is out of these bounds, a color of {0,0,0,0} is returned. If position is 0, the start color is returned. If position is 1, col2 is returned. Otherwise, the color is calculated thus:</P>
<P class="Body" style="margin: 0px"><BR>
1) calculate delta values for each channel, i.e. int16 delta_r=col.red-col2.red</P>
<P class="Body" style="margin: 0px">2) Based on these delta values, calculate the blend values for each channel, i.e. blend_color.red=uint8(col1.red - (delta_r * position) )</P>
<DIV class="layer" id="Layer 1">
	</DIV>
</DIV>
</BODY>
</HTML>
