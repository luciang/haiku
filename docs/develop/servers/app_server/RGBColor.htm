<HTML>
<HEAD>
<TITLE>RGBColor.htm</TITLE>
<style type="text/css">
  <!--
	.Default {background-color: rgb(255,255,255); color: rgb(0,0,0); font-family: 'Dutch801 Rm BT'; font-size: 12pt}
	.OBOS-Function-Def {background-color: rgb(255,255,255); color: rgb(0,0,0); font-family: 'Dutch801 Rm BT'; font-size: 16pt}
	.OBOS-Title {background-color: rgb(255,255,255); color: rgb(0,128,0); font-family: 'Dutch801 Rm BT'; font-size: 24pt}
	.Text-Background {background-color: rgb(255,255,255)}
	.GR-Default {}
	.Body {margin: 0px}
	.Footer {margin: 0px}
	.Header {margin: 0px}
	.WP-Default {text-align: left; text-indent: 0px; margin-left: 0px; margin-right: 0px}
  -->
</style>
</HEAD>
<BODY BGCOLOR="#ffffff">
<DIV class="sheet" id="Sheet 1">
<P class="Body" style="margin: 0px"><span class="OBOS-Title">RGBColor class</span><span style="color: rgb(0,0,0); font-size: 24pt"></span></P>
<P class="Body" style="margin: 0px"><BR>
</P>
<P class="Body" style="margin: 0px">RGBColor objects provide a simplified interface to colors for the app_server, especially the DisplayDriver class</P>
<P class="Body" style="margin: 0px"><BR>
<BR>
<HR>
</P>
<P class="Body" style="margin: 0px"><BR>
Member Functions</P>
<P class="Body" style="margin: 0px"><BR>
</P>
<TABLE WIDTH=617 HEIGHT=264 BORDER=1 CELLPADDING=1 CELLSPACING=2>
	<TR>
		<TD WIDTH=203 HEIGHT=32>
			<P class="Body" style="margin: 0px">RGBColor(uint8 r, uint8 g, uint8 b, uint8 a=255)</P>
			</TD>
		<TD WIDTH=260 HEIGHT=32>
			<P class="Body" style="margin: 0px">RGBColor(rgb_color col)</P>
			</TD>
	</TR>
	<TR>
		<TD WIDTH=203 HEIGHT=17>
			<P class="Body" style="margin: 0px">RGBColor(uint16 color16)</P>
			</TD>
		<TD WIDTH=260 HEIGHT=17>
			<P class="Body" style="margin: 0px">RGBColor(uint8 color8)</P>
			</TD>
	</TR>
	<TR>
		<TD WIDTH=203 HEIGHT=17>
			<P class="Body" style="margin: 0px">RGBColor(const RGBColor &amp;color)</P>
			</TD>
		<TD WIDTH=260 HEIGHT=17>
			<P class="Body" style="margin: 0px">RGBColor(void)</P>
			</TD>
	</TR>
	<TR>
		<TD WIDTH=203 HEIGHT=17>
			<P class="Body" style="margin: 0px">void PrintToStream(void)</P>
			</TD>
		<TD WIDTH=260 HEIGHT=17>
			<P class="Body" style="margin: 0px">uint8 GetColor8(void)</P>
			</TD>
	</TR>
	<TR>
		<TD WIDTH=203 HEIGHT=17>
			<P class="Body" style="margin: 0px">uint16 GetColor16(void)</P>
			</TD>
		<TD WIDTH=260 HEIGHT=17>
			<P class="Body" style="margin: 0px">rgb_color GetColor32(void)</P>
			</TD>
	</TR>
	<TR>
		<TD WIDTH=203 HEIGHT=32>
			<P class="Body" style="margin: 0px">void SetColor(uint8 r, uint8 g, uint8 b, uint8 a=255)</P>
			</TD>
		<TD WIDTH=260 HEIGHT=32>
			<P class="Body" style="margin: 0px">void SetColor(uint16 color16)</P>
			</TD>
	</TR>
	<TR>
		<TD WIDTH=203 HEIGHT=17>
			<P class="Body" style="margin: 0px">void SetColor(uint8 color 8)</P>
			</TD>
		<TD WIDTH=260 HEIGHT=17>
			<P class="Body" style="margin: 0px">void SetColor(rgb_color color)</P>
			</TD>
	</TR>
	<TR>
		<TD WIDTH=203 HEIGHT=17>
			<P class="Body" style="margin: 0px">void SetColor(const RGBColor &amp;col)</P>
			</TD>
		<TD WIDTH=260 HEIGHT=17>
			<P class="Body" style="margin: 0px">Operators: =,==,!=</P>
			</TD>
	</TR>
	<TR>
		<TD WIDTH=203 HEIGHT=32>
			<P class="Body" style="margin: 0px">RGBColor MakeBlendColor( RGBColor c, float position)</P>
			</TD>
		<TD WIDTH=260 HEIGHT=32>
			&nbsp;
		</TD>
	</TR>
</TABLE>
<P class="Body" style="margin: 0px"><BR>
<BR>
<HR>
</P>
<P class="Body" style="margin: 0px"><span class="OBOS-Function-Def">RGBColor(uint8 r, uint8 g, uint8 b, uint8 a=255)</span><span style="font-size: 16pt"></span></P>
<P class="Body" style="margin: 0px"><span class="OBOS-Function-Def">RGBColor(rgb_color col)</span><span style="font-size: 16pt"></span></P>
<P class="Body" style="margin: 0px"><span class="OBOS-Function-Def">RGBColor(uint16 color16)</span><span style="font-size: 16pt"></span></P>
<P class="Body" style="margin: 0px"><span class="OBOS-Function-Def">RGBColor(uint8 color8)</span><span style="font-size: 16pt"></span></P>
<P class="Body" style="margin: 0px"><span class="OBOS-Function-Def">RGBColor(const RGBColor &amp;color)</span><span style="font-size: 16pt"></span></P>
<P class="Body" style="margin: 0px"><span class="OBOS-Function-Def">RGBColor(void)</span><span style="font-size: 16pt"></span></P>
<P class="Body" style="margin: 0px"><BR>
1) In all cases, extract the color data by calling SetColor. Void version sets to (0,0,0,0)</P>
<P class="Body" style="margin: 0px"><BR>
<BR>
<span class="OBOS-Function-Def">void PrintToStream(void)</span></P>
<P class="Body" style="margin: 0px"><BR>
Prints the color values of the color32 member via printf()</P>
<P class="Body" style="margin: 0px"><BR>
<span class="OBOS-Function-Def">uint8 GetColor8(void)</span><span style="font-size: 16pt"></span></P>
<P class="Body" style="margin: 0px"><span class="OBOS-Function-Def">uint16 GetColor16(void)</span><span style="font-size: 16pt"></span></P>
<P class="Body" style="margin: 0px"><span class="OBOS-Function-Def">rgb_color GetColor32(void)</span><span style="font-size: 16pt"></span></P>
<P class="Body" style="margin: 0px"><BR>
These are for obtaining space-specific versions of the color assigned to the object.</P>
<P class="Body" style="margin: 0px"><BR>
1) In all cases, return the internal color storage members </P>
<P class="Body" style="margin: 0px"><BR>
<BR>
<span class="OBOS-Function-Def">void SetColor(const RGBColor &amp;color)</span><span style="font-size: 16pt"></span></P>
<P class="Body" style="margin: 0px"><span class="Default"><BR>
Copy all internal members to the current object.</span></P>
<P class="Body" style="margin: 0px"><span class="Default"><BR>
<BR>
</span><span class="OBOS-Function-Def">void SetColor(uint8 r, uint8 g, uint8 b, uint8 a=255)</span><span style="font-size: 16pt"></span></P>
<P class="Body" style="margin: 0px"><span class="OBOS-Function-Def">void SetColor(rgb_color col)</span><span style="font-size: 16pt"></span></P>
<P class="Body" style="margin: 0px"><span class="Default"><BR>
</span><span class="Default">1) Assign parameters to internal rgb_color</span></P>
<P class="Body" style="margin: 0px"><span class="Default">2) call SetRGBAColor15()</span></P>
<P class="Body" style="margin: 0px"><span class="Default">3) call SystemPalette::FindClosestColor()</span></P>
<P class="Body" style="margin: 0px"><span class="Default"><BR>
</span><span class="Default"><BR>
</span><span class="OBOS-Function-Def">void SetColor(uint16 color16)</span><span style="font-size: 16pt"></span></P>
<P class="Body" style="margin: 0px"><span class="Default"><BR>
1) Assign parameter to internal uint16</span></P>
<P class="Body" style="margin: 0px"><span class="Default">2) call SetRGBAColor32()</span></P>
<P class="Body" style="margin: 0px"><span class="Default">3) call SystemPalette::FindClosestColor()</span></P>
<P class="Body" style="margin: 0px"><span style="font-size: 16pt"><BR>
<BR>
</span><span class="OBOS-Function-Def">void SetColor(uint8 color8)</span><span style="font-size: 16pt"></span></P>
<P class="Body" style="margin: 0px"><span style="font-size: 16pt"><BR>
</span><span class="Default">1) Assign parameter to internal uint8</span></P>
<P class="Body" style="margin: 0px"><span class="Default">2) Get the 32-bit value from the palette and assign it to the internal rgb_color</span></P>
<P class="Body" style="margin: 0px"><span class="Default">3) call SetRGBAColor16()</span></P>
<P class="Body" style="margin: 0px"><span style="font-size: 16pt"><BR>
<BR>
</span><span class="OBOS-Function-Def">RGBColor &amp; operator=(const RGBColor &amp;from)</span><span style="font-size: 16pt"></span></P>
<P class="Body" style="margin: 0px"><span class="Default"><BR>
Copy all data members over and return the value of this (return *this;)</span></P>
<P class="Body" style="margin: 0px"><span class="Default"><BR>
</span><span class="OBOS-Function-Def">bool operator==(const RGBColor &amp;from)</span><span style="font-size: 16pt"></span></P>
<P class="Body" style="margin: 0px"><span class="Default"><BR>
</span><span class="Default">Compare rgb_colors and if all members are equal, return true. Otherwise, return false.</span></P>
<P class="Body" style="margin: 0px"><span class="Default"><BR>
</span><span class="OBOS-Function-Def">bool operator!=(const RGBColor &amp;from)</span><span style="font-size: 16pt"></span></P>
<P class="Body" style="margin: 0px"><BR>
Compare rgb_colors and if all are equal, return false. <span class="Default">Otherwise, return true.</span></P>
<P class="Body" style="margin: 0px"><BR>
<span class="OBOS-Function-Def">RGBColor MakeBlendColor(RGBColor c, float position)</span></P>
<P class="Body" style="margin: 0px"><BR>
Returns a color which is (position * 100) of the way from the current color to the one passed to it. This would be an easy way to generate color gradients, for example, but with more control.</P>
<P class="Body" style="margin: 0px"><BR>
1) Clip position to the range 0&lt;=position&lt;=1</P>
<P class="Body" style="margin: 0px">2) For each color component,</P>
<P class="Body" style="margin: 0px">	a) calculate the delta (delta=int16(c.component-thiscolor.component))</P>
<P class="Body" style="margin: 0px">	b) calculate the modifier (mod=thiscolor.component+(delta * position))</P>
<P class="Body" style="margin: 0px">	c) clip modifier to the range 0 &lt;= modifier &lt;= 255</P>
<P class="Body" style="margin: 0px">	d) assign modifier to the component (thiscolor.component=int8(mod))</P>
<P class="Body" style="margin: 0px">3) return a new RGBColor constructed around the new color</P>
<P class="Body" style="margin: 0px"><BR>
</P>
<DIV class="layer" id="Layer 1">
	</DIV>
</DIV>
</BODY>
</HTML>
