SubDir HAIKU_TOP src kits storage ;

SetSubDirSupportedPlatforms haiku libbe_test ;

UsePrivateHeaders shared app kernel storage ;
UsePrivateHeaders [ FDirName kernel disk_device_manager ] ;
UseArchHeaders $(TARGET_ARCH) ;

SEARCH_SOURCE += [ FDirName $(SUBDIR) mime ] ;
SEARCH_SOURCE += [ FDirName $(SUBDIR) sniffer ] ;

MergeObject <libbe>storage_kit.o :
	AppFileInfo.cpp
	Directory.cpp
	Entry.cpp
	EntryList.cpp
	File.cpp
	FindDirectory.cpp
	Mime.cpp
	MimeType.cpp
	Node.cpp
	NodeInfo.cpp
	NodeMonitor.cpp
	OffsetFile.cpp
	Path.cpp
	Query.cpp
	QueryPredicate.cpp
	ResourceFile.cpp
	ResourceItem.cpp
	Resources.cpp
	ResourcesContainer.cpp
	ResourceStrings.cpp
	Statable.cpp
	SymLink.cpp
	Volume.cpp
	VolumeRoster.cpp
	storage_support.cpp

	# mime
	AssociatedTypes.cpp
	CreateAppMetaMimeThread.cpp
	Database.cpp
	InstalledTypes.cpp
	MimeUpdateThread.cpp
	SnifferRules.cpp
	Supertype.cpp
	SupportingApps.cpp
	UpdateMimeInfoThread.cpp
	database_access.cpp
	database_support.cpp

	# sniffer
	CharStream.cpp
	Err.cpp
	DisjList.cpp
	Pattern.cpp
	PatternList.cpp
	Parser.cpp
	Range.cpp
	RPattern.cpp
	RPatternList.cpp
	Rule.cpp
;

# We need to keep the DiskDevice API out of libbe_haiku as long as the
# Interface Kit is not fully functional (at least the part we are using).
# So, we build it separately.

MergeObject <libbe>storage_diskdevice_kit.o :
	DiskDevice.cpp
	DiskDeviceJob.cpp
	DiskDeviceList.cpp
	DiskDevicePrivate.cpp
	DiskDeviceRoster.cpp
	DiskDeviceTypes.cpp
	DiskDeviceVisitor.cpp
	DiskSystem.cpp
	Partition.cpp
	PartitioningInfo.cpp 
;

# The adapter library we need (Storage Kit).
#

SharedLibrary libbeadapter.so :
	LibBeAdapter.cpp
;
LinkAgainst libbeadapter.so : be : false ;
