SubDir HAIKU_TOP src tests servers registrar ;

SetSubDirSupportedPlatforms libbe_test ;

UsePublicHeaders [ FDirName add-ons registrar ] ;
UseArchHeaders $(TARGET_ARCH) ;


SimpleTest RegistrarTest1
	: RegistrarTest1.cpp
	: be
;

SimpleTest RosterShell
	: RosterShell.cpp
	: be stdc++.r4
;

SimpleTest message_deliverer_test : message_deliverer_test.cpp : be ;


SimpleTest run_haiku_registrar
	: run_haiku_registrar.cpp
	: be
;

# a shutdown working with the emulation under R5
UsePrivateHeaders app ;
UsePrivateHeaders kernel ;

SimpleTest <test>shutdown
	: shutdown.cpp
	: be ;

SEARCH on [ FGristFiles shutdown.cpp ] = [ FDirName $(HAIKU_TOP) src bin ] ;

# Two small test apps for testing the shutdown process.

SimpleTest no_shutdown_reply
	: no_shutdown_reply.cpp
	: be
;

SimpleTest negative_shutdown_reply
	: negative_shutdown_reply.cpp
	: be
;

SimpleTest user_shutdown_reply
	: user_shutdown_reply.cpp
	: be
;


# the registrar itself

UsePrivateHeaders app ;
UsePrivateHeaders kernel ;
UsePrivateHeaders shared ;
UsePrivateHeaders storage ;

SEARCH_SOURCE += [ FDirName $(HAIKU_TOP) src servers registrar ] ;

Server haiku_registrar
 	:
	AppInfoList.cpp
	AppInfoListMessagingTargetSet.cpp
	Clipboard.cpp
	ClipboardHandler.cpp
	Event.cpp
	EventMaskWatcher.cpp
	EventQueue.cpp
	MessageDeliverer.cpp
	MessageEvent.cpp
	MessageHandler.cpp
	MessageRunnerManager.cpp
	MessagingService.cpp
	MIMEManager.cpp
	PriorityMessageQueue.cpp
	RecentApps.cpp
	RecentEntries.cpp
	Referenceable.cpp
	Registrar.cpp
	RosterAppInfo.cpp
	RosterSettingsCharStream.cpp
	ShutdownProcess.cpp
	TextSnifferAddon.cpp
	TRoster.cpp
	Watcher.cpp
	WatchingService.cpp

	R5Compatibility.cpp
	:
	be
	$(TARGET_LIBSTDC++)
	:
	registrar.rdef
;

if $(TARGET_PLATFORM) = libbe_test {
	HaikuInstall install-test-apps : $(HAIKU_APP_TEST_DIR) : haiku_registrar
		: tests!apps ;
	HaikuInstall install-test-apps : $(HAIKU_APP_TEST_DIR) : run_haiku_registrar
		: tests!apps ;
}
