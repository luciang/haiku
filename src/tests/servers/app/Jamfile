SubDir HAIKU_TOP src tests servers app ;

SetSubDirSupportedPlatforms libbe_test ;

# No need to define any of those targets, when not building for libbe_test
if $(TARGET_PLATFORM) = libbe_test {

UseLibraryHeaders agg png zlib ;
UsePrivateHeaders app input interface shared [ FDirName servers app ] ;

local appServerDir = [ FDirName $(HAIKU_TOP) src servers app ] ;

UseHeaders [ FDirName $(appServerDir) drawing ] ;
UseHeaders [ FDirName $(appServerDir) drawing Painter ] ;
UseHeaders [ FDirName $(appServerDir) drawing Painter drawing_modes ] ;
UseHeaders [ FDirName $(appServerDir) drawing Painter font_support ] ;
UseFreeTypeHeaders ;

# This overrides the definitions in private/servers/app/ServerConfig.h
local defines = [ FDefines TEST_MODE=1 ] ;

SubDirCcFlags $(defines) ;
SubDirC++Flags $(defines) ;

SEARCH_SOURCE += $(appServerDir) [ FDirName $(appServerDir) drawing ] ;

SharedLibrary libhwinterface.so :
	BBitmapBuffer.cpp
	HWInterface.cpp
	MultiLocker.cpp

	: libhaikuappserver.so be
;


# The reason for this is that libhwinterfaceimpl.so needs to link against
# libbe *first*, but simply adding it to the library list would add it to
# LINKLIBS which is always appended after NEEDLIBS in the command line.
LINKFLAGS on libhwinterfaceimpl.so ?= $(LINKFLAGS) ;
LINKFLAGS on libhwinterfaceimpl.so += -lbe ;

SharedLibrary libhwinterfaceimpl.so :
	fake_input_server.cpp
	ViewHWInterface.cpp

	: be libhwinterface.so
;

SharedLibrary libhaikuappserver.so :
	Angle.cpp
	BGet++.cpp
	ColorSet.cpp
	CursorData.cpp
	CursorSet.cpp
	DesktopSettings.cpp
	DrawState.cpp
	FontFamily.cpp
	HashTable.cpp
	RGBColor.cpp
	ServerBitmap.cpp
	ServerCursor.cpp
	ServerFont.cpp
	FontManager.cpp
	SystemPalette.cpp

	# drawing
	PatternHandler.cpp

	# libraries
	:
	be libtextencoding.so libfreetype.so
;

AddResources haiku_app_server : app_server.rdef ;

Server haiku_app_server :
	# Misc. Sources
	Decorator.cpp
	DebugInfoManager.cpp
	SubWindowList.cpp
	PNGDump.cpp
	RAMLinkMsgReader.cpp
	MessageLooper.cpp
	EventDispatcher.cpp
	EventStream.cpp

	# Manager Classes
	BitmapManager.cpp
	CursorManager.cpp
	DecorManager.cpp
	InputManager.cpp
	ScreenManager.cpp

	AppServer.cpp
	Desktop.cpp

	ServerApp.cpp
	ServerWindow.cpp

	# DrawingEngine Classes
	AccelerantBuffer.cpp
	AccelerantHWInterface.cpp
	BitmapBuffer.cpp
	DrawingEngine.cpp
	MallocBuffer.cpp
	UpdateQueue.cpp

	VirtualScreen.cpp
	BitmapHWInterface.cpp
	DefaultDecorator.cpp
	Layer.cpp
	OffscreenServerWindow.cpp
	OffscreenWindowLayer.cpp
	RootLayer.cpp
	ServerPicture.cpp
	ServerScreen.cpp
	WindowLayer.cpp
	Workspace.cpp
	WorkspacesLayer.cpp

	# libraries
	:
	z libpng.so libhaikuappserver.so
	libpainter.a be 
	libhwinterface.so libhwinterfaceimpl.so
	libagg.a libfreetype.so libtextencoding.so
;

# install in the test dir
HaikuInstall install-test-apps : $(HAIKU_APP_TEST_LIB_DIR)
	: libpng.so libhaikuappserver.so libbe_haiku.so libhwinterface.so
	  libhwinterfaceimpl.so libfreetype.so libtextencoding.so
	: tests!apps ;

HaikuInstall install-test-apps : $(HAIKU_APP_TEST_DIR) : haiku_app_server
	: tests!apps ;

} # if $(TARGET_PLATFORM) = libbe_test

SubInclude HAIKU_TOP src tests servers app bitmap_drawing ;
SubInclude HAIKU_TOP src tests servers app copy_bits ;
SubInclude HAIKU_TOP src tests servers app event_mask ;
SubInclude HAIKU_TOP src tests servers app painter ;
SubInclude HAIKU_TOP src tests servers app playground ;
SubInclude HAIKU_TOP src tests servers app resize_limits ;
SubInclude HAIKU_TOP src tests servers app scrolling ;
SubInclude HAIKU_TOP src tests servers app textview ;
SubInclude HAIKU_TOP src tests servers app regularapps ;
SubInclude HAIKU_TOP src tests servers app view_state ;
