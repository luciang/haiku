SubDir OBOS_TOP src tests add-ons kernel file_systems bfs bfs_shell ;

include [ FDirName $(OBOS_TOP) src tests add-ons kernel file_systems fs_shell
				   FSShellRules ] ;

local bfsSourceDir = [ FDirName $(OBOS_TOP) src tests add-ons kernel
								file_systems bfs r5 ] ;

local oldSubDirHdrs = $(SUBDIRHDRS) ;


# Compile additional_commands.c with the same environment as the fs_shell. That
# is all BeOS headers, but the platform POSIX and STL headers.

SubDirHdrs $(OBOS_TOP) src tests add-ons kernel file_systems fs_shell ;
SubDirHdrs $(bfsSourceDir) ;

SetupFSShellIncludes ;

local oldCCFLAGS = $(CCFLAGS) ;
local oldC++FLAGS = $(C++FLAGS) ;
CCFLAGS = [ Filter $(CCFLAGS) : -nostdinc ] ;
C++FLAGS = [ Filter $(C++FLAGS) : -nostdinc ] ;

Objects [ FGristFiles additional_commands.c ] ;

ObjectsDefines [ FGristFiles additional_commands.c ] : _NO_INLINE_ASM ;

# Reset CCFLAGS and C++FLAGS to original values.
CCFLAGS = $(oldCCFLAGS) ;
C++FLAGS = $(oldC++FLAGS) ;


# Reset the environment for the FS add-on sources. We build using all BFS
# headers, including the POSIX and STL headers.

SUBDIRHDRS = $(oldSubDirHdrs) ;

SubDirHdrs $(bfsSourceDir) ;
UsePrivateHeaders [ FDirName kernel ] ;			# For kernel_cpp.cpp

SetupIncludes ;

{
	# set CHECK_MALLOC to something when doing tests against memory corruption
	local malloc_debug_defines ;
	local malloc_debug_flags ;
	if $(CHECK_MALLOC) {
		malloc_debug_defines = _NO_INLINE_ASM ;
		malloc_debug_flags = -fcheck-memory-usage ;
	}

	# We need to use a wrapper for fstat() on non-BeOS systems.
	local buildPlatformFstatDefines ;
	if $(OS) != BEOS {
		buildPlatformFstatDefines = build_platform_fstat=fs_shell_fstat ;
	}

	local defines = [ FDefines USER
		#DEBUG
		USED_IN_FS_SHELL NO_FILE_UNCACHED_IO
		UNSAFE_GET_VNODE
		#BFS_BIG_ENDIAN_ONLY
		$(malloc_debug_defines)
		$(buildPlatformFstatDefines)
	] ;
	SubDirCcFlags $(defines) $(malloc_debug_flags) ;
	SubDirC++Flags $(defines) -fno-exceptions -fno-rtti $(malloc_debug_flags)
		-include [ FDirName $(SUBDIR) Debug.h ] ;
}

BuildPlatformMain bfs_shell :
	Volume.cpp BPlusTree.cpp Inode.cpp Index.cpp Query.cpp Journal.cpp
	BlockAllocator.cpp kernel_interface_r5.cpp Utility.cpp BufferPool.cpp
	Debug.cpp

	[ FGristFiles additional_commands$(SUFOBJ) ]

	: false # don't reset header search dirs
;
LinkSharedOSLibs bfs_shell : libfs_shell.a $(C++_SUPPORT_LIBS) ;

# Tell Jam where to find these sources
SEARCH on [ FGristFiles
		Volume.cpp BPlusTree.cpp Inode.cpp Index.cpp Query.cpp Journal.cpp
		BlockAllocator.cpp kernel_interface_r5.cpp Utility.cpp BufferPool.cpp
		Debug.cpp cpp.cpp
	] = $(bfsSourceDir) ;
