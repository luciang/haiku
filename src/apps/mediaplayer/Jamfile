SubDir HAIKU_TOP src apps mediaplayer ;

SetSubDirSupportedPlatformsBeOSCompatible ;

# for BRecentItems
UsePublicHeaders [ FDirName be_apps Tracker ] ;
UsePrivateHeaders shared ;

# source directories
local sourceDirs =
	interface
	media_node_framework
	media_node_framework/audio
	media_node_framework/video
	playlist
	supplier
	support
	settings
;

local sourceDir ;
for sourceDir in $(sourceDirs) {
	SEARCH_SOURCE += [ FDirName $(HAIKU_TOP) src apps mediaplayer $(sourceDir) ] ;
}

Application MediaPlayer :
	# interface
	DrawingTidbits.cpp
	PeakView.cpp
	SeekSlider.cpp
	TransportButton.cpp
	VolumeSlider.cpp

	# media_node_framework
	NodeManager.cpp
	PlaybackListener.cpp
	PlaybackLOAdapter.cpp
	PlaybackManager.cpp

	# media_node_framework/audio
	AudioAdapter.cpp
	AudioChannelConverter.cpp
	AudioFormatConverter.cpp
	AudioProducer.cpp
	AudioReader.cpp
	AudioResampler.cpp
	AudioSupplier.cpp
	AudioVolumeConverter.cpp

	# media_node_framework/video
	VideoConsumer.cpp
	VideoProducer.cpp
	VideoSupplier.cpp
	VideoTarget.cpp

	# playlist
	CopyPLItemsCommand.cpp
	EntryRefPlaylistItem.cpp
	ImportPLItemsCommand.cpp
	ListViews.cpp
	MovePLItemsCommand.cpp
	Playlist.cpp
	PlaylistItem.cpp
	PlaylistListView.cpp
	PlaylistObserver.cpp
	PlaylistWindow.cpp
	RandomizePLItemsCommand.cpp
	RemovePLItemsCommand.cpp

	# settings
	Settings.cpp
	SettingsWindow.cpp

	# supplier
	AudioTrackSupplier.cpp
	MediaTrackAudioSupplier.cpp
	MediaTrackVideoSupplier.cpp
	ProxyAudioSupplier.cpp
	ProxyVideoSupplier.cpp
	VideoTrackSupplier.cpp

	# support
	AbstractLOAdapter.cpp
	ColorSpaceToString.cpp
	Command.cpp
	CommandStack.cpp
	Event.cpp
	EventQueue.cpp
	FileReadWrite.cpp
	Listener.cpp
	ListenerAdapter.cpp
	MessageEvent.cpp
	Notifier.cpp
	RWLocker.cpp
	SettingsMessage.cpp

	# .
	Controller.cpp
	ControllerObserver.cpp
	ControllerView.cpp
	InfoWin.cpp
	MainApp.cpp
	MainWin.cpp
	TransportControlGroup.cpp
	VideoView.cpp

	: be game media tracker translation textencoding $(TARGET_LIBSTDC++)
	: MediaPlayer.rdef
;

