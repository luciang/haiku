# Makefile.in generated by automake 1.7.3 from Makefile.am.
# src/Makefile.  Generated from Makefile.in by configure.

# Copyright 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003
# Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.



srcdir = .
top_srcdir = ..

pkgdatadir = $(datadir)/coreutils
pkglibdir = $(libdir)/coreutils
pkgincludedir = $(includedir)/coreutils
top_builddir = ..

am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
INSTALL = /bin/install -c
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
host_triplet = i586-pc-beos


# Use `ginstall' in the definition of PROGRAMS and in dependencies to avoid
# confusion with the `install' target.  The install rule transforms `ginstall'
# to install before applying any user-specified name transformations.
transform = s/ginstall/install/; s,x,x,
ACLOCAL = ${SHELL} /boot/home/Development/current/src/apps/bin/coreutils-5.0/config/missing --run aclocal-1.7
ALLOCA = 
AMDEP_FALSE = #
AMDEP_TRUE = 
AMTAR = ${SHELL} /boot/home/Development/current/src/apps/bin/coreutils-5.0/config/missing --run tar
AUTOCONF = ${SHELL} /boot/home/Development/current/src/apps/bin/coreutils-5.0/config/missing --run autoconf
AUTOHEADER = ${SHELL} /boot/home/Development/current/src/apps/bin/coreutils-5.0/config/missing --run autoheader
AUTOMAKE = ${SHELL} /boot/home/Development/current/src/apps/bin/coreutils-5.0/config/missing --run automake-1.7
AWK = gawk
CC = gcc
CCDEPMODE = depmode=gcc
CFLAGS = -g -O2 -pipe 
CPP = gcc -E
CPPFLAGS = 
CYGPATH_W = echo
DEFS = -DLOCALEDIR=\"$(localedir)\" -DSHAREDIR=\"$(datadir)\" -DHAVE_CONFIG_H
DEPDIR = .deps
DF_PROG = 
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = grep -E
EXEEXT = 
FESETROUND_LIBM = 
GETLOADAVG_LIBS = 
GLIBC21 = no
GMSGFMT = :
GNU_PACKAGE = GNU coreutils
HELP2MAN = ${SHELL} /boot/home/Development/current/src/apps/bin/coreutils-5.0/config/missing --run help2man
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = ${SHELL} $(install_sh) -c -s
INTLLIBS = 
KMEM_GROUP = 
LDFLAGS = 
LIBICONV = 
LIBINTL = 
LIBOBJS =  fileblocks$U.o mkdir$U.o fnmatch$U.o strnlen$U.o ftw$U.o tsearch$U.o lchown$U.o chown$U.o mktime$U.o nanosleep$U.o group-member$U.o putenv$U.o error$U.o __fpending$U.o rename$U.o getcwd$U.o canonicalize$U.o regex$U.o getloadavg$U.o getusershell$U.o sig2str$U.o euidaccess$U.o rpmatch$U.o strndup$U.o strverscmp$U.o getpass$U.o memrchr$U.o fchdir-stub$U.o
LIBS = 
LIB_CLOCK_GETTIME = 
LIB_CRYPT = 
LIB_NANOSLEEP = 
LN_S = ln -s
LTLIBICONV = 
LTLIBINTL = 
LTLIBOBJS =  fileblocks$U.lo mkdir$U.lo fnmatch$U.lo strnlen$U.lo ftw$U.lo tsearch$U.lo lchown$U.lo chown$U.lo mktime$U.lo nanosleep$U.lo group-member$U.lo putenv$U.lo error$U.lo __fpending$U.lo rename$U.lo getcwd$U.lo canonicalize$U.lo regex$U.lo getloadavg$U.lo getusershell$U.lo sig2str$U.lo euidaccess$U.lo rpmatch$U.lo strndup$U.lo strverscmp$U.lo getpass$U.lo memrchr$U.lo fchdir-stub$U.lo
MAKEINFO = ${SHELL} /boot/home/Development/current/src/apps/bin/coreutils-5.0/config/missing --run makeinfo
MAN =  uname.1 stty.1
MKINSTALLDIRS = config/mkinstalldirs
MSGFMT = :
MSGMERGE = :
NEED_SETGID = false
OBJEXT = o
OPTIONAL_BIN_PROGS =  uname$(EXEEXT) stty$(EXEEXT)
OPTIONAL_BIN_ZCRIPTS = 
PACKAGE = coreutils
PACKAGE_BUGREPORT = bug-coreutils@gnu.org
PACKAGE_NAME = GNU coreutils
PACKAGE_STRING = GNU coreutils 5.0
PACKAGE_TARNAME = coreutils
PACKAGE_VERSION = 5.0
PATH_SEPARATOR = :

PERL = perl
POSUB = 
POW_LIB = 
RANLIB = ranlib
SEQ_LIBM = 
SET_MAKE = 
SHELL = /bin/sh
SQRT_LIBM = 
STRIP = 
U = 
USE_NLS = no
VERSION = 5.0
XGETTEXT = :
YACC = bison -y
ac_ct_CC = gcc
ac_ct_RANLIB = ranlib
ac_ct_STRIP = 
am__fastdepCC_FALSE = 
am__fastdepCC_TRUE = #
am__include = include
am__leading_dot = .
am__quote = 
bindir = ${exec_prefix}/bin
build = i586-pc-beos
build_alias = 
build_cpu = i586
build_os = beos
build_vendor = pc
datadir = ${prefix}/share
exec_prefix = ${prefix}
host = i586-pc-beos
host_alias = 
host_cpu = i586
host_os = beos
host_vendor = pc
includedir = ${prefix}/include
infodir = ${prefix}/info
install_sh = /boot/home/Development/current/src/apps/bin/coreutils-5.0/config/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localstatedir = ${prefix}/var
mandir = ${prefix}/man
oldincludedir = /usr/include
prefix = /usr/local
program_transform_name = s,x,x,
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
sysconfdir = ${prefix}/etc
target_alias = 

EXTRA_PROGRAMS = chroot df hostid nice pinky stty su uname uptime users who
EXTRA_SCRIPTS = nohup

bin_SCRIPTS = groups 
bin_PROGRAMS = chgrp chown chmod cp dd dircolors du \
  ginstall link ln dir vdir ls mkdir \
  mkfifo mknod mv readlink rm rmdir shred sync touch unlink \
  cat cksum comm csplit cut expand fmt fold head join md5sum \
  nl od paste pr ptx sha1sum sort split sum tac tail tr tsort unexpand uniq wc \
  basename date dirname echo env expr factor false \
  hostname id kill logname pathchk printenv printf pwd seq sleep tee \
  test true tty whoami yes \
   uname$(EXEEXT) stty$(EXEEXT) 
# stat 


localedir = $(datadir)/locale

noinst_HEADERS = \
  system.h sys2.h checksum.h copy.h cp-hash.h ls.h dircolors.h remove.h \
  chown-core.h fs.h \
  wheel.h wheel-size.h

EXTRA_DIST = dcgen dircolors.hin tac-pipe.c \
  groups.sh nohup.sh wheel-gen.pl

CLEANFILES = $(SCRIPTS) su

INCLUDES = -I.. -I$(srcdir) -I$(top_srcdir)/lib -I../lib

# Sometimes, the expansion of  includes -lc which may
# include modules defining variables like `optind', so libfetish.a
# must precede  in order to ensure we use GNU getopt.
# But libfetish.a must also follow , since libintl uses
# replacement functions defined in libfetish.a.
LDADD = ../lib/libfetish.a  ../lib/libfetish.a

dir_LDADD = $(LDADD) 
ls_LDADD = $(LDADD) 
shred_LDADD = $(LDADD) 
vdir_LDADD = $(LDADD) 

sort_LDADD = $(LDADD) 

# for clock_gettime
date_LDADD = $(LDADD) 

# For sqrt
factor_LDADD = $(LDADD) 

# If necessary, add -lm to resolve use of pow in lib/strtod.c.
# If necessary, add -liconv to resolve use of iconv in lib/unicodeio.c.
printf_LDADD = $(LDADD)  

# If necessary, add -lm to resolve use of floor, rint, modf.
seq_LDADD = $(LDADD) 

# If necessary, add -lm to resolve the `pow' reference in lib/strtod.c
# or for the fesetround reference in programs using nanosec.c.
nanosec_libs = \
  $(LDADD)    


sleep_LDADD = $(nanosec_libs)
tail_LDADD = $(nanosec_libs)

uptime_LDADD = $(LDADD) 

su_LDADD = $(LDADD) 

SUFFIXES = .sh

installed_su = $(DESTDIR)$(bindir)/`echo su|sed '$(transform)'`

setuid_root_mode = a=rx,u+s

INSTALL_SU = \
  p=su; \
  echo " $(INSTALL_PROGRAM) $$p $(installed_su)"; \
  $(INSTALL_PROGRAM) $$p $(installed_su); \
  echo " chown root $(installed_su)"; \
  chown root $(installed_su); \
  echo " chmod $(setuid_root_mode) $(installed_su)"; \
  chmod $(setuid_root_mode) $(installed_su)

ginstall_SOURCES = install.c copy.c cp-hash.c

cp_SOURCES = cp.c copy.c cp-hash.c
dir_SOURCES = ls.c ls-dir.c
vdir_SOURCES = ls.c ls-vdir.c
ls_SOURCES = ls.c ls-ls.c
chown_SOURCES = chown.c chown-core.c
chgrp_SOURCES = chgrp.c chown-core.c

mv_SOURCES = mv.c copy.c cp-hash.c remove.c
rm_SOURCES = rm.c remove.c

md5sum_SOURCES = md5sum.c md5.c
sha1sum_SOURCES = md5sum.c sha1sum.c
editpl = sed -e 's,@''PERL''@,$(PERL),g'

MAINTAINERCLEANFILES = dircolors.h \
  wheel.h wheel-size.h


wheel_size = 5

BUILT_SOURCES = dircolors.h false.c wheel.h wheel-size.h

# false exits nonzero even with --help or --version.
# Tell automake to exempt it from that installcheck test.
AM_INSTALLCHECK_STD_OPTIONS_EXEMPT = false

all_programs = \
    $(bin_PROGRAMS) \
    $(bin_SCRIPTS) \
  $(EXTRA_PROGRAMS) \
  $(EXTRA_SCRIPTS)


pm = progs-makefile
pr = progs-readme

# Extract the list of authors from each file.
sed_filter = s/^ *//;s/N_ (//;s/^"//;s/")*$$//
# Sometimes the string is on the same line as the #define...
s1 = '/^\#define AUTHORS \([^\\]\)/{;s//\1/;$(sed_filter);p;q;}'
# Sometimes the string is on the backslash-continued line after the #define.
s2 = '/^\#define AUTHORS \\\\/{;n;$(sed_filter);p;q;}'
subdir = src
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
mkinstalldirs = $(SHELL) $(top_srcdir)/config/mkinstalldirs
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES =
EXTRA_PROGRAMS = chroot$(EXEEXT) df$(EXEEXT) hostid$(EXEEXT) \
	nice$(EXEEXT) pinky$(EXEEXT) stty$(EXEEXT) su$(EXEEXT) \
	uname$(EXEEXT) uptime$(EXEEXT) users$(EXEEXT) who$(EXEEXT)
bin_PROGRAMS = chgrp$(EXEEXT) chown$(EXEEXT) chmod$(EXEEXT) cp$(EXEEXT) \
	dd$(EXEEXT) dircolors$(EXEEXT) du$(EXEEXT) ginstall$(EXEEXT) \
	link$(EXEEXT) ln$(EXEEXT) dir$(EXEEXT) vdir$(EXEEXT) \
	ls$(EXEEXT) mkdir$(EXEEXT) mkfifo$(EXEEXT) mknod$(EXEEXT) \
	mv$(EXEEXT) readlink$(EXEEXT) rm$(EXEEXT) rmdir$(EXEEXT) \
	shred$(EXEEXT) sync$(EXEEXT) touch$(EXEEXT) \
	unlink$(EXEEXT) cat$(EXEEXT) cksum$(EXEEXT) comm$(EXEEXT) \
	csplit$(EXEEXT) cut$(EXEEXT) expand$(EXEEXT) fmt$(EXEEXT) \
	fold$(EXEEXT) head$(EXEEXT) join$(EXEEXT) md5sum$(EXEEXT) \
	nl$(EXEEXT) od$(EXEEXT) paste$(EXEEXT) pr$(EXEEXT) ptx$(EXEEXT) \
	sha1sum$(EXEEXT) sort$(EXEEXT) split$(EXEEXT) sum$(EXEEXT) \
	tac$(EXEEXT) tail$(EXEEXT) tr$(EXEEXT) tsort$(EXEEXT) \
	unexpand$(EXEEXT) uniq$(EXEEXT) wc$(EXEEXT) basename$(EXEEXT) \
	date$(EXEEXT) dirname$(EXEEXT) echo$(EXEEXT) env$(EXEEXT) \
	expr$(EXEEXT) factor$(EXEEXT) false$(EXEEXT) hostname$(EXEEXT) \
	id$(EXEEXT) kill$(EXEEXT) logname$(EXEEXT) pathchk$(EXEEXT) \
	printenv$(EXEEXT) printf$(EXEEXT) pwd$(EXEEXT) seq$(EXEEXT) \
	sleep$(EXEEXT) tee$(EXEEXT) test$(EXEEXT) true$(EXEEXT) \
	tty$(EXEEXT) whoami$(EXEEXT) yes$(EXEEXT)  uname$(EXEEXT) stty$(EXEEXT) \

PROGRAMS = $(bin_PROGRAMS)
#	stat$(EXEEXT) 

basename_SOURCES = basename.c
basename_OBJECTS = basename.$(OBJEXT)
basename_LDADD = $(LDADD)
basename_DEPENDENCIES = ../lib/libfetish.a ../lib/libfetish.a
basename_LDFLAGS =
cat_SOURCES = cat.c
cat_OBJECTS = cat.$(OBJEXT)
cat_LDADD = $(LDADD)
cat_DEPENDENCIES = ../lib/libfetish.a ../lib/libfetish.a
cat_LDFLAGS =
am_chgrp_OBJECTS = chgrp.$(OBJEXT) chown-core.$(OBJEXT)
chgrp_OBJECTS = $(am_chgrp_OBJECTS)
chgrp_LDADD = $(LDADD)
chgrp_DEPENDENCIES = ../lib/libfetish.a ../lib/libfetish.a
chgrp_LDFLAGS =
chmod_SOURCES = chmod.c
chmod_OBJECTS = chmod.$(OBJEXT)
chmod_LDADD = $(LDADD)
chmod_DEPENDENCIES = ../lib/libfetish.a ../lib/libfetish.a
chmod_LDFLAGS =
am_chown_OBJECTS = chown.$(OBJEXT) chown-core.$(OBJEXT)
chown_OBJECTS = $(am_chown_OBJECTS)
chown_LDADD = $(LDADD)
chown_DEPENDENCIES = ../lib/libfetish.a ../lib/libfetish.a
chown_LDFLAGS =
chroot_SOURCES = chroot.c
chroot_OBJECTS = chroot.$(OBJEXT)
chroot_LDADD = $(LDADD)
chroot_DEPENDENCIES = ../lib/libfetish.a ../lib/libfetish.a
chroot_LDFLAGS =
cksum_SOURCES = cksum.c
cksum_OBJECTS = cksum.$(OBJEXT)
cksum_LDADD = $(LDADD)
cksum_DEPENDENCIES = ../lib/libfetish.a ../lib/libfetish.a
cksum_LDFLAGS =
comm_SOURCES = comm.c
comm_OBJECTS = comm.$(OBJEXT)
comm_LDADD = $(LDADD)
comm_DEPENDENCIES = ../lib/libfetish.a ../lib/libfetish.a
comm_LDFLAGS =
am_cp_OBJECTS = cp.$(OBJEXT) copy.$(OBJEXT) cp-hash.$(OBJEXT)
cp_OBJECTS = $(am_cp_OBJECTS)
cp_LDADD = $(LDADD)
cp_DEPENDENCIES = ../lib/libfetish.a ../lib/libfetish.a
cp_LDFLAGS =
csplit_SOURCES = csplit.c
csplit_OBJECTS = csplit.$(OBJEXT)
csplit_LDADD = $(LDADD)
csplit_DEPENDENCIES = ../lib/libfetish.a ../lib/libfetish.a
csplit_LDFLAGS =
cut_SOURCES = cut.c
cut_OBJECTS = cut.$(OBJEXT)
cut_LDADD = $(LDADD)
cut_DEPENDENCIES = ../lib/libfetish.a ../lib/libfetish.a
cut_LDFLAGS =
date_SOURCES = date.c
date_OBJECTS = date.$(OBJEXT)
date_DEPENDENCIES = ../lib/libfetish.a ../lib/libfetish.a
date_LDFLAGS =
dd_SOURCES = dd.c
dd_OBJECTS = dd.$(OBJEXT)
dd_LDADD = $(LDADD)
dd_DEPENDENCIES = ../lib/libfetish.a ../lib/libfetish.a
dd_LDFLAGS =
df_SOURCES = df.c
df_OBJECTS = df.$(OBJEXT)
df_LDADD = $(LDADD)
df_DEPENDENCIES = ../lib/libfetish.a ../lib/libfetish.a
df_LDFLAGS =
am_dir_OBJECTS = ls.$(OBJEXT) ls-dir.$(OBJEXT)
dir_OBJECTS = $(am_dir_OBJECTS)
dir_DEPENDENCIES = ../lib/libfetish.a ../lib/libfetish.a
dir_LDFLAGS =
dircolors_SOURCES = dircolors.c
dircolors_OBJECTS = dircolors.$(OBJEXT)
dircolors_LDADD = $(LDADD)
dircolors_DEPENDENCIES = ../lib/libfetish.a ../lib/libfetish.a
dircolors_LDFLAGS =
dirname_SOURCES = dirname.c
dirname_OBJECTS = dirname.$(OBJEXT)
dirname_LDADD = $(LDADD)
dirname_DEPENDENCIES = ../lib/libfetish.a ../lib/libfetish.a
dirname_LDFLAGS =
du_SOURCES = du.c
du_OBJECTS = du.$(OBJEXT)
du_LDADD = $(LDADD)
du_DEPENDENCIES = ../lib/libfetish.a ../lib/libfetish.a
du_LDFLAGS =
echo_SOURCES = echo.c
echo_OBJECTS = echo.$(OBJEXT)
echo_LDADD = $(LDADD)
echo_DEPENDENCIES = ../lib/libfetish.a ../lib/libfetish.a
echo_LDFLAGS =
env_SOURCES = env.c
env_OBJECTS = env.$(OBJEXT)
env_LDADD = $(LDADD)
env_DEPENDENCIES = ../lib/libfetish.a ../lib/libfetish.a
env_LDFLAGS =
expand_SOURCES = expand.c
expand_OBJECTS = expand.$(OBJEXT)
expand_LDADD = $(LDADD)
expand_DEPENDENCIES = ../lib/libfetish.a ../lib/libfetish.a
expand_LDFLAGS =
expr_SOURCES = expr.c
expr_OBJECTS = expr.$(OBJEXT)
expr_LDADD = $(LDADD)
expr_DEPENDENCIES = ../lib/libfetish.a ../lib/libfetish.a
expr_LDFLAGS =
factor_SOURCES = factor.c
factor_OBJECTS = factor.$(OBJEXT)
factor_DEPENDENCIES = ../lib/libfetish.a ../lib/libfetish.a
factor_LDFLAGS =
false_SOURCES = false.c
false_OBJECTS = false.$(OBJEXT)
false_LDADD = $(LDADD)
false_DEPENDENCIES = ../lib/libfetish.a ../lib/libfetish.a
false_LDFLAGS =
fmt_SOURCES = fmt.c
fmt_OBJECTS = fmt.$(OBJEXT)
fmt_LDADD = $(LDADD)
fmt_DEPENDENCIES = ../lib/libfetish.a ../lib/libfetish.a
fmt_LDFLAGS =
fold_SOURCES = fold.c
fold_OBJECTS = fold.$(OBJEXT)
fold_LDADD = $(LDADD)
fold_DEPENDENCIES = ../lib/libfetish.a ../lib/libfetish.a
fold_LDFLAGS =
am_ginstall_OBJECTS = install.$(OBJEXT) copy.$(OBJEXT) cp-hash.$(OBJEXT)
ginstall_OBJECTS = $(am_ginstall_OBJECTS)
ginstall_LDADD = $(LDADD)
ginstall_DEPENDENCIES = ../lib/libfetish.a ../lib/libfetish.a
ginstall_LDFLAGS =
head_SOURCES = head.c
head_OBJECTS = head.$(OBJEXT)
head_LDADD = $(LDADD)
head_DEPENDENCIES = ../lib/libfetish.a ../lib/libfetish.a
head_LDFLAGS =
hostid_SOURCES = hostid.c
hostid_OBJECTS = hostid.$(OBJEXT)
hostid_LDADD = $(LDADD)
hostid_DEPENDENCIES = ../lib/libfetish.a ../lib/libfetish.a
hostid_LDFLAGS =
hostname_SOURCES = hostname.c
hostname_OBJECTS = hostname.$(OBJEXT)
hostname_LDADD = $(LDADD)
hostname_DEPENDENCIES = ../lib/libfetish.a ../lib/libfetish.a
hostname_LDFLAGS =
id_SOURCES = id.c
id_OBJECTS = id.$(OBJEXT)
id_LDADD = $(LDADD)
id_DEPENDENCIES = ../lib/libfetish.a ../lib/libfetish.a
id_LDFLAGS =
join_SOURCES = join.c
join_OBJECTS = join.$(OBJEXT)
join_LDADD = $(LDADD)
join_DEPENDENCIES = ../lib/libfetish.a ../lib/libfetish.a
join_LDFLAGS =
kill_SOURCES = kill.c
kill_OBJECTS = kill.$(OBJEXT)
kill_LDADD = $(LDADD)
kill_DEPENDENCIES = ../lib/libfetish.a ../lib/libfetish.a
kill_LDFLAGS =
link_SOURCES = link.c
link_OBJECTS = link.$(OBJEXT)
link_LDADD = $(LDADD)
link_DEPENDENCIES = ../lib/libfetish.a ../lib/libfetish.a
link_LDFLAGS =
ln_SOURCES = ln.c
ln_OBJECTS = ln.$(OBJEXT)
ln_LDADD = $(LDADD)
ln_DEPENDENCIES = ../lib/libfetish.a ../lib/libfetish.a
ln_LDFLAGS =
logname_SOURCES = logname.c
logname_OBJECTS = logname.$(OBJEXT)
logname_LDADD = $(LDADD)
logname_DEPENDENCIES = ../lib/libfetish.a ../lib/libfetish.a
logname_LDFLAGS =
am_ls_OBJECTS = ls.$(OBJEXT) ls-ls.$(OBJEXT)
ls_OBJECTS = $(am_ls_OBJECTS)
ls_DEPENDENCIES = ../lib/libfetish.a ../lib/libfetish.a
ls_LDFLAGS =
am_md5sum_OBJECTS = md5sum.$(OBJEXT) md5.$(OBJEXT)
md5sum_OBJECTS = $(am_md5sum_OBJECTS)
md5sum_LDADD = $(LDADD)
md5sum_DEPENDENCIES = ../lib/libfetish.a ../lib/libfetish.a
md5sum_LDFLAGS =
mkdir_SOURCES = mkdir.c
mkdir_OBJECTS = mkdir.$(OBJEXT)
mkdir_LDADD = $(LDADD)
mkdir_DEPENDENCIES = ../lib/libfetish.a ../lib/libfetish.a
mkdir_LDFLAGS =
mkfifo_SOURCES = mkfifo.c
mkfifo_OBJECTS = mkfifo.$(OBJEXT)
mkfifo_LDADD = $(LDADD)
mkfifo_DEPENDENCIES = ../lib/libfetish.a ../lib/libfetish.a
mkfifo_LDFLAGS =
mknod_SOURCES = mknod.c
mknod_OBJECTS = mknod.$(OBJEXT)
mknod_LDADD = $(LDADD)
mknod_DEPENDENCIES = ../lib/libfetish.a ../lib/libfetish.a
mknod_LDFLAGS =
am_mv_OBJECTS = mv.$(OBJEXT) copy.$(OBJEXT) cp-hash.$(OBJEXT) \
	remove.$(OBJEXT)
mv_OBJECTS = $(am_mv_OBJECTS)
mv_LDADD = $(LDADD)
mv_DEPENDENCIES = ../lib/libfetish.a ../lib/libfetish.a
mv_LDFLAGS =
nice_SOURCES = nice.c
nice_OBJECTS = nice.$(OBJEXT)
nice_LDADD = $(LDADD)
nice_DEPENDENCIES = ../lib/libfetish.a ../lib/libfetish.a
nice_LDFLAGS =
nl_SOURCES = nl.c
nl_OBJECTS = nl.$(OBJEXT)
nl_LDADD = $(LDADD)
nl_DEPENDENCIES = ../lib/libfetish.a ../lib/libfetish.a
nl_LDFLAGS =
od_SOURCES = od.c
od_OBJECTS = od.$(OBJEXT)
od_LDADD = $(LDADD)
od_DEPENDENCIES = ../lib/libfetish.a ../lib/libfetish.a
od_LDFLAGS =
paste_SOURCES = paste.c
paste_OBJECTS = paste.$(OBJEXT)
paste_LDADD = $(LDADD)
paste_DEPENDENCIES = ../lib/libfetish.a ../lib/libfetish.a
paste_LDFLAGS =
pathchk_SOURCES = pathchk.c
pathchk_OBJECTS = pathchk.$(OBJEXT)
pathchk_LDADD = $(LDADD)
pathchk_DEPENDENCIES = ../lib/libfetish.a ../lib/libfetish.a
pathchk_LDFLAGS =
pinky_SOURCES = pinky.c
pinky_OBJECTS = pinky.$(OBJEXT)
pinky_LDADD = $(LDADD)
pinky_DEPENDENCIES = ../lib/libfetish.a ../lib/libfetish.a
pinky_LDFLAGS =
pr_SOURCES = pr.c
pr_OBJECTS = pr.$(OBJEXT)
pr_LDADD = $(LDADD)
pr_DEPENDENCIES = ../lib/libfetish.a ../lib/libfetish.a
pr_LDFLAGS =
printenv_SOURCES = printenv.c
printenv_OBJECTS = printenv.$(OBJEXT)
printenv_LDADD = $(LDADD)
printenv_DEPENDENCIES = ../lib/libfetish.a ../lib/libfetish.a
printenv_LDFLAGS =
printf_SOURCES = printf.c
printf_OBJECTS = printf.$(OBJEXT)
printf_DEPENDENCIES = ../lib/libfetish.a ../lib/libfetish.a
printf_LDFLAGS =
ptx_SOURCES = ptx.c
ptx_OBJECTS = ptx.$(OBJEXT)
ptx_LDADD = $(LDADD)
ptx_DEPENDENCIES = ../lib/libfetish.a ../lib/libfetish.a
ptx_LDFLAGS =
pwd_SOURCES = pwd.c
pwd_OBJECTS = pwd.$(OBJEXT)
pwd_LDADD = $(LDADD)
pwd_DEPENDENCIES = ../lib/libfetish.a ../lib/libfetish.a
pwd_LDFLAGS =
readlink_SOURCES = readlink.c
readlink_OBJECTS = readlink.$(OBJEXT)
readlink_LDADD = $(LDADD)
readlink_DEPENDENCIES = ../lib/libfetish.a ../lib/libfetish.a
readlink_LDFLAGS =
am_rm_OBJECTS = rm.$(OBJEXT) remove.$(OBJEXT)
rm_OBJECTS = $(am_rm_OBJECTS)
rm_LDADD = $(LDADD)
rm_DEPENDENCIES = ../lib/libfetish.a ../lib/libfetish.a
rm_LDFLAGS =
rmdir_SOURCES = rmdir.c
rmdir_OBJECTS = rmdir.$(OBJEXT)
rmdir_LDADD = $(LDADD)
rmdir_DEPENDENCIES = ../lib/libfetish.a ../lib/libfetish.a
rmdir_LDFLAGS =
seq_SOURCES = seq.c
seq_OBJECTS = seq.$(OBJEXT)
seq_DEPENDENCIES = ../lib/libfetish.a ../lib/libfetish.a
seq_LDFLAGS =
am_sha1sum_OBJECTS = md5sum.$(OBJEXT) sha1sum.$(OBJEXT)
sha1sum_OBJECTS = $(am_sha1sum_OBJECTS)
sha1sum_LDADD = $(LDADD)
sha1sum_DEPENDENCIES = ../lib/libfetish.a ../lib/libfetish.a
sha1sum_LDFLAGS =
shred_SOURCES = shred.c
shred_OBJECTS = shred.$(OBJEXT)
shred_DEPENDENCIES = ../lib/libfetish.a ../lib/libfetish.a
shred_LDFLAGS =
sleep_SOURCES = sleep.c
sleep_OBJECTS = sleep.$(OBJEXT)
sleep_DEPENDENCIES = ../lib/libfetish.a ../lib/libfetish.a
sleep_LDFLAGS =
sort_SOURCES = sort.c
sort_OBJECTS = sort.$(OBJEXT)
sort_DEPENDENCIES = ../lib/libfetish.a ../lib/libfetish.a
sort_LDFLAGS =
split_SOURCES = split.c
split_OBJECTS = split.$(OBJEXT)
split_LDADD = $(LDADD)
split_DEPENDENCIES = ../lib/libfetish.a ../lib/libfetish.a
split_LDFLAGS =
stat_SOURCES = stat.c
stat_OBJECTS = stat.$(OBJEXT)
stat_LDADD = $(LDADD)
stat_DEPENDENCIES = ../lib/libfetish.a ../lib/libfetish.a
stat_LDFLAGS =
stty_SOURCES = stty.c
stty_OBJECTS = stty.$(OBJEXT)
stty_LDADD = $(LDADD)
stty_DEPENDENCIES = ../lib/libfetish.a ../lib/libfetish.a
stty_LDFLAGS =
su_SOURCES = su.c
su_OBJECTS = su.$(OBJEXT)
su_DEPENDENCIES = ../lib/libfetish.a ../lib/libfetish.a
su_LDFLAGS =
sum_SOURCES = sum.c
sum_OBJECTS = sum.$(OBJEXT)
sum_LDADD = $(LDADD)
sum_DEPENDENCIES = ../lib/libfetish.a ../lib/libfetish.a
sum_LDFLAGS =
sync_SOURCES = sync.c
sync_OBJECTS = sync.$(OBJEXT)
sync_LDADD = $(LDADD)
sync_DEPENDENCIES = ../lib/libfetish.a ../lib/libfetish.a
sync_LDFLAGS =
tac_SOURCES = tac.c
tac_OBJECTS = tac.$(OBJEXT)
tac_LDADD = $(LDADD)
tac_DEPENDENCIES = ../lib/libfetish.a ../lib/libfetish.a
tac_LDFLAGS =
tail_SOURCES = tail.c
tail_OBJECTS = tail.$(OBJEXT)
tail_DEPENDENCIES = ../lib/libfetish.a ../lib/libfetish.a
tail_LDFLAGS =
tee_SOURCES = tee.c
tee_OBJECTS = tee.$(OBJEXT)
tee_LDADD = $(LDADD)
tee_DEPENDENCIES = ../lib/libfetish.a ../lib/libfetish.a
tee_LDFLAGS =
test_SOURCES = test.c
test_OBJECTS = test.$(OBJEXT)
test_LDADD = $(LDADD)
test_DEPENDENCIES = ../lib/libfetish.a ../lib/libfetish.a
test_LDFLAGS =
touch_SOURCES = touch.c
touch_OBJECTS = touch.$(OBJEXT)
touch_LDADD = $(LDADD)
touch_DEPENDENCIES = ../lib/libfetish.a ../lib/libfetish.a
touch_LDFLAGS =
tr_SOURCES = tr.c
tr_OBJECTS = tr.$(OBJEXT)
tr_LDADD = $(LDADD)
tr_DEPENDENCIES = ../lib/libfetish.a ../lib/libfetish.a
tr_LDFLAGS =
true_SOURCES = true.c
true_OBJECTS = true.$(OBJEXT)
true_LDADD = $(LDADD)
true_DEPENDENCIES = ../lib/libfetish.a ../lib/libfetish.a
true_LDFLAGS =
tsort_SOURCES = tsort.c
tsort_OBJECTS = tsort.$(OBJEXT)
tsort_LDADD = $(LDADD)
tsort_DEPENDENCIES = ../lib/libfetish.a ../lib/libfetish.a
tsort_LDFLAGS =
tty_SOURCES = tty.c
tty_OBJECTS = tty.$(OBJEXT)
tty_LDADD = $(LDADD)
tty_DEPENDENCIES = ../lib/libfetish.a ../lib/libfetish.a
tty_LDFLAGS =
uname_SOURCES = uname.c
uname_OBJECTS = uname.$(OBJEXT)
uname_LDADD = $(LDADD)
uname_DEPENDENCIES = ../lib/libfetish.a ../lib/libfetish.a
uname_LDFLAGS =
unexpand_SOURCES = unexpand.c
unexpand_OBJECTS = unexpand.$(OBJEXT)
unexpand_LDADD = $(LDADD)
unexpand_DEPENDENCIES = ../lib/libfetish.a ../lib/libfetish.a
unexpand_LDFLAGS =
uniq_SOURCES = uniq.c
uniq_OBJECTS = uniq.$(OBJEXT)
uniq_LDADD = $(LDADD)
uniq_DEPENDENCIES = ../lib/libfetish.a ../lib/libfetish.a
uniq_LDFLAGS =
unlink_SOURCES = unlink.c
unlink_OBJECTS = unlink.$(OBJEXT)
unlink_LDADD = $(LDADD)
unlink_DEPENDENCIES = ../lib/libfetish.a ../lib/libfetish.a
unlink_LDFLAGS =
uptime_SOURCES = uptime.c
uptime_OBJECTS = uptime.$(OBJEXT)
uptime_DEPENDENCIES = ../lib/libfetish.a ../lib/libfetish.a
uptime_LDFLAGS =
users_SOURCES = users.c
users_OBJECTS = users.$(OBJEXT)
users_LDADD = $(LDADD)
users_DEPENDENCIES = ../lib/libfetish.a ../lib/libfetish.a
users_LDFLAGS =
am_vdir_OBJECTS = ls.$(OBJEXT) ls-vdir.$(OBJEXT)
vdir_OBJECTS = $(am_vdir_OBJECTS)
vdir_DEPENDENCIES = ../lib/libfetish.a ../lib/libfetish.a
vdir_LDFLAGS =
wc_SOURCES = wc.c
wc_OBJECTS = wc.$(OBJEXT)
wc_LDADD = $(LDADD)
wc_DEPENDENCIES = ../lib/libfetish.a ../lib/libfetish.a
wc_LDFLAGS =
who_SOURCES = who.c
who_OBJECTS = who.$(OBJEXT)
who_LDADD = $(LDADD)
who_DEPENDENCIES = ../lib/libfetish.a ../lib/libfetish.a
who_LDFLAGS =
whoami_SOURCES = whoami.c
whoami_OBJECTS = whoami.$(OBJEXT)
whoami_LDADD = $(LDADD)
whoami_DEPENDENCIES = ../lib/libfetish.a ../lib/libfetish.a
whoami_LDFLAGS =
yes_SOURCES = yes.c
yes_OBJECTS = yes.$(OBJEXT)
yes_LDADD = $(LDADD)
yes_DEPENDENCIES = ../lib/libfetish.a ../lib/libfetish.a
yes_LDFLAGS =
SCRIPTS = $(bin_SCRIPTS)


DEFAULT_INCLUDES =  -I. -I$(srcdir) -I$(top_builddir)
depcomp = $(SHELL) $(top_srcdir)/config/depcomp
am__depfiles_maybe = depfiles
DEP_FILES = ./$(DEPDIR)/basename.Po ./$(DEPDIR)/cat.Po \
	./$(DEPDIR)/chgrp.Po ./$(DEPDIR)/chmod.Po \
	./$(DEPDIR)/chown-core.Po ./$(DEPDIR)/chown.Po \
	./$(DEPDIR)/chroot.Po ./$(DEPDIR)/cksum.Po \
	./$(DEPDIR)/comm.Po ./$(DEPDIR)/copy.Po \
	./$(DEPDIR)/cp-hash.Po ./$(DEPDIR)/cp.Po \
	./$(DEPDIR)/csplit.Po ./$(DEPDIR)/cut.Po \
	./$(DEPDIR)/date.Po ./$(DEPDIR)/dd.Po \
	./$(DEPDIR)/df.Po ./$(DEPDIR)/dircolors.Po \
	./$(DEPDIR)/dirname.Po ./$(DEPDIR)/du.Po \
	./$(DEPDIR)/echo.Po ./$(DEPDIR)/env.Po \
	./$(DEPDIR)/expand.Po ./$(DEPDIR)/expr.Po \
	./$(DEPDIR)/factor.Po ./$(DEPDIR)/false.Po \
	./$(DEPDIR)/fmt.Po ./$(DEPDIR)/fold.Po \
	./$(DEPDIR)/head.Po ./$(DEPDIR)/hostid.Po \
	./$(DEPDIR)/hostname.Po ./$(DEPDIR)/id.Po \
	./$(DEPDIR)/install.Po ./$(DEPDIR)/join.Po \
	./$(DEPDIR)/kill.Po ./$(DEPDIR)/link.Po \
	./$(DEPDIR)/ln.Po ./$(DEPDIR)/logname.Po \
	./$(DEPDIR)/ls-dir.Po ./$(DEPDIR)/ls-ls.Po \
	./$(DEPDIR)/ls-vdir.Po ./$(DEPDIR)/ls.Po \
	./$(DEPDIR)/md5.Po ./$(DEPDIR)/md5sum.Po \
	./$(DEPDIR)/mkdir.Po ./$(DEPDIR)/mkfifo.Po \
	./$(DEPDIR)/mknod.Po ./$(DEPDIR)/mv.Po \
	./$(DEPDIR)/nice.Po ./$(DEPDIR)/nl.Po \
	./$(DEPDIR)/od.Po ./$(DEPDIR)/paste.Po \
	./$(DEPDIR)/pathchk.Po ./$(DEPDIR)/pinky.Po \
	./$(DEPDIR)/pr.Po ./$(DEPDIR)/printenv.Po \
	./$(DEPDIR)/printf.Po ./$(DEPDIR)/ptx.Po \
	./$(DEPDIR)/pwd.Po ./$(DEPDIR)/readlink.Po \
	./$(DEPDIR)/remove.Po ./$(DEPDIR)/rm.Po \
	./$(DEPDIR)/rmdir.Po ./$(DEPDIR)/seq.Po \
	./$(DEPDIR)/sha1sum.Po ./$(DEPDIR)/shred.Po \
	./$(DEPDIR)/sleep.Po ./$(DEPDIR)/sort.Po \
	./$(DEPDIR)/split.Po ./$(DEPDIR)/stat.Po \
	./$(DEPDIR)/stty.Po ./$(DEPDIR)/su.Po \
	./$(DEPDIR)/sum.Po ./$(DEPDIR)/sync.Po \
	./$(DEPDIR)/tac.Po ./$(DEPDIR)/tail.Po \
	./$(DEPDIR)/tee.Po ./$(DEPDIR)/test.Po \
	./$(DEPDIR)/touch.Po ./$(DEPDIR)/tr.Po \
	./$(DEPDIR)/true.Po ./$(DEPDIR)/tsort.Po \
	./$(DEPDIR)/tty.Po ./$(DEPDIR)/uname.Po \
	./$(DEPDIR)/unexpand.Po ./$(DEPDIR)/uniq.Po \
	./$(DEPDIR)/unlink.Po ./$(DEPDIR)/uptime.Po \
	./$(DEPDIR)/users.Po ./$(DEPDIR)/wc.Po \
	./$(DEPDIR)/who.Po ./$(DEPDIR)/whoami.Po \
	./$(DEPDIR)/yes.Po
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
DIST_SOURCES = basename.c cat.c $(chgrp_SOURCES) chmod.c \
	$(chown_SOURCES) chroot.c cksum.c comm.c $(cp_SOURCES) csplit.c \
	cut.c date.c dd.c df.c $(dir_SOURCES) dircolors.c dirname.c \
	du.c echo.c env.c expand.c expr.c factor.c false.c fmt.c fold.c \
	$(ginstall_SOURCES) head.c hostid.c hostname.c id.c join.c \
	kill.c link.c ln.c logname.c $(ls_SOURCES) $(md5sum_SOURCES) \
	mkdir.c mkfifo.c mknod.c $(mv_SOURCES) nice.c nl.c od.c paste.c \
	pathchk.c pinky.c pr.c printenv.c printf.c ptx.c pwd.c \
	readlink.c $(rm_SOURCES) rmdir.c seq.c $(sha1sum_SOURCES) \
	shred.c sleep.c sort.c split.c stat.c stty.c su.c sum.c sync.c \
	tac.c tail.c tee.c test.c touch.c tr.c true.c tsort.c tty.c \
	uname.c unexpand.c uniq.c unlink.c uptime.c users.c \
	$(vdir_SOURCES) wc.c who.c whoami.c yes.c
HEADERS = $(noinst_HEADERS)

DIST_COMMON = $(noinst_HEADERS) Makefile.am Makefile.in
SOURCES = basename.c cat.c $(chgrp_SOURCES) chmod.c $(chown_SOURCES) chroot.c cksum.c comm.c $(cp_SOURCES) csplit.c cut.c date.c dd.c df.c $(dir_SOURCES) dircolors.c dirname.c du.c echo.c env.c expand.c expr.c factor.c false.c fmt.c fold.c $(ginstall_SOURCES) head.c hostid.c hostname.c id.c join.c kill.c link.c ln.c logname.c $(ls_SOURCES) $(md5sum_SOURCES) mkdir.c mkfifo.c mknod.c $(mv_SOURCES) nice.c nl.c od.c paste.c pathchk.c pinky.c pr.c printenv.c printf.c ptx.c pwd.c readlink.c $(rm_SOURCES) rmdir.c seq.c $(sha1sum_SOURCES) shred.c sleep.c sort.c split.c stat.c stty.c su.c sum.c sync.c tac.c tail.c tee.c test.c touch.c tr.c true.c tsort.c tty.c uname.c unexpand.c uniq.c unlink.c uptime.c users.c $(vdir_SOURCES) wc.c who.c whoami.c yes.c

all: $(BUILT_SOURCES)
	$(MAKE) $(AM_MAKEFLAGS) all-am

.SUFFIXES:
.SUFFIXES: .sh .c .o .obj
$(srcdir)/Makefile.in:  Makefile.am  $(top_srcdir)/configure.ac $(ACLOCAL_M4)
	cd $(top_srcdir) && \
	  $(AUTOMAKE) --gnits  src/Makefile
Makefile:  $(srcdir)/Makefile.in  $(top_builddir)/config.status
	cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)
binPROGRAMS_INSTALL = $(INSTALL_PROGRAM)
install-binPROGRAMS: $(bin_PROGRAMS)
	@$(NORMAL_INSTALL)
	$(mkinstalldirs) $(DESTDIR)$(bindir)
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  p1=`echo $$p|sed 's/$(EXEEXT)$$//'`; \
	  if test -f $$p \
	  ; then \
	    f=`echo "$$p1" | sed 's,^.*/,,;$(transform);s/$$/$(EXEEXT)/'`; \
	   echo " $(INSTALL_PROGRAM_ENV) $(binPROGRAMS_INSTALL) $$p $(DESTDIR)$(bindir)/$$f"; \
	   $(INSTALL_PROGRAM_ENV) $(binPROGRAMS_INSTALL) $$p $(DESTDIR)$(bindir)/$$f || exit 1; \
	  else :; fi; \
	done

uninstall-binPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  f=`echo "$$p" | sed 's,^.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/'`; \
	  echo " rm -f $(DESTDIR)$(bindir)/$$f"; \
	  rm -f $(DESTDIR)$(bindir)/$$f; \
	done

clean-binPROGRAMS:
	-test -z "$(bin_PROGRAMS)" || rm -f $(bin_PROGRAMS) > /dev/null 2>&1 || /bin/rm -f $(bin_PROGRAMS)

installcheck-binPROGRAMS: $(bin_PROGRAMS)
	bad=0; pid=$$$$; list="$(bin_PROGRAMS)"; for p in $$list; do \
	  case ' $(AM_INSTALLCHECK_STD_OPTIONS_EXEMPT) ' in \
	   *" $$p "* | *" $(srcdir)/$$p "*) continue;; \
	  esac; \
	  f=`echo "$$p" | \
	     sed 's,^.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/'`; \
	  for opt in --help --version; do \
	    if $(DESTDIR)$(bindir)/$$f $$opt > c$${pid}_.out 2> c$${pid}_.err \
	         && test -n "`cat c$${pid}_.out`" \
	         && test -z "`cat c$${pid}_.err`"; then :; \
	    else echo "$$f does not support $$opt" 1>&2; bad=1; fi; \
	  done; \
	done; rm -f c$${pid}_.???; exit $$bad
basename$(EXEEXT): $(basename_OBJECTS) $(basename_DEPENDENCIES) 
	@rm -f basename$(EXEEXT)
	$(LINK) $(basename_LDFLAGS) $(basename_OBJECTS) $(basename_LDADD) $(LIBS)
cat$(EXEEXT): $(cat_OBJECTS) $(cat_DEPENDENCIES) 
	@rm -f cat$(EXEEXT)
	$(LINK) $(cat_LDFLAGS) $(cat_OBJECTS) $(cat_LDADD) $(LIBS)
chgrp$(EXEEXT): $(chgrp_OBJECTS) $(chgrp_DEPENDENCIES) 
	@rm -f chgrp$(EXEEXT)
	$(LINK) $(chgrp_LDFLAGS) $(chgrp_OBJECTS) $(chgrp_LDADD) $(LIBS)
chmod$(EXEEXT): $(chmod_OBJECTS) $(chmod_DEPENDENCIES) 
	@rm -f chmod$(EXEEXT)
	$(LINK) $(chmod_LDFLAGS) $(chmod_OBJECTS) $(chmod_LDADD) $(LIBS)
chown$(EXEEXT): $(chown_OBJECTS) $(chown_DEPENDENCIES) 
	@rm -f chown$(EXEEXT)
	$(LINK) $(chown_LDFLAGS) $(chown_OBJECTS) $(chown_LDADD) $(LIBS)
chroot$(EXEEXT): $(chroot_OBJECTS) $(chroot_DEPENDENCIES) 
	@rm -f chroot$(EXEEXT)
	$(LINK) $(chroot_LDFLAGS) $(chroot_OBJECTS) $(chroot_LDADD) $(LIBS)
cksum$(EXEEXT): $(cksum_OBJECTS) $(cksum_DEPENDENCIES) 
	@rm -f cksum$(EXEEXT)
	$(LINK) $(cksum_LDFLAGS) $(cksum_OBJECTS) $(cksum_LDADD) $(LIBS)
comm$(EXEEXT): $(comm_OBJECTS) $(comm_DEPENDENCIES) 
	@rm -f comm$(EXEEXT)
	$(LINK) $(comm_LDFLAGS) $(comm_OBJECTS) $(comm_LDADD) $(LIBS)
cp$(EXEEXT): $(cp_OBJECTS) $(cp_DEPENDENCIES) 
	@rm -f cp$(EXEEXT)
	$(LINK) $(cp_LDFLAGS) $(cp_OBJECTS) $(cp_LDADD) $(LIBS)
csplit$(EXEEXT): $(csplit_OBJECTS) $(csplit_DEPENDENCIES) 
	@rm -f csplit$(EXEEXT)
	$(LINK) $(csplit_LDFLAGS) $(csplit_OBJECTS) $(csplit_LDADD) $(LIBS)
cut$(EXEEXT): $(cut_OBJECTS) $(cut_DEPENDENCIES) 
	@rm -f cut$(EXEEXT)
	$(LINK) $(cut_LDFLAGS) $(cut_OBJECTS) $(cut_LDADD) $(LIBS)
date$(EXEEXT): $(date_OBJECTS) $(date_DEPENDENCIES) 
	@rm -f date$(EXEEXT)
	$(LINK) $(date_LDFLAGS) $(date_OBJECTS) $(date_LDADD) $(LIBS)
dd$(EXEEXT): $(dd_OBJECTS) $(dd_DEPENDENCIES) 
	@rm -f dd$(EXEEXT)
	$(LINK) $(dd_LDFLAGS) $(dd_OBJECTS) $(dd_LDADD) $(LIBS)
df$(EXEEXT): $(df_OBJECTS) $(df_DEPENDENCIES) 
	@rm -f df$(EXEEXT)
	$(LINK) $(df_LDFLAGS) $(df_OBJECTS) $(df_LDADD) $(LIBS)
dir$(EXEEXT): $(dir_OBJECTS) $(dir_DEPENDENCIES) 
	@rm -f dir$(EXEEXT)
	$(LINK) $(dir_LDFLAGS) $(dir_OBJECTS) $(dir_LDADD) $(LIBS)
dircolors$(EXEEXT): $(dircolors_OBJECTS) $(dircolors_DEPENDENCIES) 
	@rm -f dircolors$(EXEEXT)
	$(LINK) $(dircolors_LDFLAGS) $(dircolors_OBJECTS) $(dircolors_LDADD) $(LIBS)
dirname$(EXEEXT): $(dirname_OBJECTS) $(dirname_DEPENDENCIES) 
	@rm -f dirname$(EXEEXT)
	$(LINK) $(dirname_LDFLAGS) $(dirname_OBJECTS) $(dirname_LDADD) $(LIBS)
du$(EXEEXT): $(du_OBJECTS) $(du_DEPENDENCIES) 
	@rm -f du$(EXEEXT)
	$(LINK) $(du_LDFLAGS) $(du_OBJECTS) $(du_LDADD) $(LIBS)
echo$(EXEEXT): $(echo_OBJECTS) $(echo_DEPENDENCIES) 
	@rm -f echo$(EXEEXT)
	$(LINK) $(echo_LDFLAGS) $(echo_OBJECTS) $(echo_LDADD) $(LIBS)
env$(EXEEXT): $(env_OBJECTS) $(env_DEPENDENCIES) 
	@rm -f env$(EXEEXT)
	$(LINK) $(env_LDFLAGS) $(env_OBJECTS) $(env_LDADD) $(LIBS)
expand$(EXEEXT): $(expand_OBJECTS) $(expand_DEPENDENCIES) 
	@rm -f expand$(EXEEXT)
	$(LINK) $(expand_LDFLAGS) $(expand_OBJECTS) $(expand_LDADD) $(LIBS)
expr$(EXEEXT): $(expr_OBJECTS) $(expr_DEPENDENCIES) 
	@rm -f expr$(EXEEXT)
	$(LINK) $(expr_LDFLAGS) $(expr_OBJECTS) $(expr_LDADD) $(LIBS)
factor$(EXEEXT): $(factor_OBJECTS) $(factor_DEPENDENCIES) 
	@rm -f factor$(EXEEXT)
	$(LINK) $(factor_LDFLAGS) $(factor_OBJECTS) $(factor_LDADD) $(LIBS)
false$(EXEEXT): $(false_OBJECTS) $(false_DEPENDENCIES) 
	@rm -f false$(EXEEXT)
	$(LINK) $(false_LDFLAGS) $(false_OBJECTS) $(false_LDADD) $(LIBS)
fmt$(EXEEXT): $(fmt_OBJECTS) $(fmt_DEPENDENCIES) 
	@rm -f fmt$(EXEEXT)
	$(LINK) $(fmt_LDFLAGS) $(fmt_OBJECTS) $(fmt_LDADD) $(LIBS)
fold$(EXEEXT): $(fold_OBJECTS) $(fold_DEPENDENCIES) 
	@rm -f fold$(EXEEXT)
	$(LINK) $(fold_LDFLAGS) $(fold_OBJECTS) $(fold_LDADD) $(LIBS)
ginstall$(EXEEXT): $(ginstall_OBJECTS) $(ginstall_DEPENDENCIES) 
	@rm -f ginstall$(EXEEXT)
	$(LINK) $(ginstall_LDFLAGS) $(ginstall_OBJECTS) $(ginstall_LDADD) $(LIBS)
head$(EXEEXT): $(head_OBJECTS) $(head_DEPENDENCIES) 
	@rm -f head$(EXEEXT)
	$(LINK) $(head_LDFLAGS) $(head_OBJECTS) $(head_LDADD) $(LIBS)
hostid$(EXEEXT): $(hostid_OBJECTS) $(hostid_DEPENDENCIES) 
	@rm -f hostid$(EXEEXT)
	$(LINK) $(hostid_LDFLAGS) $(hostid_OBJECTS) $(hostid_LDADD) $(LIBS)
hostname$(EXEEXT): $(hostname_OBJECTS) $(hostname_DEPENDENCIES) 
	@rm -f hostname$(EXEEXT)
	$(LINK) $(hostname_LDFLAGS) $(hostname_OBJECTS) $(hostname_LDADD) $(LIBS)
id$(EXEEXT): $(id_OBJECTS) $(id_DEPENDENCIES) 
	@rm -f id$(EXEEXT)
	$(LINK) $(id_LDFLAGS) $(id_OBJECTS) $(id_LDADD) $(LIBS)
join$(EXEEXT): $(join_OBJECTS) $(join_DEPENDENCIES) 
	@rm -f join$(EXEEXT)
	$(LINK) $(join_LDFLAGS) $(join_OBJECTS) $(join_LDADD) $(LIBS)
kill$(EXEEXT): $(kill_OBJECTS) $(kill_DEPENDENCIES) 
	@rm -f kill$(EXEEXT)
	$(LINK) $(kill_LDFLAGS) $(kill_OBJECTS) $(kill_LDADD) $(LIBS)
link$(EXEEXT): $(link_OBJECTS) $(link_DEPENDENCIES) 
	@rm -f link$(EXEEXT)
	$(LINK) $(link_LDFLAGS) $(link_OBJECTS) $(link_LDADD) $(LIBS)
ln$(EXEEXT): $(ln_OBJECTS) $(ln_DEPENDENCIES) 
	@rm -f ln$(EXEEXT)
	$(LINK) $(ln_LDFLAGS) $(ln_OBJECTS) $(ln_LDADD) $(LIBS)
logname$(EXEEXT): $(logname_OBJECTS) $(logname_DEPENDENCIES) 
	@rm -f logname$(EXEEXT)
	$(LINK) $(logname_LDFLAGS) $(logname_OBJECTS) $(logname_LDADD) $(LIBS)
ls$(EXEEXT): $(ls_OBJECTS) $(ls_DEPENDENCIES) 
	@rm -f ls$(EXEEXT)
	$(LINK) $(ls_LDFLAGS) $(ls_OBJECTS) $(ls_LDADD) $(LIBS)
md5sum$(EXEEXT): $(md5sum_OBJECTS) $(md5sum_DEPENDENCIES) 
	@rm -f md5sum$(EXEEXT)
	$(LINK) $(md5sum_LDFLAGS) $(md5sum_OBJECTS) $(md5sum_LDADD) $(LIBS)
mkdir$(EXEEXT): $(mkdir_OBJECTS) $(mkdir_DEPENDENCIES) 
	@rm -f mkdir$(EXEEXT)
	$(LINK) $(mkdir_LDFLAGS) $(mkdir_OBJECTS) $(mkdir_LDADD) $(LIBS)
mkfifo$(EXEEXT): $(mkfifo_OBJECTS) $(mkfifo_DEPENDENCIES) 
	@rm -f mkfifo$(EXEEXT)
	$(LINK) $(mkfifo_LDFLAGS) $(mkfifo_OBJECTS) $(mkfifo_LDADD) $(LIBS)
mknod$(EXEEXT): $(mknod_OBJECTS) $(mknod_DEPENDENCIES) 
	@rm -f mknod$(EXEEXT)
	$(LINK) $(mknod_LDFLAGS) $(mknod_OBJECTS) $(mknod_LDADD) $(LIBS)
mv$(EXEEXT): $(mv_OBJECTS) $(mv_DEPENDENCIES) 
	@rm -f mv$(EXEEXT)
	$(LINK) $(mv_LDFLAGS) $(mv_OBJECTS) $(mv_LDADD) $(LIBS)
nice$(EXEEXT): $(nice_OBJECTS) $(nice_DEPENDENCIES) 
	@rm -f nice$(EXEEXT)
	$(LINK) $(nice_LDFLAGS) $(nice_OBJECTS) $(nice_LDADD) $(LIBS)
nl$(EXEEXT): $(nl_OBJECTS) $(nl_DEPENDENCIES) 
	@rm -f nl$(EXEEXT)
	$(LINK) $(nl_LDFLAGS) $(nl_OBJECTS) $(nl_LDADD) $(LIBS)
od$(EXEEXT): $(od_OBJECTS) $(od_DEPENDENCIES) 
	@rm -f od$(EXEEXT)
	$(LINK) $(od_LDFLAGS) $(od_OBJECTS) $(od_LDADD) $(LIBS)
paste$(EXEEXT): $(paste_OBJECTS) $(paste_DEPENDENCIES) 
	@rm -f paste$(EXEEXT)
	$(LINK) $(paste_LDFLAGS) $(paste_OBJECTS) $(paste_LDADD) $(LIBS)
pathchk$(EXEEXT): $(pathchk_OBJECTS) $(pathchk_DEPENDENCIES) 
	@rm -f pathchk$(EXEEXT)
	$(LINK) $(pathchk_LDFLAGS) $(pathchk_OBJECTS) $(pathchk_LDADD) $(LIBS)
pinky$(EXEEXT): $(pinky_OBJECTS) $(pinky_DEPENDENCIES) 
	@rm -f pinky$(EXEEXT)
	$(LINK) $(pinky_LDFLAGS) $(pinky_OBJECTS) $(pinky_LDADD) $(LIBS)
pr$(EXEEXT): $(pr_OBJECTS) $(pr_DEPENDENCIES) 
	@rm -f pr$(EXEEXT)
	$(LINK) $(pr_LDFLAGS) $(pr_OBJECTS) $(pr_LDADD) $(LIBS)
printenv$(EXEEXT): $(printenv_OBJECTS) $(printenv_DEPENDENCIES) 
	@rm -f printenv$(EXEEXT)
	$(LINK) $(printenv_LDFLAGS) $(printenv_OBJECTS) $(printenv_LDADD) $(LIBS)
printf$(EXEEXT): $(printf_OBJECTS) $(printf_DEPENDENCIES) 
	@rm -f printf$(EXEEXT)
	$(LINK) $(printf_LDFLAGS) $(printf_OBJECTS) $(printf_LDADD) $(LIBS)
ptx$(EXEEXT): $(ptx_OBJECTS) $(ptx_DEPENDENCIES) 
	@rm -f ptx$(EXEEXT)
	$(LINK) $(ptx_LDFLAGS) $(ptx_OBJECTS) $(ptx_LDADD) $(LIBS)
pwd$(EXEEXT): $(pwd_OBJECTS) $(pwd_DEPENDENCIES) 
	@rm -f pwd$(EXEEXT)
	$(LINK) $(pwd_LDFLAGS) $(pwd_OBJECTS) $(pwd_LDADD) $(LIBS)
readlink$(EXEEXT): $(readlink_OBJECTS) $(readlink_DEPENDENCIES) 
	@rm -f readlink$(EXEEXT)
	$(LINK) $(readlink_LDFLAGS) $(readlink_OBJECTS) $(readlink_LDADD) $(LIBS)
rm$(EXEEXT): $(rm_OBJECTS) $(rm_DEPENDENCIES) 
	@rm -f rm$(EXEEXT)
	$(LINK) $(rm_LDFLAGS) $(rm_OBJECTS) $(rm_LDADD) $(LIBS)
rmdir$(EXEEXT): $(rmdir_OBJECTS) $(rmdir_DEPENDENCIES) 
	@rm -f rmdir$(EXEEXT)
	$(LINK) $(rmdir_LDFLAGS) $(rmdir_OBJECTS) $(rmdir_LDADD) $(LIBS)
seq$(EXEEXT): $(seq_OBJECTS) $(seq_DEPENDENCIES) 
	@rm -f seq$(EXEEXT)
	$(LINK) $(seq_LDFLAGS) $(seq_OBJECTS) $(seq_LDADD) $(LIBS)
sha1sum$(EXEEXT): $(sha1sum_OBJECTS) $(sha1sum_DEPENDENCIES) 
	@rm -f sha1sum$(EXEEXT)
	$(LINK) $(sha1sum_LDFLAGS) $(sha1sum_OBJECTS) $(sha1sum_LDADD) $(LIBS)
shred$(EXEEXT): $(shred_OBJECTS) $(shred_DEPENDENCIES) 
	@rm -f shred$(EXEEXT)
	$(LINK) $(shred_LDFLAGS) $(shred_OBJECTS) $(shred_LDADD) $(LIBS)
sleep$(EXEEXT): $(sleep_OBJECTS) $(sleep_DEPENDENCIES) 
	@rm -f sleep$(EXEEXT)
	$(LINK) $(sleep_LDFLAGS) $(sleep_OBJECTS) $(sleep_LDADD) $(LIBS)
sort$(EXEEXT): $(sort_OBJECTS) $(sort_DEPENDENCIES) 
	@rm -f sort$(EXEEXT)
	$(LINK) $(sort_LDFLAGS) $(sort_OBJECTS) $(sort_LDADD) $(LIBS)
split$(EXEEXT): $(split_OBJECTS) $(split_DEPENDENCIES) 
	@rm -f split$(EXEEXT)
	$(LINK) $(split_LDFLAGS) $(split_OBJECTS) $(split_LDADD) $(LIBS)
stat$(EXEEXT): $(stat_OBJECTS) $(stat_DEPENDENCIES) 
	@rm -f stat$(EXEEXT)
	$(LINK) $(stat_LDFLAGS) $(stat_OBJECTS) $(stat_LDADD) $(LIBS)
stty$(EXEEXT): $(stty_OBJECTS) $(stty_DEPENDENCIES) 
	@rm -f stty$(EXEEXT)
	$(LINK) $(stty_LDFLAGS) $(stty_OBJECTS) $(stty_LDADD) $(LIBS)
su$(EXEEXT): $(su_OBJECTS) $(su_DEPENDENCIES) 
	@rm -f su$(EXEEXT)
	$(LINK) $(su_LDFLAGS) $(su_OBJECTS) $(su_LDADD) $(LIBS)
sum$(EXEEXT): $(sum_OBJECTS) $(sum_DEPENDENCIES) 
	@rm -f sum$(EXEEXT)
	$(LINK) $(sum_LDFLAGS) $(sum_OBJECTS) $(sum_LDADD) $(LIBS)
sync$(EXEEXT): $(sync_OBJECTS) $(sync_DEPENDENCIES) 
	@rm -f sync$(EXEEXT)
	$(LINK) $(sync_LDFLAGS) $(sync_OBJECTS) $(sync_LDADD) $(LIBS)
tac$(EXEEXT): $(tac_OBJECTS) $(tac_DEPENDENCIES) 
	@rm -f tac$(EXEEXT)
	$(LINK) $(tac_LDFLAGS) $(tac_OBJECTS) $(tac_LDADD) $(LIBS)
tail$(EXEEXT): $(tail_OBJECTS) $(tail_DEPENDENCIES) 
	@rm -f tail$(EXEEXT)
	$(LINK) $(tail_LDFLAGS) $(tail_OBJECTS) $(tail_LDADD) $(LIBS)
tee$(EXEEXT): $(tee_OBJECTS) $(tee_DEPENDENCIES) 
	@rm -f tee$(EXEEXT)
	$(LINK) $(tee_LDFLAGS) $(tee_OBJECTS) $(tee_LDADD) $(LIBS)
test$(EXEEXT): $(test_OBJECTS) $(test_DEPENDENCIES) 
	@rm -f test$(EXEEXT)
	$(LINK) $(test_LDFLAGS) $(test_OBJECTS) $(test_LDADD) $(LIBS)
touch$(EXEEXT): $(touch_OBJECTS) $(touch_DEPENDENCIES) 
	@rm -f touch$(EXEEXT)
	$(LINK) $(touch_LDFLAGS) $(touch_OBJECTS) $(touch_LDADD) $(LIBS)
tr$(EXEEXT): $(tr_OBJECTS) $(tr_DEPENDENCIES) 
	@rm -f tr$(EXEEXT)
	$(LINK) $(tr_LDFLAGS) $(tr_OBJECTS) $(tr_LDADD) $(LIBS)
true$(EXEEXT): $(true_OBJECTS) $(true_DEPENDENCIES) 
	@rm -f true$(EXEEXT)
	$(LINK) $(true_LDFLAGS) $(true_OBJECTS) $(true_LDADD) $(LIBS)
tsort$(EXEEXT): $(tsort_OBJECTS) $(tsort_DEPENDENCIES) 
	@rm -f tsort$(EXEEXT)
	$(LINK) $(tsort_LDFLAGS) $(tsort_OBJECTS) $(tsort_LDADD) $(LIBS)
tty$(EXEEXT): $(tty_OBJECTS) $(tty_DEPENDENCIES) 
	@rm -f tty$(EXEEXT)
	$(LINK) $(tty_LDFLAGS) $(tty_OBJECTS) $(tty_LDADD) $(LIBS)
uname$(EXEEXT): $(uname_OBJECTS) $(uname_DEPENDENCIES) 
	@rm -f uname$(EXEEXT)
	$(LINK) $(uname_LDFLAGS) $(uname_OBJECTS) $(uname_LDADD) $(LIBS)
unexpand$(EXEEXT): $(unexpand_OBJECTS) $(unexpand_DEPENDENCIES) 
	@rm -f unexpand$(EXEEXT)
	$(LINK) $(unexpand_LDFLAGS) $(unexpand_OBJECTS) $(unexpand_LDADD) $(LIBS)
uniq$(EXEEXT): $(uniq_OBJECTS) $(uniq_DEPENDENCIES) 
	@rm -f uniq$(EXEEXT)
	$(LINK) $(uniq_LDFLAGS) $(uniq_OBJECTS) $(uniq_LDADD) $(LIBS)
unlink$(EXEEXT): $(unlink_OBJECTS) $(unlink_DEPENDENCIES) 
	@rm -f unlink$(EXEEXT)
	$(LINK) $(unlink_LDFLAGS) $(unlink_OBJECTS) $(unlink_LDADD) $(LIBS)
uptime$(EXEEXT): $(uptime_OBJECTS) $(uptime_DEPENDENCIES) 
	@rm -f uptime$(EXEEXT)
	$(LINK) $(uptime_LDFLAGS) $(uptime_OBJECTS) $(uptime_LDADD) $(LIBS)
users$(EXEEXT): $(users_OBJECTS) $(users_DEPENDENCIES) 
	@rm -f users$(EXEEXT)
	$(LINK) $(users_LDFLAGS) $(users_OBJECTS) $(users_LDADD) $(LIBS)
vdir$(EXEEXT): $(vdir_OBJECTS) $(vdir_DEPENDENCIES) 
	@rm -f vdir$(EXEEXT)
	$(LINK) $(vdir_LDFLAGS) $(vdir_OBJECTS) $(vdir_LDADD) $(LIBS)
wc$(EXEEXT): $(wc_OBJECTS) $(wc_DEPENDENCIES) 
	@rm -f wc$(EXEEXT)
	$(LINK) $(wc_LDFLAGS) $(wc_OBJECTS) $(wc_LDADD) $(LIBS)
who$(EXEEXT): $(who_OBJECTS) $(who_DEPENDENCIES) 
	@rm -f who$(EXEEXT)
	$(LINK) $(who_LDFLAGS) $(who_OBJECTS) $(who_LDADD) $(LIBS)
whoami$(EXEEXT): $(whoami_OBJECTS) $(whoami_DEPENDENCIES) 
	@rm -f whoami$(EXEEXT)
	$(LINK) $(whoami_LDFLAGS) $(whoami_OBJECTS) $(whoami_LDADD) $(LIBS)
yes$(EXEEXT): $(yes_OBJECTS) $(yes_DEPENDENCIES) 
	@rm -f yes$(EXEEXT)
	$(LINK) $(yes_LDFLAGS) $(yes_OBJECTS) $(yes_LDADD) $(LIBS)
binSCRIPT_INSTALL = $(INSTALL_SCRIPT)
install-binSCRIPTS: $(bin_SCRIPTS)
	@$(NORMAL_INSTALL)
	$(mkinstalldirs) $(DESTDIR)$(bindir)
	@list='$(bin_SCRIPTS)'; for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  if test -f $$d$$p; then \
	    f=`echo "$$p" | sed 's|^.*/||;$(transform)'`; \
	    echo " $(binSCRIPT_INSTALL) $$d$$p $(DESTDIR)$(bindir)/$$f"; \
	    $(binSCRIPT_INSTALL) $$d$$p $(DESTDIR)$(bindir)/$$f; \
	  else :; fi; \
	done

uninstall-binSCRIPTS:
	@$(NORMAL_UNINSTALL)
	@list='$(bin_SCRIPTS)'; for p in $$list; do \
	  f=`echo "$$p" | sed 's|^.*/||;$(transform)'`; \
	  echo " rm -f $(DESTDIR)$(bindir)/$$f"; \
	  rm -f $(DESTDIR)$(bindir)/$$f; \
	done

installcheck-binSCRIPTS: $(bin_SCRIPTS)
	bad=0; pid=$$$$; list="$(bin_SCRIPTS)"; for p in $$list; do \
	  case ' $(AM_INSTALLCHECK_STD_OPTIONS_EXEMPT) ' in \
	   *" $$p "* | *" $(srcdir)/$$p "*) continue;; \
	  esac; \
	  f=`echo "$$p" | sed 's,^.*/,,;$(transform)'`; \
	  for opt in --help --version; do \
	    if $(DESTDIR)$(bindir)/$$f $$opt > c$${pid}_.out 2> c$${pid}_.err \
	         && test -n "`cat c$${pid}_.out`" \
	         && test -z "`cat c$${pid}_.err`"; then :; \
	    else echo "$$f does not support $$opt" 1>&2; bad=1; fi; \
	  done; \
	done; rm -f c$${pid}_.???; exit $$bad

mostlyclean-compile:
	-rm -f *.$(OBJEXT) core *.core

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/basename.Po
include ./$(DEPDIR)/cat.Po
include ./$(DEPDIR)/chgrp.Po
include ./$(DEPDIR)/chmod.Po
include ./$(DEPDIR)/chown-core.Po
include ./$(DEPDIR)/chown.Po
include ./$(DEPDIR)/chroot.Po
include ./$(DEPDIR)/cksum.Po
include ./$(DEPDIR)/comm.Po
include ./$(DEPDIR)/copy.Po
include ./$(DEPDIR)/cp-hash.Po
include ./$(DEPDIR)/cp.Po
include ./$(DEPDIR)/csplit.Po
include ./$(DEPDIR)/cut.Po
include ./$(DEPDIR)/date.Po
include ./$(DEPDIR)/dd.Po
include ./$(DEPDIR)/df.Po
include ./$(DEPDIR)/dircolors.Po
include ./$(DEPDIR)/dirname.Po
include ./$(DEPDIR)/du.Po
include ./$(DEPDIR)/echo.Po
include ./$(DEPDIR)/env.Po
include ./$(DEPDIR)/expand.Po
include ./$(DEPDIR)/expr.Po
include ./$(DEPDIR)/factor.Po
include ./$(DEPDIR)/false.Po
include ./$(DEPDIR)/fmt.Po
include ./$(DEPDIR)/fold.Po
include ./$(DEPDIR)/head.Po
include ./$(DEPDIR)/hostid.Po
include ./$(DEPDIR)/hostname.Po
include ./$(DEPDIR)/id.Po
include ./$(DEPDIR)/install.Po
include ./$(DEPDIR)/join.Po
include ./$(DEPDIR)/kill.Po
include ./$(DEPDIR)/link.Po
include ./$(DEPDIR)/ln.Po
include ./$(DEPDIR)/logname.Po
include ./$(DEPDIR)/ls-dir.Po
include ./$(DEPDIR)/ls-ls.Po
include ./$(DEPDIR)/ls-vdir.Po
include ./$(DEPDIR)/ls.Po
include ./$(DEPDIR)/md5.Po
include ./$(DEPDIR)/md5sum.Po
include ./$(DEPDIR)/mkdir.Po
include ./$(DEPDIR)/mkfifo.Po
include ./$(DEPDIR)/mknod.Po
include ./$(DEPDIR)/mv.Po
include ./$(DEPDIR)/nice.Po
include ./$(DEPDIR)/nl.Po
include ./$(DEPDIR)/od.Po
include ./$(DEPDIR)/paste.Po
include ./$(DEPDIR)/pathchk.Po
include ./$(DEPDIR)/pinky.Po
include ./$(DEPDIR)/pr.Po
include ./$(DEPDIR)/printenv.Po
include ./$(DEPDIR)/printf.Po
include ./$(DEPDIR)/ptx.Po
include ./$(DEPDIR)/pwd.Po
include ./$(DEPDIR)/readlink.Po
include ./$(DEPDIR)/remove.Po
include ./$(DEPDIR)/rm.Po
include ./$(DEPDIR)/rmdir.Po
include ./$(DEPDIR)/seq.Po
include ./$(DEPDIR)/sha1sum.Po
include ./$(DEPDIR)/shred.Po
include ./$(DEPDIR)/sleep.Po
include ./$(DEPDIR)/sort.Po
include ./$(DEPDIR)/split.Po
include ./$(DEPDIR)/stat.Po
include ./$(DEPDIR)/stty.Po
include ./$(DEPDIR)/su.Po
include ./$(DEPDIR)/sum.Po
include ./$(DEPDIR)/sync.Po
include ./$(DEPDIR)/tac.Po
include ./$(DEPDIR)/tail.Po
include ./$(DEPDIR)/tee.Po
include ./$(DEPDIR)/test.Po
include ./$(DEPDIR)/touch.Po
include ./$(DEPDIR)/tr.Po
include ./$(DEPDIR)/true.Po
include ./$(DEPDIR)/tsort.Po
include ./$(DEPDIR)/tty.Po
include ./$(DEPDIR)/uname.Po
include ./$(DEPDIR)/unexpand.Po
include ./$(DEPDIR)/uniq.Po
include ./$(DEPDIR)/unlink.Po
include ./$(DEPDIR)/uptime.Po
include ./$(DEPDIR)/users.Po
include ./$(DEPDIR)/wc.Po
include ./$(DEPDIR)/who.Po
include ./$(DEPDIR)/whoami.Po
include ./$(DEPDIR)/yes.Po

distclean-depend:
	-rm -rf ./$(DEPDIR)

.c.o:
#	if $(COMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" \
#	  -c -o $@ `test -f '$<' || echo '$(srcdir)/'`$<; \
#	then mv "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; \
#	else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; \
#	fi
	source='$<' object='$@' libtool=no \
	depfile='$(DEPDIR)/$*.Po' tmpdepfile='$(DEPDIR)/$*.TPo' \
	$(CCDEPMODE) $(depcomp) \
	$(COMPILE) -c `test -f '$<' || echo '$(srcdir)/'`$<

.c.obj:
#	if $(COMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" \
#	  -c -o $@ `if test -f '$<'; then $(CYGPATH_W) '$<'; else $(CYGPATH_W) '$(srcdir)/$<'; fi`; \
#	then mv "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; \
#	else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; \
#	fi
	source='$<' object='$@' libtool=no \
	depfile='$(DEPDIR)/$*.Po' tmpdepfile='$(DEPDIR)/$*.TPo' \
	$(CCDEPMODE) $(depcomp) \
	$(COMPILE) -c `if test -f '$<'; then $(CYGPATH_W) '$<'; else $(CYGPATH_W) '$(srcdir)/$<'; fi`
uninstall-info-am:

ETAGS = etags
ETAGSFLAGS =

CTAGS = ctags
CTAGSFLAGS =

tags: TAGS

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	mkid -fID $$unique

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(ETAGS_ARGS)$$tags$$unique" \
	  || $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	     $$tags $$unique

ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(CTAGS_ARGS)$$tags$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$tags $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && cd $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) $$here

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)

top_distdir = ..
distdir = $(top_distdir)/$(PACKAGE)-$(VERSION)

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's|.|.|g'`; \
	list='$(DISTFILES)'; for file in $$list; do \
	  case $$file in \
	    $(srcdir)/*) file=`echo "$$file" | sed "s|^$$srcdirstrip/||"`;; \
	    $(top_srcdir)/*) file=`echo "$$file" | sed "s|^$$topsrcdirstrip/|$(top_builddir)/|"`;; \
	  esac; \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  dir=`echo "$$file" | sed -e 's,/[^/]*$$,,'`; \
	  if test "$$dir" != "$$file" && test "$$dir" != "."; then \
	    dir="/$$dir"; \
	    $(mkinstalldirs) "$(distdir)$$dir"; \
	  else \
	    dir=''; \
	  fi; \
	  if test -d $$d/$$file; then \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \
	    fi; \
	    cp -pR $$d/$$file $(distdir)$$dir || exit 1; \
	  else \
	    test -f $(distdir)/$$file \
	    || cp -p $$d/$$file $(distdir)/$$file \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: $(BUILT_SOURCES)
	$(MAKE) $(AM_MAKEFLAGS) check-am
all-am: Makefile $(PROGRAMS) $(SCRIPTS) $(HEADERS) all-local

installdirs:
	$(mkinstalldirs) $(DESTDIR)$(bindir) $(DESTDIR)$(bindir)

install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:
	-test -z "$(CLEANFILES)" || rm -f $(CLEANFILES)

distclean-generic:
	-rm -f Makefile $(CONFIG_CLEAN_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
	-test -z "$(MAINTAINERCLEANFILES)" || rm -f $(MAINTAINERCLEANFILES)
	-test -z "$(BUILT_SOURCES)" || rm -f $(BUILT_SOURCES)
clean: clean-am

clean-am: clean-binPROGRAMS clean-generic mostlyclean-am

distclean: distclean-am

distclean-am: clean-am distclean-compile distclean-depend \
	distclean-generic distclean-tags

dvi: dvi-am

dvi-am:

info: info-am

info-am:

install-data-am:

install-exec-am: install-binPROGRAMS install-binSCRIPTS \
	install-exec-local

install-info: install-info-am

install-man:

installcheck-am: installcheck-binPROGRAMS installcheck-binSCRIPTS

maintainer-clean: maintainer-clean-am

maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-binPROGRAMS uninstall-binSCRIPTS \
	uninstall-info-am uninstall-local

.PHONY: CTAGS GTAGS all all-am all-local check check-am clean \
	clean-binPROGRAMS clean-generic ctags distclean \
	distclean-compile distclean-depend distclean-generic \
	distclean-tags distdir dvi dvi-am info info-am install \
	install-am install-binPROGRAMS install-binSCRIPTS install-data \
	install-data-am install-exec install-exec-am install-exec-local \
	install-info install-info-am install-man install-strip \
	installcheck installcheck-am installcheck-binPROGRAMS \
	installcheck-binSCRIPTS installdirs maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-compile \
	mostlyclean-generic pdf pdf-am ps ps-am tags uninstall \
	uninstall-am uninstall-binPROGRAMS uninstall-binSCRIPTS \
	uninstall-info-am uninstall-local


$(PROGRAMS): ../lib/libfetish.a

$(SCRIPTS): Makefile

.sh:
	rm -f $@ $@-t
	sed \
	  -e 's!@''bindir''@!$(bindir)!' \
	  -e 's/@''GNU_PACKAGE''@/GNU coreutils/' \
	  -e 's/@''PACKAGE_BUGREPORT''@/bug-coreutils@gnu.org/' \
	  -e 's/@''VERSION''@/5.0/' $< > $@-t
	chmod +x $@-t
	mv $@-t $@

all-local: su$(EXEEXT)

install-root: su$(EXEEXT)
	@$(INSTALL_SU)

install-exec-local: su$(EXEEXT)
	@TMPFILE=$(DESTDIR)$(bindir)/.su-$$$$; \
	rm -f $$TMPFILE; \
	echo > $$TMPFILE; \
	can_create_suid_root_executable=no; \
	chown root $$TMPFILE > /dev/null 2>&1 \
	  && chmod $(setuid_root_mode) $$TMPFILE > /dev/null 2>&1 \
	  && can_create_suid_root_executable=yes; \
	rm -f $$TMPFILE; \
	if test $$can_create_suid_root_executable = yes; then \
	  $(INSTALL_SU); \
	else \
	  echo "WARNING: insufficient access; not installing su"; \
	  echo "NOTE: to install su, run 'make install-root' as root"; \
	fi

uninstall-local:
# Remove su only if it's one we installed.
	@if grep 'GNU coreutils' $(installed_su) > /dev/null 2>&1; then \
	  echo "  rm -f $(installed_su)"; \
	  rm -f $(installed_su); \
	else :; fi

dircolors.h: dcgen dircolors.hin
	$(PERL) -w -- $(srcdir)/dcgen $(srcdir)/dircolors.hin > $@-t
	mv $@-t $@

wheel-size.h: Makefile.am
	echo '#define WHEEL_SIZE $(wheel_size)' > $@-t
	mv $@-t $@

wheel.h: wheel-gen.pl Makefile.am
	$(srcdir)/wheel-gen.pl $(wheel_size) \
	  > $@-t
	mv $@-t $@

false.c: true.c
	rm -f $@
	sed \
	  -e s/true/false/g \
	  -e s/success/failure/g \
	  -e 's/(EXIT_SUCCESS)/(EXIT_FAILURE)/g' \
	  $(srcdir)/true.c > $@-t
	chmod a-w $@-t
	mv $@-t $@
# Ensure that the list of programs in README matches the list
# of programs we can build.
check: check-README check-misc
.PHONY: check-README
check-README:
	rm -rf $(pr) $(pm)
	echo $(all_programs) \
	  | tr -s ' ' '\n' | sort -u > $(pm)
	sed -n '/^The programs .* are:/,/^[a-zA-Z]/p' $(top_srcdir)/README \
	  | sed -n '/^   */s///p' | tr -s ' ' '\n' > $(pr)
	diff $(pm) $(pr) && rm -rf $(pr) $(pm)

# Make sure we don't define any S_IS* macros in src/*.c files.
# Not a big deal, but they're already defined via system.h.
#
# Also make sure we don't use st_blocks.  Use ST_NBLOCKS instead.
# This is a bit of a kludge, since it prevents use of the string
# even in comments, but for now it does the job with no false positives.
.PHONY: check-misc
check-misc:
	cd $(srcdir); grep '^# *define  *S_IS' $(SOURCES) && exit 1 || :
	cd $(srcdir); grep st_blocks $(SOURCES) && exit 1 || :
	cd $(srcdir); grep '^# *define .*defined' $(SOURCES) && exit 1 || :
# FIXME: handle *.sh;  and use $(all_programs), not $(SOURCES)
../AUTHORS: $(SOURCES)
	rm -f $@-t
	(						\
	  set -e;					\
	  echo "Here are the names of the programs in this package,";	\
	  echo "each followed by the name(s) of its author(s).";	\
	  echo;						\
	  for i in $(SOURCES); do			\
	    a=`sed -n $(s1) $$i`;			\
	    test "$$a" && :				\
	      || a=`sed -n $(s2) $$i`;			\
	    if test "$$a"; then				\
	      prog=`echo $$i|sed 's/\.c$$//'`;		\
	      echo "$$prog: $$a";			\
	    fi;						\
	  done | sort -u ) > $@-t
	chmod a-w $@-t
	mv $@-t $@
# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
