SubDir OBOS_TOP src kernel ;

KernelLd boot_loader :
	boot_platform_$(OBOS_BOOT_PLATFORM).o
	boot_loader.a
	boot_partitions.a

	# file systems
	boot_bfs.a
	boot_amiga_ffs.a

	# libroot functions needed by the stage2 boot loader
	<$(SOURCE_GRIST)!libroot!os!arch!$(OBOS_ARCH)>byteorder.o
	<$(SOURCE_GRIST)!libroot>ctype.o
	<$(SOURCE_GRIST)!libroot>kernel_vsprintf.o
	<$(SOURCE_GRIST)!libroot!posix!string>memset.o
	<$(SOURCE_GRIST)!libroot!posix!string>memcmp.o
	<$(SOURCE_GRIST)!libroot!posix!string>memcpy.o
	<$(SOURCE_GRIST)!libroot!posix!string>memmove.o
	<$(SOURCE_GRIST)!libroot!posix!string>strdup.o
	<$(SOURCE_GRIST)!libroot!posix!string>strlen.o
	<$(SOURCE_GRIST)!libroot!posix!string>strnlen.o
	<$(SOURCE_GRIST)!libroot!posix!string>strcmp.o
	<$(SOURCE_GRIST)!libroot!posix!string>strcasecmp.o
	<$(SOURCE_GRIST)!libroot!posix!string>strncmp.o
	<$(SOURCE_GRIST)!libroot!posix!string>strcat.o
	<$(SOURCE_GRIST)!libroot!posix!string>strcpy.o
	<$(SOURCE_GRIST)!libroot!posix!string>strlcat.o
	<$(SOURCE_GRIST)!libroot!posix!string>strlcpy.o
	<$(SOURCE_GRIST)!libroot!posix!string>strchr.o
	<$(SOURCE_GRIST)!libroot!posix!string>strrchr.o
	<$(SOURCE_GRIST)!libroot!posix!stdlib>strtol.o
	<$(SOURCE_GRIST)!libroot>qsort.o
	: $(SUBDIR)/ldscripts/$(OBOS_ARCH)/boot_loader.ld 
	: -Bstatic
	;

KernelLd stage2 :
	boot_arch_stage2.o

	# posix functions needed by the stage2 boot loader
	<$(SOURCE_GRIST)!libroot>ctype.o
	<$(SOURCE_GRIST)!libroot>kernel_vsprintf.o
	<$(SOURCE_GRIST)!libroot!posix!string>memset.o
	<$(SOURCE_GRIST)!libroot!posix!string>memcpy.o
	<$(SOURCE_GRIST)!libroot!posix!string>strnlen.o
	: $(SUBDIR)/ldscripts/$(OBOS_ARCH)/stage2.ld 
	: -dN
	:
	: bootstrap
	;

KernelLd kernel :
	kernel_core.o
	kernel_fs.o
	kernel_vm.o
	kernel_cache.o
	kernel_device_manager.o
	kernel_disk_device_manager.o
	kernel_util.o
	kernel_messaging.o
	kernel_debug.o

	lib$(OBOS_ARCH).a

	linkhack.so

	# kernel libroot parts
	kernel_os_main.o
	kernel_os_arch_$(OBOS_ARCH).o
	kernel_posix.o

	: $(SUBDIR)/ldscripts/$(OBOS_ARCH)/kernel.ld 
	: -Bdynamic -export-dynamic -dynamic-linker /foo/bar
	:
	: kernel
	;
LINKLIBS on kernel += $(KERNEL_C++_SUPPORT_LIBS) ;

KernelLd kernel.so :
	kernel_core.o
	kernel_fs.o
	kernel_vm.o
	kernel_cache.o
	kernel_device_manager.o
	kernel_disk_device_manager.o
	kernel_util.o
	kernel_messaging.o
	kernel_debug.o

	lib$(OBOS_ARCH).a

	linkhack.so

	# kernel libroot parts
	kernel_os_main.o
	kernel_os_arch_$(OBOS_ARCH).o
	kernel_posix.o

	: $(SUBDIR)/ldscripts/$(OBOS_ARCH)/kernel.ld 
	: -Bdynamic -shared -export-dynamic -dynamic-linker /foo/bar
	;
LINKLIBS on kernel.so += $(KERNEL_C++_SUPPORT_LIBS) ;

# ToDo: this is outdated; instead, the standard Be mechanism should be used
KernelLd libglue.o :	# libglue.o is used for dynamic libraries
	<$(SOURCE_GRIST)!glue!arch!$(OBOS_ARCH)>crti.o
	$(LIBGCC_DIR)/crtbegin.o

	$(LIBGCC_DIR)/crtend.o
	<$(SOURCE_GRIST)!glue!arch!$(OBOS_ARCH)>crtn.o

	<$(SOURCE_GRIST)!glue>init_term_dyn.o
	:
	: -r
	: no_gcc
	;

UnarchiveObjects $(LIBGCC_OBJECTS) : $(LIBGCC_DIR)/libgcc.a ;
	# we need to link against libgcc.a objects and make
	# it available to other applications as in BeOS

# ToDo: Rewrite as SharedLibrary
KernelLd libroot.so :
	<$(SOURCE_GRIST)!glue!arch!$(OBOS_ARCH)>crti.o
	$(LIBGCC_DIR)/crtbegin.o

	<$(SOURCE_GRIST)!glue>init_term_dyn.o

	$(LIBGCC_OBJECTS)
	<$(SOURCE_GRIST)!libroot>libroot_init.o

	os_main.o
	os_arch_$(OBOS_ARCH).o

	posix_arch_$(OBOS_ARCH).o
	posix_locale.o
	posix_main.o
	posix_malloc.o
	posix_math.o
	posix_math_arch_$(OBOS_ARCH).o
	posix_pthread.o
	posix_signal.o
	posix_stdio.o
	posix_gnu_arch_$(OBOS_ARCH).o
	posix_gnu_ctype.o
	posix_gnu_ext.o
	posix_gnu_libio.o
	posix_gnu_locale.o
	posix_gnu_regex.o
	posix_gnu_stdio.o
	posix_gnu_stdlib.o
	posix_gnu_wcsmbs.o
	posix_stdlib.o
	posix_string.o
	posix_sys.o
	posix_time.o
	posix_unistd.o

	$(LIBGCC_DIR)/crtend.o
	<$(SOURCE_GRIST)!glue!arch!$(OBOS_ARCH)>crtn.o

	: $(SUBDIR)/ldscripts/$(OBOS_ARCH)/library.ld
	: -shared -soname libroot.so -Bdynamic -export-dynamic
	: no_gcc
	: beos/system/lib/libroot.so
	;

KernelLd libglue2.o :	# libglue2.o is used for executables
	libglue.o
	<$(SOURCE_GRIST)!glue>start_dyn.o
	:
	: -r
	: no_gcc
	;

KernelLd init :
	libglue2.o
	<$(SOURCE_GRIST)!apps>init.o
	libroot.so
	: $(SUBDIR)/ldscripts/$(OBOS_ARCH)/app.ld
	:
	:
	: beos/bin/init
	;

KernelLd kernel_false :
	libglue2.o
	<$(SOURCE_GRIST)!apps>false_main.o
	libroot.so
	: $(SUBDIR)/ldscripts/$(OBOS_ARCH)/app.ld
	:
	:
	: beos/bin/false
	;

KernelLd kernel_true :
	libglue2.o
	<$(SOURCE_GRIST)!apps>true_main.o
	libroot.so
	: $(SUBDIR)/ldscripts/$(OBOS_ARCH)/app.ld
	:
	:
	: beos/bin/true
	;

KernelLd fibo :
	libglue2.o
	<$(SOURCE_GRIST)!apps>fibo_main.o
	libroot.so
	: $(SUBDIR)/ldscripts/$(OBOS_ARCH)/app.ld
	:
	:
	: beos/bin/fibo
	;

KernelLd sig_test :
	libglue2.o
	<$(SOURCE_GRIST)!apps>sig_test.o
	libroot.so
	: $(SUBDIR)/ldscripts/$(OBOS_ARCH)/app.ld
	:
	:
	: beos/bin/sig_test
	;

KernelLd monitor_test :
	libglue2.o
	<$(SOURCE_GRIST)!apps>monitor_test.o
	libroot.so
	: $(SUBDIR)/ldscripts/$(OBOS_ARCH)/app.ld
	:
	:
	: beos/bin/monitor_test
	;

KernelLd kernel_fortune :
	libglue2.o
	<$(SOURCE_GRIST)!apps!fortune>main.o
	libroot.so
	: $(SUBDIR)/ldscripts/$(OBOS_ARCH)/app.ld
	:
	:
	: beos/bin/fortune
	;

KernelConfigSection beos/etc/fortunes : data : $(SUBDIR)/apps/fortune/fortunes ;

KernelLd kernel_ls :
	libglue2.o
	<$(SOURCE_GRIST)!apps!ls>main.o
	libroot.so
	: $(SUBDIR)/ldscripts/$(OBOS_ARCH)/app.ld
	:
	:
	: beos/bin/ls
	;

KernelLd symlink :
	libglue2.o
	<$(SOURCE_GRIST)!apps!symlink>main.o
	libroot.so
	: $(SUBDIR)/ldscripts/$(OBOS_ARCH)/app.ld
	:
	:
	: beos/bin/symlink
	;

KernelLd <bootfloppy>consoled :
	libglue2.o
	<$(SOURCE_GRIST)!apps!consoled>consoled.o
	libroot.so
	: $(SUBDIR)/ldscripts/$(OBOS_ARCH)/app.ld
	:
	:
	: beos/bin/consoled
	;

# Note: shell is a built in target, thus we need the grist.
KernelLd obos_shell :
	libglue2.o
	<$(SOURCE_GRIST)!apps!shell>main.o
	<$(SOURCE_GRIST)!apps!shell>args.o
	<$(SOURCE_GRIST)!apps!shell>commands.o
	<$(SOURCE_GRIST)!apps!shell>file_utils.o
	<$(SOURCE_GRIST)!apps!shell>parse.o
	<$(SOURCE_GRIST)!apps!shell>script.o
	<$(SOURCE_GRIST)!apps!shell>shell_vars.o
	<$(SOURCE_GRIST)!apps!shell>statements.o
	<$(SOURCE_GRIST)!apps!shell>shell_history.o
	libroot.so
	: $(SUBDIR)/ldscripts/$(OBOS_ARCH)/app.ld
	:
	:
	: beos/bin/sh
	;

KernelLd testapp :
	libglue2.o
	<$(SOURCE_GRIST)!apps!testapp>main.o
	libroot.so
	: $(SUBDIR)/ldscripts/$(OBOS_ARCH)/app.ld
	:
	:
	: beos/bin/testapp
	;

KernelLd tls_test :
	libglue2.o
	<$(SOURCE_GRIST)!apps>tls_test.o
	libroot.so
	: $(SUBDIR)/ldscripts/$(OBOS_ARCH)/app.ld
	:
	:
	: beos/bin/tls_test
	;

KernelLd pipe_test :
	libglue2.o
	<$(SOURCE_GRIST)!apps>pipe_test.o
	libroot.so
	: $(SUBDIR)/ldscripts/$(OBOS_ARCH)/app.ld
	:
	:
	: beos/bin/pipe_test
	;

KernelLd fork_test :
	libglue2.o
	<$(SOURCE_GRIST)!apps>fork_test.o
	libroot.so
	: $(SUBDIR)/ldscripts/$(OBOS_ARCH)/app.ld
	:
	:
	: beos/bin/fork_test
	;

KernelConfigSection drivers/dev/tty
	: elf32
	: $(OBOS_TOP)/distro/$(OBOS_ARCH).R1/beos/system/add-ons/kernel/drivers/dev/tty
	;

KernelConfigSection drivers/dev/console
	: elf32
	: $(OBOS_TOP)/distro/$(OBOS_ARCH).R1/beos/system/add-ons/kernel/drivers/dev/console
	;

KernelConfigSection addons/kernel/console/vga_text
	: elf32
	: $(OBOS_TOP)/distro/$(OBOS_ARCH).R1/beos/system/add-ons/kernel/console/vga_text
	;

KernelLd kernel_ps :
	libglue2.o
	<$(SOURCE_GRIST)!apps!ps>main.o
	libroot.so
	: $(SUBDIR)/ldscripts/$(OBOS_ARCH)/app.ld
	:
	:
	: beos/bin/ps
	; 

KernelLd kernel_echo :
	libglue2.o
	<$(SOURCE_GRIST)!apps!echo>main.o
	libroot.so
	: $(SUBDIR)/ldscripts/$(OBOS_ARCH)/app.ld
	:
	:
	: beos/bin/echo
	; 

KernelLd kernel_uname :
	libglue2.o
	<$(SOURCE_GRIST)!apps!uname>main.o
	libroot.so
	: $(SUBDIR)/ldscripts/$(OBOS_ARCH)/app.ld
	:
	:
	: beos/bin/uname
	;

WriteKernelConfig $(OBOS_KERNEL_CONFIG) ;

BuildKernel $(OBOS_KERNEL) : $(OBOS_KERNEL_CONFIG) ;

KernelFloppyImage $(OBOS_FLOPPY) : $(OBOS_KERNEL) : $(SUBDIR)/boot/arch/$(OBOS_ARCH)/bootblock.bin ;

Depends kernel.so : kernel ;
	# kernel.so will be rebuilt with the kernel

Depends $(OBOS_FLOPPY) : tty ;
Depends $(OBOS_FLOPPY) : console ;
Depends $(OBOS_FLOPPY) : vga_text ;

Depends boot_floppy : $(OBOS_FLOPPY) ;
NotFile boot_floppy ;
Depends bootfloppy : $(OBOS_FLOPPY) ;
NotFile bootfloppy ;

SubInclude OBOS_TOP src kernel apps ;
SubInclude OBOS_TOP src kernel boot ;
SubInclude OBOS_TOP src kernel core ;
SubInclude OBOS_TOP src kernel glue ;
SubInclude OBOS_TOP src kernel libroot ;
SubInclude OBOS_TOP src kernel runtime_loader ;
