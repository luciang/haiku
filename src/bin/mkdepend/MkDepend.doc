$Id: MkDepend.doc 1.10 Wed, 01 Mar 2000 21:15:40 -0700 lars $

                                 MkDepend 1.7

                     Copyright (c) 1995-2001 by Lars DÃ¼ning
                             All Rights Reserved.


    "Good information are hard to get. It is even more difficult to put
     it into use."                                   -- Sherlock Holmes


Introduction
------------
  Makefiles are very useful in the development of larger program systems,
  as they notate the various dependencies and associated needed actions
  in a machine-useable notation. Unfortunately it's the most important
  dependency between C sources and their includes which have to be
  maintained by hand, a most boring and errorprone task.

  MkDepend is one of those programs which attempt to automate this part
  of development by scanning source files for includes and repeating this
  step recursively until the complete transitive closure of included files
  is determined. The found dependencies are then written into an existing
  makefile, keeping it up to date, and/or into a separate file (the 'depfile')
  for use by the makefile or for documentary purposes.

  The advantage of using MkDepend instead of the built-in dependency
  facilities of modern compilers is that (a) MkDepend is faster,
  (b) simplifies the maintenance of multiple and/or portable Makefiles,
  and (c) you can modify it for your special needs.


Usage
-----
  MkDepend is a shell-only program, compiled for R4.5


  mkdepend  {-i|-I|--include <includepath>[::<symbol>]}
            {-x|--except  <filepattern>}
            {-S|--select  <filepattern>}
            {-s|--suffix  <src_ext>{,<src_ext>}[+][:<obj_ext>] | [+]:<obj_ext>}
            {-p|--objpat  <src_ext>{,<src_ext>}[+]:<obj_pattern>}
            [-f|--file    <makefile>]
            [-d|--dep     <depfile>]
            [-l|--flat]
            [-m|--ignore-missing]
            [-w|--no-warn-exit]
            [-v|--verbose]
            [-h|-?|--help|--longhelp]
            [-V|--version]
            {<filename>}


    All option keywords are case sensitive. The space between the short
    form of the keywords and their operands may be omitted. For example

      mkdepend -I/include
      mkdepend -i /include
      mkdepend -I=/include
      mkdepend --include=/include
      mkdepend --include /include

    are all equivalent. Several short options may be combined, but only
    one of them may take an argument, and it must be the last one. For
    example:

      mkdepend -vl
      mkdepend -vf Makefile

    are legal, but

      mkdepend -fv Makefile

    will be misunderstood as 'mkdepend -f=v Makefile'.

    The option '--' is special in that it marks the end of all option
    recognition. All following arguments are considered filenames even
    if they start with '-' or '--'.


General Operation
-----------------

  MkDepend is given a 'skeleton' of C source files and searches them for
  included files. The includes found are recursively searched for includes
  themselves, until the complete transitive closure has been determined.
  MkDepend searches the includes first in the current directory, then in
  the given paths (if any), imitating the C preprocessor's behaviour.
  The files are scanned for include statements of the form

    #include "filename"
    #include <filename>

  excluding those which are commented out using C-style /* */- or
  C++-style //-comments. Every other content of the files is ignored.

  After all includes have been found, the dependencies are written into
  a makefile (creating it if necessary). The makefile is searched for
  a line

    # --- DO NOT MODIFY THIS LINE -- AUTO-DEPENDS FOLLOW ---

  after which MkDepend adds the dependencies, overwriting old ones, then
  terminating the dependencies with the line

    # --- DO NOT MODIFY THIS LINE -- AUTO-DEPENDS PRECEDE ---

  Text following the second tagline in the makefile is not modified.

  If the first tagline is not found, the tagged dependencies are simply
  appended to the file. Existing makefiles are modified by renaming it
  to <origname>.bak and then re-creating the makefile by copying the
  data not to be modified.

  The found dependencies for the 'skeleton' files are written as

    <skeleton> : <included file 1> <included file 2>...

  Lines are limited to 80 chars, longer entries are folded into several
  lines, ending each but the last line with a backslash (\). If a
  name contains spaces, it is written within double quotes.

  MkDepend can be taught to know about source/object file relationships
  to be used in the entries written. E,g, the entry generated for a typical
  C source file would be of the form

    <skeleton>.o : <include 1> <include 2> ...

  Includes appear with that path in the list under which MkDepend found
  them. To support multi-platform development, replacement texts may
  be specified for the paths which are then used instead in the output.


  For documentary purposes MkDepend may additionally (or instead) write
  the dependencies into a separate file, either as flat lists or in
  tree form. Here it writes the 'a includes b' relationships in the
  form "a <- b" as well as the 'b is included by a' relationsships
  in the form "b -> a".


Selected-File Operation
-----------------------

  MkDepend can be instructed just look for dependencies involving
  some selected include files. This mode is activated by the use
  of one or more '-S' arguments; and the output in this mode is
  restricted to just the skeleton and the selected file.

  For example, where a normal MkDepend run would generate

    foobar.o : foobar.h yacc.tab.h main.h

  call MkDepend with the argument '-S yacc.tab.h' would reduce this output
  to

    foobar.o : yacc.tab.h

  In the Makefile, these selected dependencies are put between

    # --- DO NOT MODIFY THIS LINE -- SELECTED AUTO-DEPENDS FOLLOW ---
    # --- DO NOT MODIFY THIS LINE -- SELECTED AUTO-DEPENDS PRECEDE ---

  delimiter lines, so that both kinds of operations can be used on the
  same Makefile.


  In addition, the output of the other dependency files is modified in
  a similar way.


Arguments
---------

  <filepattern>

    Any command argument not recognizable as option is considered as
    specification of one of the 'skeleton' sources.
    Wildcards are recognized.

    Default: *.c

    Example:

      mkdepend *.c *.cc grammar.y

        All files ending in ".c" or ".cc" and the file "grammar.y"
        are considered.

      The expansion of the wildcards is done by the shell.

   ------

  -x       <filepattern>
  --except <filepattern>

    Files which are not part of the 'skeleton', even if they are specified
    as such. The filepattern may contain the typical bash-wildcards, which
    are expanded by MkDepend.

    Example:

      mkdepend *.c -x 'test*'

        All files ending in ".c", except those whose name start with "test",
        are considered as sources. Note the quotes around "test*" to protect
        it from shell name expansion.

   ------

  -S       <filepattern>
  --select <filepattern>

    The output of dependency information is restricted to just those
    'skeleton' source which include at least one of the <filepattern> files.
    Furthermore, only the named files are printed in the dependency lists.

    The filepattern may contain the typical bash-wildcards, which are
    expanded by MkDepend _against the files existing at the time of
    program start_. The pattern has to match the full filename
    of the included file, including the directory part implicitely given
    by any -I argument.

    Example:

      mkdepend *.c -S 'yacc.tab.h'

        Only the files which include "yacc.tab.h" will be listed in the
        output.

   ------

  -I        <includedir>[::<symbol>]}
  --include <includedir>[::<symbol>]}

     Specify a directory to be searched for include files. The paths are
     searched in the order given on the command line. Unless '-I-' was
     specified, the directory the including file is in is searched first.

     If <symbol> is specified, it replaces the <includedir> when writing
     dependencies to a makefile.

     Usually, the path, made up from all given <includedir>s, is searched
     fully for both ""- and <>-includes. This behaviour changes if the
     path is split using the special dirname '-' (like in '-I-').

     If '-I-' is used, all directories given before the '-I-' are searched
     only for ""-includes. The directories given after the '-I-' are
     searched for both ""- and <>-includes again. Also the directories of
     the including files are no longer searched automatically.

     If a ""-include is not found, MkDepend will print a warning, but
     still list the file in the generated dependencies. Missing <>-includes
     on the other hand are silently ignored.

     Example:

       mkdepend -I /include -I- -I libglob

         ""-include files are searched in the current directory, in /include
         and in libglob. <>-include files are searched only in the
         current directory and libglob.

       mkdepend -I '/include/pdlibs::$(PDLIBS)'

         Include files are searched in the current directory and
         in /include/pdlibs. A file like "/include/pdlibs/tree.h" will be
         written as "$(PDLIBS)tree.h" into the makefile.
         Again note the use of quotes to keep the shell from expanding
         the text '$(PDLIBS)'.

     Note that the syntax of this option is similar, but not identical to
     what most compilers expect. One example of an exception is the GNU
     C-Compiler which distinguishes between '-I' and '-i' in meaning. It is
     therefore advisable to only use the uppercase '-I' for both compiler
     and MkDepend.

   ------

  -s       <src_ext>{,<src_ext>}[+][:<obj_ext>] | [+]:<obj_ext>}
  --suffix <src_ext>{,<src_ext>}[+][:<obj_ext>] | [+]:<obj_ext>}

    Specify a name relationship between source and object files.
    If a source name ends in one of the given <src_ext>s, an Makefile entry
    with the object name constructed using the associated <obj_ext>.
    The <obj_ext> given with no associated <src_ext> serves as default
    extension used for those <src_ext> which are given without own
    <obj_ext>.
    When constructing the dependency list for a defined source/object
    relation, the sourcefile itself is not included in the list, as
    usually implicit makerules take care of them. This can be overridden
    by specifying the '+' sign (which is associated with the given source
    extensions).

    Default: -s :.o -s .c,.cc,.cpp,.cp,.cxx

    Example:

      mkdepend -s :.o -s '.c,.cc'

        Default <obj_ext> is ".obj", which is used for files with the
        extensions ".c" and ".cc".

   ------

  -p       <src_ext>{,<src_ext>}[+]:<obj_pattern>
  --objpat <src_ext>{,<src_ext>}[+]:<obj_pattern>

    Similar to SUFFIX, but allows more complicated name relations.
    <obj_pattern> gives the object file name verbatim, using placeholders
    for the actual filenames:

      %s: the full sourcename (w/o suffix)
      %p: the path part of the sourcename
      %[-][<][<number>]p: the path part of the sourcename
        <number>: skip the first <number> directories of the path,
                  defaults to 0.
        <       : count the directories from the end or the path part.
        -       : use, don't skip the counted directories.
      %n: the base of the sourcename (w/o suffix)
      %%: the character '%'.
      %x: the character x for every other character.

    Example:

      mkdepend -p .c:obj/%n.o

        For every sourcefile <name>.c, an entry for obj/<name>.o is
        created.

      mkdepend -p .c:obj/%1p%n.o 'source/*.c'

        For every sourcefile source/<name>.c, an entry for obj/<name>.o is
        created.

   ------

  -f     <makefile>
  --file <makefile>

    Specify the makefile to modify. If none is specified and the --dep
    option is missing as well, MkDepend searches in order for "Makefile",
    "makefile", "Makefile.mk", "makefile.mk" and "GNUMakefile". If none
    of these exist, 'Makefile' is used and thus created.

   ------

  -d    <depfile>
  --dep <depfile>

    Specify the depfile to write the dependencies into.
    The output hereinto notes just the plain dependencies between the
    skeleton and the included files, i.e. ignores any --objpat or --objpat
    setting. However, symbolic include paths are used here as well.
    MkDepend prints both the 'a is included by b' as well as the
    'b includes a' relationships. The former are tagged with '<-' in
    the output, the latter with '->'.

    If --flat is not specified, the dependencies are written in tree
    form with indentation representating the nesting.
    If --flat is specified, a flat list like that in Makefiles will
    be written.

   ------

  -l
  --flat

    Print the plain dependency file (see option --dep) as flat list instead
    of tree form.

   ------

  -m|--ignore-missing

    If an include file is not found, it is NOT added to the dependencies.
    However, MkDepend will still print diagnostic.

   ------

  -w|--no-warn-exit

    If MkDepend generates a warning, it does not return a non-zero exit
    code to the caller (useful for use within makefiles).

   ------

  -v
  --verbose

    Print some output during operation, namely the program name and the
    file currently under examination.
   ------

  -h
  --help
  --longhelp

    Print a (short) summary of the commandline arguments and exit the
    program.

   ------

  -V
  --version

    Print the program version and exit.


Installation
------------
  Copy the executable "mkdepend" into a suitable directory, profitably
  into one in your search path. The PPC executable is in the subdirectory
  obj.ppc/, the x86 executable in the subdirectory obj.x86/.


Using MkDepend
--------------
  The straightforward use of MkDepend is of course the call from the
  commandline a la 'mkdepend *.c', give or take a few command options. This
  would scan all C source files, compute the dependencies and update the
  Makefile in the same directory with these dependencies. Easy to use and
  as easy to forget to do after an important change (trust me, it happens!).
  Also, modifying the Makefile may not be what you want; after all, it adds
  quite a bunch of junk to the file which is of no direct interest to you.

  Let's solve the second problem first: the solution is to instruct MkDepend
  to write all dependencies into an auxiliary file '.dependencies', which is
  done with the '-f' command option. The command now looks like this:
  'mkdepend -f .dependencies *.c'. To make use of this new file, the following
  statement must be added to the Makefile on a separate line:
  '-include .dependencies'. When make processes this line, it will read the
  contents of .dependencies and treat them as if they were written in the
  Makefile. The '-' in the command tells make to ignore the whole statement
  should .dependencies not exist.

  The solution to the first problem (calling MkDepend automatically whenever
  a file changes) is to put the MkDepend call into the Makefile, too.
  Fortunately for us, Be's standard make allows a Makefile to change itself
  or any included file: if such a change is detected, make will simply
  re-read the affected files. Putting MkDepend into a Makefile requires the
  following changes/additions to be done (modified according to your special
  needs where necessary):

  - the main build rule for $(TARGET) must be changed to include .dependencies
    as one of the requisites:

      $(TARGET) : .dependencies $(OBJS) ...

  - since MkDepend is not part of the BeOS distribution, the Makefile must
    be able to use the normal compiler as a standin for MkDepend. The variable
    DEP_FLAGS is set to the appropriate value to do so:

      ifeq ($(CC), gcc)
          DEP_FLAGS = -M
      endif

      ifeq ($(CC), mwcc$(CPU))
          DEP_FLAGS = -make
      endif

  - the rule to generate the .dependencies file:

      .dependencies: $(SRCS)
              $(SHELL) -ec '\
                if [ -n "`type -t mkdepend`" ]; then \
                  mkdepend $(SRCS) $(INCLUDES) -p '\''.c:obj.$$(CPU)/%n.o'\'' -f$@; \
                else \
                  $(CC) $(DEP_FLAGS) $(INCLUDES) $(SRCS) \
                  | tr '\''\011'\'' '\''\040'\'' \
                  | sed '\''s;^\([^ :][^ :]*\);$$(OBJ)/\1;g'\'' > $@; \
                fi'

  - gmake automatically makes '.dependencies' when it is missing; however,
    if our intent is to 'clean' all auxiliary files, this behaviour is
    rather annoying. The solution is to include the .dependencies into
    the Makefile only when no cleaning action is requested:
    
      ifneq (,$(filter clean clobber cleanall clobberall, $MAKECMDGOALS))
      -include .dependencies
      endif

  - a rule to point out missing header files (this allows a smoother make
    process in case of outdated .dependencies):

      %.h :
              @echo "Warning: Can't find $@."

  And that's all.

  The same changes apply if you chose to let mkdepend modify the Makefile
  directly, just replace every occurence of '.dependencies' with 'Makefile'
  (and of course do not '-include Makefile' in your Makefile).

  For a real-life example take a look at MkDepend's own Makefile.


Program Information
-------------------
  MkDepend consists of these source files:

    main.c,.h    : Program control, data generation routines.
    args.c,.h    : Argument parsing.
    getargs.c,.h : Generic commandline parser.
    reader.c,.h  : Reading of source files and scanning for #include statements.
                   Copying and writing of makefiles.
    nodes.c,.h   : Management of the names and locations of the files analysed.
                   It is implemented as a binary search tree with an additional
                   linked list.
    util.c,.h    : Some helpful functions - ok, right now just one function.
    version.h    : The version number, automatically updated by PRCS.

  Filename expansion is provided by the static library libglob, which comes
  under the GNU Library Public License in the subdirectory libglob/.

  The provided Makefile takes care of all the necessary steps to compile and
  link both MkDepend and the libglob. See the head comment of the Makefile
  for further information about available targets and cross-compilation.

  MkDepend was developed with Metrowerks C, Gnu C and GNU make; PRCS provides
  the source code version management.


Bugs/TODO
---------
  Maybe allow the modification of several makefiles with one call.
  Maybe omit from the depends list those files that could not be found.
  The Makefile should be more generic.


History
-------
  v 1.6 (01-Mar-2000)
     Added the possibility to select certain files for dependency generation.

  v 1.5 (03-Feb-1999)
     Added the search for include files in the directory of the including
       file; older versions of MkDepend searched in the directory from where
       MkDepend was started.

  v 1.4.5 (25-Oct-1998)
     R4 support (PPC and x86).
     The version number is now handled by PRCS.
     New command options '--longhelp' and '--version'.
     Default file suffixes now also cover a whole range of
       C++ suffixes (.cc, .cpp, .cxx, .cc).
     Systemincludes (<>-includes) are now handled; with the help of
       the new command option -i-.
     Filenames with embedded spaces are quoted when written to a Makefile.

  v 1.4 (04-Jul-1998) :
     Moved to BeOS, Amiga support dropped.
     New option -?|-h|--help for online help.

  v 1.3 (02-Mar-1996) :
     For source/object relations, the source is no longer included in
       dependency list, except when demanded by '+'-command option.

  v 1.2 (25-Feb-1996) :
     New option -D=DEP/K for separate file with then plain source
       dependencies.
     New option -L=FLAT/S to write the plain dependencies as flat
       list instead of a tree.

  v 1.1 (13-Oct-1995) :
     The dependencies may now be placed in midst of a makefile.
     Object file name pattern %p expanded to %[-][<][<number>]p .

  v 1.0 (18-Sep-1995) :
     Initial release, at that time for Amiga OS.


Authors
-------
  Lars DÃ¼ning, 10 Morningside Gardens, Edinburgh, EH10 5LA, United Kingdom
  EMail: lars@bearnip.com, or duening@ibr.cs.tu-bs.de (deprecated)

  The file reader was inspired by the input module of lcc by David Hanson
  and Christopher Fraser.

  The elaborate %p pattern follows a suggestion by Michael A. Wiedmer
  (<maw@paralax.demon.co.uk>).

  The initial support for R4/x86 and a nice generic Makefile was provided
  by Stephen van Egmond (<svanegmond@home.com>).
  
  Dianne Kyra Hackborn (<hackbod@angryredplanet.com>) and
  Stephen van Egmond provided valuable input.


Legalese
--------
  The following license is replicated in the file LICENSE. It applies to
  all files and derivates thereof which are part of the MkDepend package,
  except for those files which explicitely state otherwise.


  Copyright (c) 1995-1999, Lars DÃ¼ning.
  All rights reserved.

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions
  are met:

   - Redistributions of source code must retain the above copyright
     notice, this list of conditions and the following disclaimer.

   - Redistributions in binary form must reproduce the above copyright
     notice, this list of conditions and the following disclaimer in the
     documentation and/or other materials provided with the distribution.

   - Modifications of the original software, of parts or of the whole,
     must be clearly recognizable as such.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  THE SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

