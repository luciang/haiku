SubDir HAIKU_TOP src bin debug strace ;

UsePrivateHeaders device ;
UsePrivateHeaders drivers ;
UsePrivateHeaders libroot ;
UsePrivateHeaders shared ;
UsePrivateHeaders net ;
UsePrivateSystemHeaders ;

SubDirHdrs [ FDirName $(SUBDIR) $(DOTDOT) ] ;

# find headers generated by gensyscalls
SubDirHdrs $(TARGET_COMMON_DEBUG_LOCATE_TARGET) ;

local straceSources =
	Context.cpp ioctl.cpp MemoryReader.cpp NetworkTypes.cpp
	strace.cpp TypeHandler.cpp
;

# Our compiler badly chokes when compiling the generated file. So will
# split up the job into 20 pieces.
local straceSyscallsIndices
	= 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 ;

local straceSyscallsSource = [ FGristFiles strace_syscalls.cpp ] ;
local straceSyscallsObjects ;

# Whatever our compiler (gcc 2.95.3) thinks it is doing when compiling the
# generated files, it really takes it time when optimization is enabled.
# A lot with -O1, even more with -O2. Also the object sizes are amazing.
# -O0 fares significantly better; at least speed-wise. I would almost think
# about reverting to compiling all in one object file again. Almost...
local oldOptim = $(OPTIM) ;
OPTIM = -O0 ;

local i ;
for i in $(straceSyscallsIndices) {
	local object = [ FGristFiles strace_syscalls$(i).o ] ;
	straceSyscallsObjects += $(object) ;

	Object $(object) : $(straceSyscallsSource) ;

	ObjectDefines $(object)
		: GET_SYSCALLS=get_syscalls$(i) SYSCALLS_CHUNK_$(i) ;
}

# reset OPTIM
OPTIM = $(oldOptim) ;

BinCommand strace : $(straceSources)
	:
	$(straceSyscallsObjects)
	<bin>debug_utils.a
	$(TARGET_LIBSTDC++)
;

# We need to specify the dependency on the generated syscalls file explicitly.
Includes $(straceSyscallsSource) : <syscalls>strace_syscalls.h ;
