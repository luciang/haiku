<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
"http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd" [

]>

<sect1 id="midi2"><title>The Midi 2 Kit</title>

	<sect2 id="concepts">
		<title>Concepts</title>
	
		<para>
		A brief overview of the elements that comprise the Midi Kit:
		<itemizedlist>
			<listitem><emphasis>Endpoints</emphasis>. This is what the Midi Kit is all about: sending MIDI messages 
			between endpoints. An endpoint is like a MIDI In or MIDI Out socket on your 
			equipment; it either receives information or it sends information. Endpoints 
			that send MIDI events are called \b producers; the endpoints that receive those 
			events are called \b consumers. An endpoint that is created by your own 
			application is called \b local; endpoints from other applications are \b 
			remote. You can access remote endpoints using \b proxies.</listitem>
		
			<listitem><emphasis>Filters</emphasis>. A filter is an object that has a consumer and a producer 
			endpoint. It reads incoming events from its consumer, performs some operation, 
			and tells its producer to send out the results. In its current form, the Midi 
				Kit doesn't provide any special facilities for writing filters.</listitem>
		
			<listitem><emphasis>Midi Roster</emphasis>. The roster is the list of all published producers and 
			consumers. By publishing an endpoint, you allow other applications to talk to 
			it. You are not required to publish your endpoints, in which case only your own 
				application can use them.</listitem>
		
			<listitem><emphasis>Midi Server</emphasis>. The Midi Server does the behind-the-scenes work. It 
			manages the roster, it connects endpoints, it makes sure that endpoints can 
			communicate, and so on. The Midi Server is started automatically when BeOS 
			boots, and you never have to deal with it directly. Just remember that it runs 
			the show.</listitem>
		
			<listitem><filename>libmidi</filename>. The BMidi* classes live inside two shared libraries: <filename>libmidi.so</filename> 
			and <filename>libmidi2.so</filename>. If you write an application that uses old Midi Kit, you must 
			link it to <filename>libmidi.so</filename>. Applications that use the new Midi Kit must link to 
			<filename>libmidi2.so</filename>. If you want to mix-and-match both kits, you should also link to 
				both libraries.</listitem>
		</itemizedlist>
	</para>
	
	<figure id="midi2concepts"><title>The concepts captured in an image</title>
	<mediaobject>
		<imageobject>
			<imagedata fileref="midi/midi2concepts.png"/>
		</imageobject>
		<textobject><phrase>An overview of the MIDI kit.</phrase></textobject>
	</mediaobject>
	</figure>
	</sect2>
	
	<sect2 id="midi2media">
		<title>Midi Kit != Media Kit</title>
		
		<para>
			Be chose not to integrate the Midi Kit into the Media Kit as another media 
			type, mainly because MIDI doesn't require any of the format negotiation that 
			other media types need. Although the two kits look similar -- both have a 
			"roster" for finding or registering "consumers" and "producers" -- there are 
			some very important differences.
		</para>
		
		<para>
			The first and most important point to note is that BMidiConsumer and 
			BMidiProducer in the Midi Kit are NOT directly analogous to BBufferConsumer and 
			BBufferProducer in the Media Kit! In the Media Kit, consumers and producers are 
			the data consuming and producing properties of a media node. A filter in the 
			Media Kit, therefore, inherits from both BBufferConsumer and BBufferProducer, 
			and implements their virtual member functions to do its work.
		</para>
		
		<para>
			In the Midi Kit, consumers and producers act as endpoints of MIDI data 
			connections, much as media_source and media_destination do in the Media Kit. 
			Thus, a MIDI filter does not derive from BMidiConsumer and BMidiProducer; 
			instead, it contains BMidiConsumer and BMidiProducer objects for each of its 
			distinct endpoints that connect to other MIDI objects. The Midi Kit does not 
			allow the use of multiple virtual inheritance, so you can't create an object 
			that's both a BMidiConsumer and a BMidiProducer.
		</para>
		
		<para>
			This also contrasts with the old Midi Kit's conception of a BMidi object, which 
			stood for an object that both received and sent MIDI data. In the new Midi Kit, 
			the endpoints of MIDI connections are all that matters. What lies between the 
			endpoints, i.e., how a MIDI filter is actually structured, is entirely at your 
			discretion.
		</para>
		
		<para>
			Also, rather than use token structs like media_node to make connections via the 
			MediaRoster, the new kit makes the connections directly via the BMidiProducer 
			object.
		</para>
	</sect2>
	
	<sect2 id="midi2remotelocal">
		<title>Remote and local objects</title>
		
		<para>
			The Midi Kit makes a distinction between remote and local MIDI objects. You can 
			only create local MIDI endpoints, which derive from either BMidiLocalConsumer 
			or BMidiLocalProducer. Remote endpoints are endpoints that live in other 
			applications, and you access them through BMidiRoster.
		</para>
		
		<para>
			BMidiRoster only gives you access to BMidiEndpoints, BMidiConsumers, and 
			BMidiProducers. When you want to talk to remote MIDI objects, you do so through 
			the proxy objects that BMidiRoster provides. Unlike BMidiLocalConsumer and 
			BMidiLocalProducer, these classes do not provide a lot of functions. That is 
			intentional. In order to hide the details of communication with MIDI endpoints 
			in other applications, the Midi Kit must hide the details of how a particular 
			endpoint is implemented.
		</para>
		
		<para>
			So, what can you do with remote objects? Only what BMidiConsumer, 
			BMidiProducer, and BMidiEndpoint will let you do. You can connect objects, get 
			the properties of these objects -- and that's about it.
		</para>
	</sect2>
	
	<sect2 id="midi2lifespan">
		<title>Creating and Destroying Objects</title>
		
		<para>
			The constructors and destructors of most midi2 classes are private, which mean 
			you cannot directly create them using the C++ <function>new</function> operator, on the 
			stack, or as globals. Nor can you <function>delete</function> them. Instead, these 
			objects are obtained through BMidiRoster. The only two exceptions to this rule 
			are BMidiLocalConsumer and BMidiLocalProducer. These two objects may be 
			directly created and subclassed by developers.
		</para>
	</sect2>
	
	<sect2 id="midi2refcount">
		<title>Reference Counting</title>
		
		<para>
			Each MIDI endpoint has a reference count associated with it, so that the Midi 
			Roster can do proper bookkeeping. When you construct a BMidiLocalProducer or 
			BMidiLocalConsumer endpoint, it starts with a reference count of 1. In 
			addition, BMidiRoster increments the reference count of any object it hands to 
			you as a result of BMidiRoster::NextEndpoint()  or 
			BMidiRoster::FindEndpoint(). Once the count hits 
			0, the endpoint will be deleted.
		</para>
		
		<para>	
			This means that, to delete an endpoint, you don't call the <function>delete</function> 
			operator directly; instead, you call BMidiEndpoint::Release(). To balance this call, 
			there's also an BMidiEndpoint::Acquire(), in case you have two disparate parts of 
			your application working with the endpoint, and you don't want to have to keep 
			track of who needs to Release() the endpoint.
		</para>
		
		<para>
			When you're done with any endpoint object, you must Release() it. This is true 
			for both local and remote objects. Repeat after me: Release() when you're done.
		</para>
	</sect2>
	
	<sect2 id="midi2events">
		<title>MIDI Events</title>
		
		<para>
			To make some actual music, you need to BMidiProducer::Connect() 
			your consumers to your producers. Then you tell the producer to 
			"spray" MIDI events to all the connected consumers. The consumers are notified 
			of these incoming events through a set of hook functions.
		</para>
		
		<para>
			The Midi Kit already provides a set of commonly used spray functions, such as 
			BMidiLocalProducer::SprayNoteOn(), BMidiLocalProducer::SprayControlChange(), and so 
			on. These correspond one-to-one with the message types from the MIDI spec. You 
			don't need to be a MIDI expert to use the kit, but of course some knowledge of 
			the protocol helps. If you are really hardcore, you can also use the 
			BMidiLocalProducer::SprayData() to send raw MIDI events to 
			the consumers.
		</para>
			
		<para>
			At the consumer side, a dedicated thread invokes a hook function for every 
			incoming MIDI event. For every spray function, there is a corresponding hook 
			function, e.g. BMidiLocalConsumer::NoteOn() and 
			BMidiLocalConsumer::ControlChange(). The hardcore MIDI 
			fanatics among you will be pleased to know that you can also tap into the  
			BMidiLocalConsumer::Data() hook and get your hands dirty with 
			the raw MIDI data.
		</para>
	</sect2>
	
	<sect2 id="midi2time">
		<title>Time</title>
		<para>
			The spray and hook functions accept a bigtime_t parameter named "time". This 
			indicates when the MIDI event should be performed. The time is given in 
			microseconds since the computer booted. To get the current tick measurement, 
			you call the system_time() function from the Kernel Kit.
		</para>
		
		<para>	
			If you override a hook function in one of your consumer objects, it should look 
			at the time argument, wait until the designated time, and then perform its 
			action. The preferred method is to use the Kernel Kit's 
			<function>snooze_until()</function> function, which sends the consumer thread to sleep 
			until the requested time has come. (Or, if the time has already passed, returns 
			immediately.)
		</para>
		
		<para>	
			Like this:
			<programlisting>			
				void MyConsumer::NoteOn(
				uchar channel, uchar note, uchar velocity, bigtime_t time) 
				{ 
				snooze_until(time, B_SYSTEM_TIMEBASE); 
				...do your thing...
				}
			</programlisting>
		</para>
		
		<para>	
			If you want your producers to run in real time, i.e. they produce MIDI data 
			that needs to be performed immediately, you should pass time 0 to the spray 
			functions (which also happens to be the default value). Since time 0 has 
			already passed, <function>snooze_until()</function> returns immediately, and the 
			consumer will process the events as soon as they are received.
		</para>
		
		<para>	
			To schedule MIDI events for a performance time that lies somewhere in the 
			future, the producer must take into account the consumer's latency. Producers 
			should attempt to get notes to the consumer by or before 
			<emphasis>(scheduled_performance_time - latency)</emphasis>. The time argument is still the 
			scheduled performance time, so if your consumer has latency, it should snooze 
			like this before it starts to perform the events:
			<programlisting>
				snooze_until(time - Latency(), B_SYSTEM_TIMEBASE);
			</programlisting>
		</para>
		
		<note><para>
			Note that a typical producer sends out its events as soon as it can; unlike a 
			consumer, it does not have to snooze.
		</para></note>
	</sect2>
	
	<sect2 id="midi2ports">
		<title>Other Timing Issues</title>
		
		<para>
			Each consumer object uses a Kernel Kit port to receive MIDI events from 
			connected producers. The queue for this port is only 1 message deep. This means 
			that if the consumer thread is asleep in a <function>snooze_until()</function>, it will 
			not read its port. Consequently, any producer that tries to write a new event 
			to this port will block until the consumer thread is ready to receive a new 
			message. This is intentional, because it prevents producers from generating and 
			queueing up thousands of events.
		</para>
		
		<para>	
			This mechanism, while simple, puts on the producer the responsibility for 
			sorting the events in time. Suppose your producer sends three Note On events, 
			the first on t + 0, the second on t + 4, and the third on t + 2. This last 
			event won't be received until after t + 4, so it will be two ticks too late. If 
			this sort of thing can happen with your producer, you should somehow sort the 
			events before you spray them. Of course, if you have two or more producers 
			connected to the same consumer, it is nearly impossible to sort this all out 
			(pardon the pun). So it is not wise to send the same kinds of events from more 
			than one producer to one consumer at the same time.
		</para>
		
		<para>	
			The article Introduction to MIDI, Part 2 in <ulink 
				url="http://haiku-os.org/learn.php?mode=nsl_view&amp;id=36">Haiku 
				Newsletter 36</ulink> describes this problem in more detail, and provides a 
			solution. Go read it now!
		</para>
	</sect2>
	
	<sect2 id="midi2filters">
		<title>Writing a Filter</title>
		
		<para>
			A typical filter contains a consumer and a producer endpoint. It receives 
			events from the consumer, processes them, and sends them out again using the 
			producer. The consumer endpoint is a subclass of BMidiLocalConsumer, whereas 
			the producer is simply a BMidiLocalProducer, not a subclass. This is a common 
			configuration, because consumers work by overriding the event hooks to do work 
			when MIDI data arrives. Producers work by sending an event when you call their 
			member functions. You should hardly ever need to derive from BMidiLocalProducer 
			(unless you need to know when the producer gets connected or disconnected, 
			perhaps), but you'll always have to override one or more of 
			BMidiLocalConsumer's member functions to do something useful with incoming 
			data.
		</para>
		
		<para>	
			Filters should ignore the time argument from the spray and hook functions, and 
			simply pass it on unchanged. Objects that only filter data should process the 
			event as quickly as possible and be done with it. Do not 
			<function>snooze_until()</function> in the consumer endpoint of a filter!	
		</para>
	</sect2>
	
	<sect2 id="midi2apidiffs">
		<title>API Differences</title>
		
		<para>
			As far as the end user is concerned, the OpenBeOS Midi Kit is mostly the same 
			as the BeOS R5 kits, although there are a few small differences in the API 
			(mostly bug fixes):
			<itemizedlist>
				<listitem>BMidiEndpoint::IsPersistent() always returns false.</listitem>
				<listitem>The B_MIDI_CHANGE_LATENCY notification is now properly sent. The Be kit 
				incorrectly set be:op to B_MIDI_CHANGED_NAME, even though the rest of the 
				message was properly structured.</listitem>
				<listitem>If creating a local endpoint fails, you can still Release() the object 
				without crashing into the debugger.</listitem>
			</itemizedlist>
		</para>
	</sect2>
	
	<sect2 id="midi2seealso">
		<title>See Also</title>
		
		<para>
			More about the Midi Kit:
			<itemizedlist>
				<listitem>Be Newsletter Volume 3, Issue 47 - Motor Mix sample code</listitem>
				<listitem>Be Newsletter Volume 4, Issue 3 - Overview of the new kit</listitem>
				<listitem><ulink url="http://haiku-os.org/learn.php?mode=nsl_view&amp;id=33">Haiku
				Newsletter 33</ulink>, Introduction to MIDI, Part 1</listitem>
				<listitem><ulink url="http://haiku-os.org/learn.php?mode=nsl_view&amp;id=36">Haiku
				Newsletter 36</ulink>, Introduction to MIDI, Part 2</listitem>
				<listitem>Sample code and other goodies at the 
				<ulink url="http://haiku-os.org/contribute.php?mode=team_view&amp;id=midi">OpenBeOS Midi Kit team page</ulink></listitem>
			</itemizedlist>
		</para>
		
		<para>
			Information about MIDI in general:
			<itemizedlist>
				<listitem><ulink url="http://www.midi.org">MIDI Manufacturers Association</ulink></listitem>
				<listitem><ulink url="http://www.borg.com/~jglatt/tutr/miditutr.htm">MIDI Tutorials</ulink></listitem>
				<listitem><ulink url="http://www.borg.com/~jglatt/tech/midispec.htm">MIDI Specification</ulink></listitem>
				<listitem><ulink url="http://www.borg.com/~jglatt/tech/midifile.htm">Standard MIDI File Format</ulink></listitem>
				<listitem><ulink url="http://www.io.com/~jimm/midi_ref.html">Jim Menard's MIDI Reference</ulink></listitem>
			</itemizedlist>
		</para>
	</sect2>
</sect1>

			
