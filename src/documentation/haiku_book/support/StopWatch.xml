<?xml version="1.0" encoding="UTF-8"?>

<sect2 id="bstopwatch">
	<title>BStopWatch</title>
	
	<itemizedlist>
		<listitem><para><emphasis>Derived from:</emphasis> none</para></listitem>
		<listitem><para><emphasis>Declared in:</emphasis> <filename>os/support/StopWatch.h</filename></para></listitem>
		<listitem><para><emphasis>Library:</emphasis> <filename>libbe.so</filename></para></listitem>
	</itemizedlist>
	
	<para><classname>BStopWatch</classname> is a timer class.</para>
	
	<para>
		This class provides method to time events. The interface is designed to behave like a 
		physical stopwatch. It is especially useful for debugging certain parts of your code, since
		it can behave like a 'cheap' profiler.
	</para>
	
	<bridgehead renderas="sect2">Constructors and Destructors</bridgehead>
	<sect3 id="bstopwatch_constructor">
		<title>BStopWatch()</title>
		
		<constructorsynopsis>
			<methodname>BStopWatch</methodname>
			<methodparam><modifier>const</modifier><type>char *</type><parameter>name</parameter></methodparam>
			<methodparam><type>bool</type><parameter>silent</parameter><initializer>false</initializer></methodparam>
		</constructorsynopsis>
		
		<para>
			The constructor creates a clean <classname>BStopWatch</classname> object. This object
			can be given a <parameter>name</parameter>. As soon as the object is created, the time
			will start ticking away. This class is designed to be usuable as a primitive profiling tool.
			If you are profiling your code with this class, pass <literal>true</literal> as the 
			<parameter>silent</parameter> parameter. Whenever the object is destroyed, information on
			the elapsed time will be streamed to standard output.
		</para>
	</sect3>
	
	<sect3 id="bstopwatch_destructor">
		<title>~BStopWatch()</title>
		
		<destructorsynopsis>
			<modifier>virtual</modifier><methodname>~BStopWatch</methodname>
		</destructorsynopsis>
		
		<para>
			Destroys the object. If the object was constructed with the parameter 
			<literal>silent</literal> set t to <literal>false</literal>, this destructor will print
			information on the elapsed time to standard output.
		</para>
	</sect3>
	
	<bridgehead renderas="sect2">Member Functions</bridgehead>
	<sect3 id="bstopwatch_elapsedtime">
		<title>ElapsedTime()</title>
		
		<methodsynopsis>
			<type>bigtime_t</type><methodname>ElapsedTime</methodname><modifier>const</modifier>
		</methodsynopsis>
		
		<para>
			This method returns the elapsed time in microseconds since the object was created. If
			the object is suspended, the time until the suspend will be returned.
		</para>
		
		<para>
			See also: Suspend().
		</para>
	</sect3>
	
	<sect3 id="bstopwatch_lap">
		<title>Lap</title>
		
		<methodsynopsis>
			<type>bigtime_t</type><methodname>Lap</methodname>
		</methodsynopsis>
		
		<para>
			This method sets a lap. With the current implementation you are unable to actually
			retrieve the timings of the laps. This is only printed to the standard output when the
			object is destroyed. Thus making this tool only usuable for use when doing some
			profiling.
		</para>
		
		<note><para>
			Please note that the current implementation is limited to 10 laps. The value returned
			is the time that has passed since the timer was started (and not the time that has
			passed since the last lap). Any lap call beyond the 10th lap will overwrite the last
			value. Note that if the timer is suspended, nothing happens and the method will return
			<returnvalue>0</returnvalue>. 
		</para></note>
	</sect3>
	
	<sect3 id="bstopwatch_name">
		<title>Name()</title>
		
		<methodsynopsis>
			<type>const char *</type><methodname>Name</methodname><modifier>const</modifier>
		</methodsynopsis>
		
		<para>
			Returns the name that was given when the object was constructed.
		</para>
	</sect3>
	
	<sect3 id="bstopwatch_reset">
		<title>Reset()</title>
		
		<methodsynopsis>
			<void/><methodname>Reset</methodname>
		</methodsynopsis>
		
		<para>
			Resets the object: it clears the start time, it clears the stored laps and it restarts
			the timer.
		</para>
	</sect3>
	
	<sect3 id="bstopwatch_resume">
		<title>Resume()</title>
		
		<methodsynopsis>
			<void/><methodname>Resume</methodname>
		</methodsynopsis>
		
		<para>
			Resumes the timer when it is in a suspended state.
		</para>
		
		<para>
			See Also: Suspend().
		</para>
	</sect3>
	
	<sect3 id="bstopwatch_suspend">
		<title>Suspend()</title>
		
		<methodsynopsis>
			<void/><methodname>Suspend</methodname>
		</methodsynopsis>
		
		<para>
			Suspends the timer.
		</para>
		
		<para>
			See Also: Resume().
		</para>
	</sect3>
</sect2>
