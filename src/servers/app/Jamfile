SubDir OBOS_TOP src servers app ;

AddResources app_server : app_server.rdef ;

UseLibraryHeaders agg png zlib ;
UsePrivateHeaders app interface shared [ FDirName servers app ] ;

UseHeaders [ FDirName $(OBOS_TOP) src servers app drawing ] ;
UseHeaders [ FDirName $(OBOS_TOP) src servers app drawing Painter ] ;
UseHeaders [ FDirName $(OBOS_TOP) src servers app drawing Painter drawing_modes ] ;
UseHeaders [ FDirName $(OBOS_TOP) src servers app drawing Painter font_support ] ;
UseFreeTypeHeaders ;

SEARCH_SOURCE += [ FDirName $(SUBDIR) drawing ] ;

HWINTERFACE_SOURCES = 
	BBitmapBuffer.cpp
	HWInterface.cpp
	MultiLocker.cpp
;

if ( $(TARGET_PLATFORM) = haiku ) {
	# This overrides the definitions in private/servers/app/ServerConfig.h
	defines = [ FDefines TEST_MODE=0 ] ;

	SubDirCcFlags $(defines) ;
	SubDirC++Flags $(defines) ;
	
} else {
	SharedLibrary hwinterface :
		$(HWINTERFACE_SOURCES)
	;
	
	LINKFLAGS on libhwinterfaceimpl.so ?= $(LINKFLAGS) ;
	LINKFLAGS on libhwinterfaceimpl.so += -lbe ;
	
	SharedLibrary hwinterfaceimpl :
		fake_input_server.cpp
		ViewHWInterface.cpp
		: libopenbeos.so libhwinterface.so
	;

	# make this empty, because it is already in the hwinterfaceimpl lib
	# and therefore does not need to be included in app_server anymore
	HWINTERFACE_SOURCES = ;
}

SharedLibrary appserver :
	Angle.cpp
	BGet++.cpp
	BitmapManager.cpp
	ColorSet.cpp
	CursorData.cpp
	CursorSet.cpp
	Decorator.cpp
	FontFamily.cpp
	IPoint.cpp
	LayerData.cpp
	RGBColor.cpp
	ServerBitmap.cpp
	ServerCursor.cpp
	ServerFont.cpp
	FontServer.cpp
	SystemPalette.cpp
	TokenHandler.cpp
	Utils.cpp

	# drawing
	PatternHandler.cpp
	DisplayDriver.cpp
;

Server app_server :
	# Misc. Sources
	DebugInfoManager.cpp
	SubWindowList.cpp
	PicturePlayer.cpp
	PNGDump.cpp
	RAMLinkMsgReader.cpp
	MessageLooper.cpp

	# Manager Classes
	CursorManager.cpp
	DecorManager.cpp
	ScreenManager.cpp

	AppServer.cpp
	Desktop.cpp
	DesktopSettings.cpp

	ServerApp.cpp
	ServerWindow.cpp

	# DisplayDriver Classes
	AccelerantBuffer.cpp
	AccelerantHWInterface.cpp
	BitmapBuffer.cpp
	DisplayDriverPainter.cpp
	MallocBuffer.cpp
	UpdateQueue.cpp
	# this will be empty when compiling for R5
	$(HWINTERFACE_SOURCES)

	VirtualScreen.cpp
	BitmapHWInterface.cpp
	DefaultDecorator.cpp
	Layer.cpp
	OffscreenServerWindow.cpp
	OffscreenWinBorder.cpp
	RootLayer.cpp
	ServerPicture.cpp
	ServerScreen.cpp
	WinBorder.cpp
	Workspace.cpp
	WorkspacesLayer.cpp
;

# link libraries for app_server and libappserver.so

if $(TARGET_PLATFORM) = haiku {
	# link for Haiku

	LinkSharedOSLibs libappserver.so :
		libroot.so libbe.so libfreetype.so libtextencoding.so ;

	LinkSharedOSLibs app_server :
		libroot.so libtranslation.so libz.so libpng.so libbe.so
		libappserver.so libpainter.a libagg.a libfreetype.so
		libtextencoding.so ;

} else {
	# link as test application under R5

	LinkSharedOSLibs libhwinterface.so :
		libappserver.so libopenbeos.so ;

	LinkSharedOSLibs libappserver.so :
		<boot!home!config!lib>libopenbeos.so
		libtextencoding.so libfreetype.so ;

	LinkSharedOSLibs app_server :
		libz.so libpng.so libappserver.so
		libpainter.a <boot!home!config!lib>libopenbeos.so 
		libhwinterface.so libhwinterfaceimpl.so
		libagg.a libfreetype.so libtextencoding.so ;
}

SubInclude OBOS_TOP src servers app drawing Painter ;
