SubDir OBOS_TOP src servers app ;

AddResources app_server : app_server.rdef ;

UseLibraryHeaders agg png zlib ;
UsePrivateHeaders app interface [ FDirName servers app ] ;
UseHeaders [ FDirName $(OBOS_TOP) src servers app drawing ] ;
UseHeaders [ FDirName $(OBOS_TOP) src servers app drawing Painter ] ;
UseHeaders [ FDirName $(OBOS_TOP) src servers app drawing Painter drawing_modes ] ;
UseHeaders [ FDirName $(OBOS_TOP) src servers app drawing Painter font_support ] ;
UseFreeTypeHeaders ;

SEARCH_SOURCE += [ FDirName $(SUBDIR) drawing ] ;

if ( $(TARGET_PLATFORM) = haiku ) {
	# This overrides the definitions in private/servers/app/ServerConfig.h
	defines = [ FDefines TEST_MODE=0 ] ;

	SubDirCcFlags $(defines) ;
	SubDirC++Flags $(defines) ;
	
	VIEW_DRIVER_SOURCES =
		AccelerantBuffer.cpp
		AccelerantHWInterface.cpp
		BitmapBuffer.cpp
		DisplayDriverPainter.cpp
		HWInterface.cpp
		MallocBuffer.cpp
		UpdateQueue.cpp
		;
} else {
	VIEW_DRIVER_SOURCES =
		fake_input_server.cpp
		BitmapBuffer.cpp
		AccelerantBuffer.cpp
		AccelerantHWInterface.cpp
		DisplayDriverPainter.cpp
		HWInterface.cpp
		MallocBuffer.cpp
		UpdateQueue.cpp
		ViewHWInterface.cpp
		;
}

SharedLibrary appserver :
	Angle.cpp
	BGet++.cpp
	BitmapManager.cpp
	ColorSet.cpp
	CursorData.cpp
	Decorator.cpp
	FontFamily.cpp
	IPoint.cpp
	LayerData.cpp
	RGBColor.cpp
	ServerBitmap.cpp
	ServerCursor.cpp
	ServerFont.cpp
	FontServer.cpp
	SysCursor.cpp
	SystemPalette.cpp
	TokenHandler.cpp
	Utils.cpp

	# drawing
	PatternHandler.cpp
	DisplayDriver.cpp
;

Server app_server :
	# Misc. Sources
	DebugInfoManager.cpp
	SubWindowList.cpp
	MultiLocker.cpp
	PicturePlayer.cpp
	PNGDump.cpp
	RAMLinkMsgReader.cpp

	# Manager Classes
	AppServer.cpp
	CursorManager.cpp
	Desktop.cpp
	ServerApp.cpp
	ServerWindow.cpp
	DecorManager.cpp

	# DisplayDriver Classes
	$(VIEW_DRIVER_SOURCES)

	BBitmapBuffer.cpp
	BitmapHWInterface.cpp
	DefaultDecorator.cpp
	Layer.cpp
	OffscreenServerWindow.cpp
	OffscreenWinBorder.cpp
	RootLayer.cpp
	ServerPicture.cpp
	ServerScreen.cpp
	WinBorder.cpp
	Workspace.cpp
	WorkspacesLayer.cpp
;

# link libraries for app_server and libappserver.so

if $(TARGET_PLATFORM) = haiku {
	# link for Haiku

	LinkSharedOSLibs libappserver.so :
		libroot.so libbe.so libfreetype.so libtextencoding.so ;

	LinkSharedOSLibs app_server :
		libroot.so libtranslation.so libz.so libpng.so libbe.so
		libappserver.so libpainter.a libagg.a libfreetype.so
		libtextencoding.so ;

} else {
	# link as test application under R5

	LINKFLAGS on app_server ?= $(LINKFLAGS) ;
	LINKFLAGS on app_server += -lbe ;

	LinkSharedOSLibs libappserver.so :
		root be <boot!home!config!lib>libopenbeos.so
		textencoding libfreetype.so ;

	LinkSharedOSLibs app_server :
		root be game translation libz.so libpng.so libappserver.so
		libpainter.a <boot!home!config!lib>libopenbeos.so 
		libagg.a libfreetype.so textencoding ;
}

SubInclude OBOS_TOP src servers app drawing Painter ;
