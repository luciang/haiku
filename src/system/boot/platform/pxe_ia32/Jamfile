SubDir HAIKU_TOP src system boot platform pxe_ia32 ;

SubDirHdrs $(SUBDIR) $(DOTDOT) bios_ia32 ;
SubDirHdrs $(HAIKU_TOP) headers private kernel boot platform bios_ia32 ;
SubDirHdrs $(HAIKU_TOP) headers private kernel boot platform $(TARGET_BOOT_PLATFORM) ;

UsePrivateHeaders [ FDirName kernel disk_device_manager ] ;
UsePrivateHeaders [ FDirName graphics vesa ] ;
UsePrivateHeaders [ FDirName storage ] ;

{
	local defines = _BOOT_MODE _PXE_ENV ;

	defines = [ FDefines $(defines) ] ;
	SubDirCcFlags $(defines) -Wall -Wno-multichar ;
	SubDirC++Flags $(defines) -Wall -Wno-multichar -fno-rtti ;
}

local bios_ia32_src = 
	start.c
	debug.c
	bios.S
	console.cpp
	serial.cpp
	devices.cpp
	keyboard.cpp
	menu.cpp
	mmu.cpp
	cpu.cpp
	smp.cpp
	support.S
	video.cpp
	apm.cpp
;

KernelMergeObject boot_platform_pxe_ia32.o :
	pxe_stage2.S
	smp_trampoline.S
	$(bios_ia32_src)
	
	# generic
	text_menu.cpp
	: -fno-pic
;


rule BuildPXEstage1 {
	local bin = $(1) ;
	local source = $(2) ;

	Depends $(bin) : $(source) ;
	MakeLocateDebug $(bin) ;
}


actions BuildPXEstage1 {
	rm -f $(1)
	as -o $(1).o $(2)
	ld --oformat binary --Ttext 0x7C00 -o $(1) $(1).o
}

BuildPXEstage1 pxe_stage1.bin : pxe_stage1.S ;

SEARCH on [ FGristFiles $(bios_ia32_src) ]
	= [ FDirName $(SUBDIR) $(DOTDOT) bios_ia32 ] ;

SEARCH on [ FGristFiles text_menu.cpp ]
	= [ FDirName $(HAIKU_TOP) src system boot platform generic ] ;

# We also need the bios_ia32 stage1.bin for building bin/makebootable
SEARCH on stage1.bin
 	= [ FDirName $(SUBDIR) $(DOTDOT) bios_ia32 ] ;

# Tell the build system to where stage1.bin can be found, so it can be used
# elsewhere.
# SEARCH on pxe_stage1.bin = $(SUBDIR) ;

