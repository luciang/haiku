# Makefile.in generated by automake 1.9.6 from Makefile.am.
# @configure_input@

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005  Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.

@SET_MAKE@
srcdir = @srcdir@
top_srcdir = @top_srcdir@
VPATH = @srcdir@
pkgdatadir = $(datadir)/@PACKAGE@
pkglibdir = $(libdir)/@PACKAGE@
pkgincludedir = $(includedir)/@PACKAGE@
top_builddir = ../..
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
INSTALL = @INSTALL@
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = @build@
host_triplet = @host@
subdir = tests/XSLTMark
DIST_COMMON = $(srcdir)/Makefile.am $(srcdir)/Makefile.in
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/configure.in
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(SHELL) $(top_srcdir)/mkinstalldirs
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES =
SOURCES =
DIST_SOURCES =
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = @ACLOCAL@
AMDEP_FALSE = @AMDEP_FALSE@
AMDEP_TRUE = @AMDEP_TRUE@
AMTAR = @AMTAR@
AR = @AR@
AUTOCONF = @AUTOCONF@
AUTOHEADER = @AUTOHEADER@
AUTOMAKE = @AUTOMAKE@
AWK = @AWK@
CC = @CC@
CCDEPMODE = @CCDEPMODE@
CFLAGS = @CFLAGS@
CPP = @CPP@
CPPFLAGS = @CPPFLAGS@
CXX = @CXX@
CXXCPP = @CXXCPP@
CXXDEPMODE = @CXXDEPMODE@
CXXFLAGS = @CXXFLAGS@
CYGPATH_W = @CYGPATH_W@
DEFS = @DEFS@
DEPDIR = @DEPDIR@
ECHO = @ECHO@
ECHO_C = @ECHO_C@
ECHO_N = @ECHO_N@
ECHO_T = @ECHO_T@
EGREP = @EGREP@
EXEEXT = @EXEEXT@
EXSLT_INCLUDEDIR = @EXSLT_INCLUDEDIR@
EXSLT_LIBDIR = @EXSLT_LIBDIR@
EXSLT_LIBS = @EXSLT_LIBS@
EXTRA_LIBS = @EXTRA_LIBS@
F77 = @F77@
FFLAGS = @FFLAGS@
HTML_DIR = @HTML_DIR@
INSTALL_DATA = @INSTALL_DATA@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_SCRIPT = @INSTALL_SCRIPT@
INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@
LDFLAGS = @LDFLAGS@
LIBEXSLT_MAJOR_VERSION = @LIBEXSLT_MAJOR_VERSION@
LIBEXSLT_MICRO_VERSION = @LIBEXSLT_MICRO_VERSION@
LIBEXSLT_MINOR_VERSION = @LIBEXSLT_MINOR_VERSION@
LIBEXSLT_VERSION = @LIBEXSLT_VERSION@
LIBEXSLT_VERSION_EXTRA = @LIBEXSLT_VERSION_EXTRA@
LIBEXSLT_VERSION_INFO = @LIBEXSLT_VERSION_INFO@
LIBEXSLT_VERSION_NUMBER = @LIBEXSLT_VERSION_NUMBER@
LIBGCRYPT_CFLAGS = @LIBGCRYPT_CFLAGS@
LIBGCRYPT_CONFIG = @LIBGCRYPT_CONFIG@
LIBGCRYPT_LIBS = @LIBGCRYPT_LIBS@
LIBOBJS = @LIBOBJS@
LIBS = @LIBS@
LIBTOOL = @LIBTOOL@
LIBXML_CFLAGS = @LIBXML_CFLAGS@
LIBXML_LIBS = @LIBXML_LIBS@
LIBXML_REQUIRED_VERSION = @LIBXML_REQUIRED_VERSION@
LIBXML_SRC = @LIBXML_SRC@
LIBXSLT_DEFAULT_PLUGINS_PATH = @LIBXSLT_DEFAULT_PLUGINS_PATH@
LIBXSLT_MAJOR_MINOR_VERSION = @LIBXSLT_MAJOR_MINOR_VERSION@
LIBXSLT_MAJOR_VERSION = @LIBXSLT_MAJOR_VERSION@
LIBXSLT_MICRO_VERSION = @LIBXSLT_MICRO_VERSION@
LIBXSLT_MINOR_VERSION = @LIBXSLT_MINOR_VERSION@
LIBXSLT_VERSION = @LIBXSLT_VERSION@
LIBXSLT_VERSION_EXTRA = @LIBXSLT_VERSION_EXTRA@
LIBXSLT_VERSION_INFO = @LIBXSLT_VERSION_INFO@
LIBXSLT_VERSION_NUMBER = @LIBXSLT_VERSION_NUMBER@
LN_S = @LN_S@
LTLIBOBJS = @LTLIBOBJS@
MAKEINFO = @MAKEINFO@
MV = @MV@
M_LIBS = @M_LIBS@
OBJEXT = @OBJEXT@
PACKAGE = @PACKAGE@
PACKAGE_BUGREPORT = @PACKAGE_BUGREPORT@
PACKAGE_NAME = @PACKAGE_NAME@
PACKAGE_STRING = @PACKAGE_STRING@
PACKAGE_TARNAME = @PACKAGE_TARNAME@
PACKAGE_VERSION = @PACKAGE_VERSION@
PATH_SEPARATOR = @PATH_SEPARATOR@
PERL = @PERL@
PYTHON = @PYTHON@
PYTHONSODV = @PYTHONSODV@
PYTHON_INCLUDES = @PYTHON_INCLUDES@
PYTHON_SITE_PACKAGES = @PYTHON_SITE_PACKAGES@
PYTHON_SUBDIR = @PYTHON_SUBDIR@
PYTHON_VERSION = @PYTHON_VERSION@
RANLIB = @RANLIB@
RELDATE = @RELDATE@
RM = @RM@
SET_MAKE = @SET_MAKE@
SHELL = @SHELL@
STATIC_BINARIES = @STATIC_BINARIES@
STRIP = @STRIP@
TAR = @TAR@
VERSION = @VERSION@
WIN32_EXTRA_LDFLAGS = @WIN32_EXTRA_LDFLAGS@
WIN32_EXTRA_LIBADD = @WIN32_EXTRA_LIBADD@
WITH_CRYPTO = @WITH_CRYPTO@
WITH_DEBUGGER = @WITH_DEBUGGER@
WITH_MEM_DEBUG = @WITH_MEM_DEBUG@
WITH_MODULES = @WITH_MODULES@
WITH_MODULES_FALSE = @WITH_MODULES_FALSE@
WITH_MODULES_TRUE = @WITH_MODULES_TRUE@
WITH_PERL_FALSE = @WITH_PERL_FALSE@
WITH_PERL_TRUE = @WITH_PERL_TRUE@
WITH_PYTHON_FALSE = @WITH_PYTHON_FALSE@
WITH_PYTHON_TRUE = @WITH_PYTHON_TRUE@
WITH_TRIO = @WITH_TRIO@
WITH_XSLT_DEBUG = @WITH_XSLT_DEBUG@
XML_CONFIG = @XML_CONFIG@
XSLTPROCDV = @XSLTPROCDV@
XSLT_INCLUDEDIR = @XSLT_INCLUDEDIR@
XSLT_LIBDIR = @XSLT_LIBDIR@
XSLT_LIBS = @XSLT_LIBS@
ac_ct_AR = @ac_ct_AR@
ac_ct_CC = @ac_ct_CC@
ac_ct_CXX = @ac_ct_CXX@
ac_ct_F77 = @ac_ct_F77@
ac_ct_RANLIB = @ac_ct_RANLIB@
ac_ct_STRIP = @ac_ct_STRIP@
am__fastdepCC_FALSE = @am__fastdepCC_FALSE@
am__fastdepCC_TRUE = @am__fastdepCC_TRUE@
am__fastdepCXX_FALSE = @am__fastdepCXX_FALSE@
am__fastdepCXX_TRUE = @am__fastdepCXX_TRUE@
am__include = @am__include@
am__leading_dot = @am__leading_dot@
am__quote = @am__quote@
am__tar = @am__tar@
am__untar = @am__untar@
bindir = @bindir@
build = @build@
build_alias = @build_alias@
build_cpu = @build_cpu@
build_os = @build_os@
build_vendor = @build_vendor@
datadir = @datadir@
exec_prefix = @exec_prefix@
host = @host@
host_alias = @host_alias@
host_cpu = @host_cpu@
host_os = @host_os@
host_vendor = @host_vendor@
includedir = @includedir@
infodir = @infodir@
install_sh = @install_sh@
libdir = @libdir@
libexecdir = @libexecdir@
localstatedir = @localstatedir@
mandir = @mandir@
mkdir_p = @mkdir_p@
oldincludedir = @oldincludedir@
prefix = @prefix@
program_transform_name = @program_transform_name@
pythondir = @pythondir@
sbindir = @sbindir@
sharedstatedir = @sharedstatedir@
sysconfdir = @sysconfdir@
target_alias = @target_alias@
EXTRA_DIST = \
  dbgen.pl \
  alphabetize.out alphabetize.ref alphabetize.xsl \
  attsets.out attsets.ref attsets.xsl \
  avts.out avts.ref avts.xsl \
  axis.out axis.ref axis.xml axis.xsl \
  backwards.out backwards.ref backwards.xsl \
  bottles.out bottles.ref bottles.xml bottles.xsl \
  breadth.out breadth.ref breadth.xml \
  brutal.out brutal.ref brutal.xml brutal.xsl \
  chart.out chart.ref chart.xml chart.xsl \
  creation.out creation.ref creation.xsl \
  current.out current.ref current.xml current.xsl \
  dbonerow.out dbonerow.ref dbonerow.xsl \
  dbtail.out dbtail.ref dbtail.xsl \
  decoy.out decoy.xsl \
  depth.out depth.ref depth.xml \
  encrypt.out encrypt.ref encrypt.xsl \
  find.xsl \
  functions.out functions.ref functions.xsl \
  game.out game.ref game.xml game.xsl \
  gettysburg.xml \
  html.out html.ref html.xml html.xsl \
  identity.out identity.ref identity.xml identity.xsl \
  inventory.out inventory.ref inventory.xml inventory.xsl \
  metric.out metric.ref metric.xml metric.xsl \
  number.out number.xml number.xsl \
  oddtemplate.out oddtemplate.ref oddtemplate.xml oddtemplate.xsl \
  patterns.out patterns.ref patterns.xsl \
  prettyprint.out prettyprint.ref prettyprint.xsl \
  priority.out priority.ref priority.xml priority.xsl \
  products.out products.ref products.xml products.xsl \
  queens.out queens.ref queens.xml queens.xsl \
  reverser.out reverser.ref reverser.xsl \
  stringsort.out stringsort.ref stringsort.xsl \
  summarize.out summarize.ref summarize.xsl \
  total.out total.ref total.xsl \
  tower.out tower.ref tower.xml tower.xsl tower2.xsl \
  trend.out trend.ref trend.xml trend.xsl \
  union.out union.ref union.xml union.xsl \
  xpath.out xpath.ref xpath.xml xpath.xsl \
  xslbench1.out xslbench1.xml xslbench1.xsl \
  xslbench2.out xslbench2.xsl \
  xslbench3.out xslbench3.xsl \
  xslbenchdream.xml

ALL_TESTS = alphabetize attsets avts axis backwards bottles breadth brutal chart \
  creation current dbonerow dbtail decoy depth encrypt functions game \
  html identity inventory metric number oddtemplate patterns prettyprint \
  priority products queens reverser stringsort summarize total tower trend \
  union xpath xslbench1 xslbench2 xslbench3

all: all-am

.SUFFIXES:
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh \
		&& exit 0; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --gnu  tests/XSLTMark/Makefile'; \
	cd $(top_srcdir) && \
	  $(AUTOMAKE) --gnu  tests/XSLTMark/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs

distclean-libtool:
	-rm -f libtool
uninstall-info-am:
tags: TAGS
TAGS:

ctags: CTAGS
CTAGS:


distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's|.|.|g'`; \
	list='$(DISTFILES)'; for file in $$list; do \
	  case $$file in \
	    $(srcdir)/*) file=`echo "$$file" | sed "s|^$$srcdirstrip/||"`;; \
	    $(top_srcdir)/*) file=`echo "$$file" | sed "s|^$$topsrcdirstrip/|$(top_builddir)/|"`;; \
	  esac; \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  dir=`echo "$$file" | sed -e 's,/[^/]*$$,,'`; \
	  if test "$$dir" != "$$file" && test "$$dir" != "."; then \
	    dir="/$$dir"; \
	    $(mkdir_p) "$(distdir)$$dir"; \
	  else \
	    dir=''; \
	  fi; \
	  if test -d $$d/$$file; then \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \
	    fi; \
	    cp -pR $$d/$$file $(distdir)$$dir || exit 1; \
	  else \
	    test -f $(distdir)/$$file \
	    || cp -p $$d/$$file $(distdir)/$$file \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile
installdirs:
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean-am: clean-generic clean-libtool mostlyclean-am

distclean: distclean-am
	-rm -f Makefile
distclean-am: clean-am distclean-generic distclean-libtool

dvi: dvi-am

dvi-am:

info: info-am

info-am:

install-data-am:

install-exec-am:

install-info: install-info-am

install-man:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-generic mostlyclean-libtool

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-info-am

.PHONY: all all-am check check-am clean clean-generic clean-libtool \
	distclean distclean-generic distclean-libtool distdir dvi \
	dvi-am html html-am info info-am install install-am \
	install-data install-data-am install-exec install-exec-am \
	install-info install-info-am install-man install-strip \
	installcheck installcheck-am installdirs maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-generic \
	mostlyclean-libtool pdf pdf-am ps ps-am uninstall uninstall-am \
	uninstall-info-am

%.out : %

$(top_builddir)/xsltproc/xsltproc:
	@(cd ../../xsltproc ; $(MAKE) xsltproc)

all:

test tests:
	@echo '## Running XSLTMark tests'
	@for i in $(ALL_TESTS); do $(MAKE) $$i; done

valgrind:
	@echo '## Running the regression tests under Valgrind'
	$(MAKE) CHECKER='valgrind -q' tests

clean:
	rm -f *.tmp *~ core db100.xml db1000.xml db10000.xml

@WITH_PERL_TRUE@db100.xml: $(srcdir)/dbgen.pl
@WITH_PERL_TRUE@	$(PERL) $(srcdir)/dbgen.pl 100 > db100.xml

@WITH_PERL_TRUE@db1000.xml: $(srcdir)/dbgen.pl
@WITH_PERL_TRUE@	$(PERL) $(srcdir)/dbgen.pl 1000 > db1000.xml

@WITH_PERL_TRUE@db10000.xml: $(srcdir)/dbgen.pl
@WITH_PERL_TRUE@	$(PERL) $(srcdir)/dbgen.pl 10000 > db10000.xml

@WITH_PERL_TRUE@alphabetize:	db100.xml
@WITH_PERL_TRUE@	@(echo > .memdump)
@WITH_PERL_TRUE@	@log=`$(CHECKER) $(top_builddir)/xsltproc/xsltproc \
@WITH_PERL_TRUE@		$(srcdir)/$@.xsl $< > $@.tmp; \
@WITH_PERL_TRUE@	  if [ ! -f $(srcdir)/$@.out ] ; then \
@WITH_PERL_TRUE@		cp $@.tmp $(srcdir)/$@.out ; \
@WITH_PERL_TRUE@	  else \
@WITH_PERL_TRUE@		diff $(srcdir)/$@.out $@.tmp ; \
@WITH_PERL_TRUE@	  fi ; \
@WITH_PERL_TRUE@	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
@WITH_PERL_TRUE@	@if [ -n "$$log" ] ; then \
@WITH_PERL_TRUE@	  	echo $@ result ; \
@WITH_PERL_TRUE@		echo $$log ; \
@WITH_PERL_TRUE@	fi
@WITH_PERL_TRUE@	@rm -f $@.tmp

@WITH_PERL_TRUE@avts:			db100.xml
@WITH_PERL_TRUE@	@(echo > .memdump)
@WITH_PERL_TRUE@	@log=`$(CHECKER) $(top_builddir)/xsltproc/xsltproc \
@WITH_PERL_TRUE@		$(srcdir)/$@.xsl $< > $@.tmp; \
@WITH_PERL_TRUE@	  if [ ! -f $(srcdir)/$@.out ] ; then \
@WITH_PERL_TRUE@		cp $@.tmp $(srcdir)/$@.out ; \
@WITH_PERL_TRUE@	  else \
@WITH_PERL_TRUE@		diff $(srcdir)/$@.out $@.tmp ; \
@WITH_PERL_TRUE@	  fi ; \
@WITH_PERL_TRUE@	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
@WITH_PERL_TRUE@	@if [ -n "$$log" ] ; then \
@WITH_PERL_TRUE@	  	echo $@ result ; \
@WITH_PERL_TRUE@		echo $$log ; \
@WITH_PERL_TRUE@	fi
@WITH_PERL_TRUE@	@rm -f $@.tmp

@WITH_PERL_TRUE@creation:		db100.xml
@WITH_PERL_TRUE@	@(echo > .memdump)
@WITH_PERL_TRUE@	@log=`$(CHECKER) $(top_builddir)/xsltproc/xsltproc \
@WITH_PERL_TRUE@		$(srcdir)/$@.xsl $< > $@.tmp; \
@WITH_PERL_TRUE@	  if [ ! -f $(srcdir)/$@.out ] ; then \
@WITH_PERL_TRUE@		cp $@.tmp $(srcdir)/$@.out ; \
@WITH_PERL_TRUE@	  else \
@WITH_PERL_TRUE@		diff $(srcdir)/$@.out $@.tmp ; \
@WITH_PERL_TRUE@	  fi ; \
@WITH_PERL_TRUE@	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
@WITH_PERL_TRUE@	@if [ -n "$$log" ] ; then \
@WITH_PERL_TRUE@	  	echo $@ result ; \
@WITH_PERL_TRUE@		echo $$log ; \
@WITH_PERL_TRUE@	fi
@WITH_PERL_TRUE@	@rm -f $@.tmp

@WITH_PERL_TRUE@dbonerow:		db10000.xml
@WITH_PERL_TRUE@	@(echo > .memdump)
@WITH_PERL_TRUE@	@log=`$(CHECKER) $(top_builddir)/xsltproc/xsltproc \
@WITH_PERL_TRUE@		$(srcdir)/$@.xsl $< > $@.tmp; \
@WITH_PERL_TRUE@	  if [ ! -f $(srcdir)/$@.out ] ; then \
@WITH_PERL_TRUE@		cp $@.tmp $(srcdir)/$@.out ; \
@WITH_PERL_TRUE@	  else \
@WITH_PERL_TRUE@		diff $(srcdir)/$@.out $@.tmp ; \
@WITH_PERL_TRUE@	  fi ; \
@WITH_PERL_TRUE@	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
@WITH_PERL_TRUE@	@if [ -n "$$log" ] ; then \
@WITH_PERL_TRUE@	  	echo $@ result ; \
@WITH_PERL_TRUE@		echo $$log ; \
@WITH_PERL_TRUE@	fi
@WITH_PERL_TRUE@	@rm -f $@.tmp

@WITH_PERL_TRUE@dbtail:		db100.xml
@WITH_PERL_TRUE@	@(echo > .memdump)
@WITH_PERL_TRUE@	@log=`$(CHECKER) $(top_builddir)/xsltproc/xsltproc \
@WITH_PERL_TRUE@		$(srcdir)/$@.xsl $< > $@.tmp; \
@WITH_PERL_TRUE@	  if [ ! -f $(srcdir)/$@.out ] ; then \
@WITH_PERL_TRUE@		cp $@.tmp $(srcdir)/$@.out ; \
@WITH_PERL_TRUE@	  else \
@WITH_PERL_TRUE@		diff $(srcdir)/$@.out $@.tmp ; \
@WITH_PERL_TRUE@	  fi ; \
@WITH_PERL_TRUE@	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
@WITH_PERL_TRUE@	@if [ -n "$$log" ] ; then \
@WITH_PERL_TRUE@	  	echo $@ result ; \
@WITH_PERL_TRUE@		echo $$log ; \
@WITH_PERL_TRUE@	fi
@WITH_PERL_TRUE@	@rm -f $@.tmp

@WITH_PERL_TRUE@decoy:		db100.xml
@WITH_PERL_TRUE@	@(echo > .memdump)
@WITH_PERL_TRUE@	@log=`$(CHECKER) $(top_builddir)/xsltproc/xsltproc \
@WITH_PERL_TRUE@		$(srcdir)/$@.xsl $< > $@.tmp; \
@WITH_PERL_TRUE@	  if [ ! -f $(srcdir)/$@.out ] ; then \
@WITH_PERL_TRUE@		cp $@.tmp $(srcdir)/$@.out ; \
@WITH_PERL_TRUE@	  else \
@WITH_PERL_TRUE@		diff $(srcdir)/$@.out $@.tmp ; \
@WITH_PERL_TRUE@	  fi ; \
@WITH_PERL_TRUE@	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
@WITH_PERL_TRUE@	@if [ -n "$$log" ] ; then \
@WITH_PERL_TRUE@	  	echo $@ result ; \
@WITH_PERL_TRUE@		echo $$log ; \
@WITH_PERL_TRUE@	fi
@WITH_PERL_TRUE@	@rm -f $@.tmp

@WITH_PERL_TRUE@encrypt:		db100.xml
@WITH_PERL_TRUE@	@(echo > .memdump)
@WITH_PERL_TRUE@	@log=`$(CHECKER) $(top_builddir)/xsltproc/xsltproc \
@WITH_PERL_TRUE@		$(srcdir)/$@.xsl $< > $@.tmp; \
@WITH_PERL_TRUE@	  if [ ! -f $(srcdir)/$@.out ] ; then \
@WITH_PERL_TRUE@		cp $@.tmp $(srcdir)/$@.out ; \
@WITH_PERL_TRUE@	  else \
@WITH_PERL_TRUE@		diff $(srcdir)/$@.out $@.tmp ; \
@WITH_PERL_TRUE@	  fi ; \
@WITH_PERL_TRUE@	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
@WITH_PERL_TRUE@	@if [ -n "$$log" ] ; then \
@WITH_PERL_TRUE@	  	echo $@ result ; \
@WITH_PERL_TRUE@		echo $$log ; \
@WITH_PERL_TRUE@	fi
@WITH_PERL_TRUE@	@rm -f $@.tmp

@WITH_PERL_TRUE@functions:		db100.xml
@WITH_PERL_TRUE@	@(echo > .memdump)
@WITH_PERL_TRUE@	@log=`$(CHECKER) $(top_builddir)/xsltproc/xsltproc \
@WITH_PERL_TRUE@		$(srcdir)/$@.xsl $< > $@.tmp; \
@WITH_PERL_TRUE@	  if [ ! -f $(srcdir)/$@.out ] ; then \
@WITH_PERL_TRUE@		cp $@.tmp $(srcdir)/$@.out ; \
@WITH_PERL_TRUE@	  else \
@WITH_PERL_TRUE@		diff $(srcdir)/$@.out $@.tmp ; \
@WITH_PERL_TRUE@	  fi ; \
@WITH_PERL_TRUE@	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
@WITH_PERL_TRUE@	@if [ -n "$$log" ] ; then \
@WITH_PERL_TRUE@	  	echo $@ result ; \
@WITH_PERL_TRUE@		echo $$log ; \
@WITH_PERL_TRUE@	fi
@WITH_PERL_TRUE@	@rm -f $@.tmp

@WITH_PERL_TRUE@identity:		db1000.xml
@WITH_PERL_TRUE@	@(echo > .memdump)
@WITH_PERL_TRUE@	@log=`$(CHECKER) $(top_builddir)/xsltproc/xsltproc \
@WITH_PERL_TRUE@		$(srcdir)/$@.xsl $< > $@.tmp; \
@WITH_PERL_TRUE@	  if [ ! -f $(srcdir)/$@.out ] ; then \
@WITH_PERL_TRUE@		cp $@.tmp $(srcdir)/$@.out ; \
@WITH_PERL_TRUE@	  else \
@WITH_PERL_TRUE@		diff $(srcdir)/$@.out $@.tmp ; \
@WITH_PERL_TRUE@	  fi ; \
@WITH_PERL_TRUE@	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
@WITH_PERL_TRUE@	@if [ -n "$$log" ] ; then \
@WITH_PERL_TRUE@	  	echo $@ result ; \
@WITH_PERL_TRUE@		echo $$log ; \
@WITH_PERL_TRUE@	fi
@WITH_PERL_TRUE@	@rm -f $@.tmp

@WITH_PERL_TRUE@patterns:		db100.xml
@WITH_PERL_TRUE@	@(echo > .memdump)
@WITH_PERL_TRUE@	@log=`$(CHECKER) $(top_builddir)/xsltproc/xsltproc \
@WITH_PERL_TRUE@		$(srcdir)/$@.xsl $< > $@.tmp; \
@WITH_PERL_TRUE@	  if [ ! -f $(srcdir)/$@.out ] ; then \
@WITH_PERL_TRUE@		cp $@.tmp $(srcdir)/$@.out ; \
@WITH_PERL_TRUE@	  else \
@WITH_PERL_TRUE@		diff $(srcdir)/$@.out $@.tmp ; \
@WITH_PERL_TRUE@	  fi ; \
@WITH_PERL_TRUE@	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
@WITH_PERL_TRUE@	@if [ -n "$$log" ] ; then \
@WITH_PERL_TRUE@	  	echo $@ result ; \
@WITH_PERL_TRUE@		echo $$log ; \
@WITH_PERL_TRUE@	fi
@WITH_PERL_TRUE@	@rm -f $@.tmp

@WITH_PERL_TRUE@prettyprint:	db100.xml
@WITH_PERL_TRUE@	@(echo > .memdump)
@WITH_PERL_TRUE@	@log=`$(CHECKER) $(top_builddir)/xsltproc/xsltproc \
@WITH_PERL_TRUE@		$(srcdir)/$@.xsl $< > $@.tmp; \
@WITH_PERL_TRUE@	  if [ ! -f $(srcdir)/$@.out ] ; then \
@WITH_PERL_TRUE@		cp $@.tmp $(srcdir)/$@.out ; \
@WITH_PERL_TRUE@	  else \
@WITH_PERL_TRUE@		diff $(srcdir)/$@.out $@.tmp ; \
@WITH_PERL_TRUE@	  fi ; \
@WITH_PERL_TRUE@	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
@WITH_PERL_TRUE@	@if [ -n "$$log" ] ; then \
@WITH_PERL_TRUE@	  	echo $@ result ; \
@WITH_PERL_TRUE@		echo $$log ; \
@WITH_PERL_TRUE@	fi
@WITH_PERL_TRUE@	@rm -f $@.tmp

@WITH_PERL_TRUE@stringsort:		db1000.xml
@WITH_PERL_TRUE@	@(echo > .memdump)
@WITH_PERL_TRUE@	@log=`$(CHECKER) $(top_builddir)/xsltproc/xsltproc \
@WITH_PERL_TRUE@		$(srcdir)/$@.xsl $< > $@.tmp; \
@WITH_PERL_TRUE@	  if [ ! -f $(srcdir)/$@.out ] ; then \
@WITH_PERL_TRUE@		cp $@.tmp $(srcdir)/$@.out ; \
@WITH_PERL_TRUE@	  else \
@WITH_PERL_TRUE@		diff $(srcdir)/$@.out $@.tmp ; \
@WITH_PERL_TRUE@	  fi ; \
@WITH_PERL_TRUE@	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
@WITH_PERL_TRUE@	@if [ -n "$$log" ] ; then \
@WITH_PERL_TRUE@	  	echo $@ result ; \
@WITH_PERL_TRUE@		echo $$log ; \
@WITH_PERL_TRUE@	fi
@WITH_PERL_TRUE@	@rm -f $@.tmp

@WITH_PERL_FALSE@alphabetize:
@WITH_PERL_FALSE@avts:
@WITH_PERL_FALSE@creation:
@WITH_PERL_FALSE@dbonerow:
@WITH_PERL_FALSE@dbtail:
@WITH_PERL_FALSE@decoy:
@WITH_PERL_FALSE@encrypt:
@WITH_PERL_FALSE@functions:
@WITH_PERL_FALSE@identity:
@WITH_PERL_FALSE@patterns:
@WITH_PERL_FALSE@prettyprint:
@WITH_PERL_FALSE@stringsort:

attsets:		chart.xml
	@(echo > .memdump)
	@log=`$(CHECKER) $(top_builddir)/xsltproc/xsltproc \
		$(srcdir)/$@.xsl $< > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo $$log ; \
	fi
	@rm -f $@.tmp

axis:			axis.xml
	@(echo > .memdump)
	@log=`$(CHECKER) $(top_builddir)/xsltproc/xsltproc \
		$(srcdir)/$@.xsl $< > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo $$log ; \
	fi
	@rm -f $@.tmp

backwards:		game.xml
	@(echo > .memdump)
	@log=`$(CHECKER) $(top_builddir)/xsltproc/xsltproc \
		$(srcdir)/$@.xsl $< > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo $$log ; \
	fi
	@rm -f $@.tmp

bottles:		bottles.xml
	@(echo > .memdump)
	@log=`$(CHECKER) $(top_builddir)/xsltproc/xsltproc \
		$(srcdir)/$@.xsl $< > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo $$log ; \
	fi
	@rm -f $@.tmp

brutal:		brutal.xml
	@(echo > .memdump)
	@log=`$(CHECKER) $(top_builddir)/xsltproc/xsltproc \
		$(srcdir)/$@.xsl $< > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo $$log ; \
	fi
	@rm -f $@.tmp

chart:		chart.xml
	@(echo > .memdump)
	@log=`$(CHECKER) $(top_builddir)/xsltproc/xsltproc \
		$(srcdir)/$@.xsl $< > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo $$log ; \
	fi
	@rm -f $@.tmp

current:		current.xml
	@(echo > .memdump)
	@log=`$(CHECKER) $(top_builddir)/xsltproc/xsltproc \
		$(srcdir)/$@.xsl $< > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo $$log ; \
	fi
	@rm -f $@.tmp

game:			game.xml
	@(echo > .memdump)
	@log=`$(CHECKER) $(top_builddir)/xsltproc/xsltproc \
		$(srcdir)/$@.xsl $< > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo $$log ; \
	fi
	@rm -f $@.tmp

html:			html.xml
	@(echo > .memdump)
	@log=`$(CHECKER) $(top_builddir)/xsltproc/xsltproc \
		$(srcdir)/$@.xsl $< > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo $$log ; \
	fi
	@rm -f $@.tmp

inventory:		inventory.xml
	@(echo > .memdump)
	@log=`$(CHECKER) $(top_builddir)/xsltproc/xsltproc \
		$(srcdir)/$@.xsl $< > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo $$log ; \
	fi
	@rm -f $@.tmp

metric:		metric.xml
	@(echo > .memdump)
	@log=`$(CHECKER) $(top_builddir)/xsltproc/xsltproc \
		$(srcdir)/$@.xsl $< > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo $$log ; \
	fi
	@rm -f $@.tmp

number:		number.xml
	@(echo > .memdump)
	@log=`$(CHECKER) $(top_builddir)/xsltproc/xsltproc \
		$(srcdir)/$@.xsl $< > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo $$log ; \
	fi
	@rm -f $@.tmp

oddtemplate:	oddtemplate.xml
	@(echo > .memdump)
	@log=`$(CHECKER) $(top_builddir)/xsltproc/xsltproc \
		$(srcdir)/$@.xsl $< > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo $$log ; \
	fi
	@rm -f $@.tmp

priority:		priority.xml
	@(echo > .memdump)
	@log=`$(CHECKER) $(top_builddir)/xsltproc/xsltproc \
		$(srcdir)/$@.xsl $< > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo $$log ; \
	fi
	@rm -f $@.tmp

products:		products.xml
	@(echo > .memdump)
	@log=`$(CHECKER) $(top_builddir)/xsltproc/xsltproc \
		$(srcdir)/$@.xsl $< > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo $$log ; \
	fi
	@rm -f $@.tmp

queens:		queens.xml
	@(echo > .memdump)
	@log=`$(CHECKER) $(top_builddir)/xsltproc/xsltproc \
		$(srcdir)/$@.xsl $< > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo $$log ; \
	fi
	@rm -f $@.tmp

reverser:		gettysburg.xml
	@(echo > .memdump)
	@log=`$(CHECKER) $(top_builddir)/xsltproc/xsltproc \
		$(srcdir)/$@.xsl $< > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo $$log ; \
	fi
	@rm -f $@.tmp

summarize:		queens.xsl
	@(echo > .memdump)
	@log=`$(CHECKER) $(top_builddir)/xsltproc/xsltproc \
		$(srcdir)/$@.xsl $< > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo $$log ; \
	fi
	@rm -f $@.tmp

total:		chart.xml
	@(echo > .memdump)
	@log=`$(CHECKER) $(top_builddir)/xsltproc/xsltproc \
		$(srcdir)/$@.xsl $< > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo $$log ; \
	fi
	@rm -f $@.tmp

tower:		tower.xml
	@(echo > .memdump)
	@log=`$(CHECKER) $(top_builddir)/xsltproc/xsltproc \
		$(srcdir)/$@.xsl $< > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo $$log ; \
	fi
	@rm -f $@.tmp

trend:		trend.xml
	@(echo > .memdump)
	@log=`$(CHECKER) $(top_builddir)/xsltproc/xsltproc \
		$(srcdir)/$@.xsl $< > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo $$log ; \
	fi
	@rm -f $@.tmp

union:		union.xml
	@(echo > .memdump)
	@log=`$(CHECKER) $(top_builddir)/xsltproc/xsltproc \
		$(srcdir)/$@.xsl $< > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo $$log ; \
	fi
	@rm -f $@.tmp

xpath:		xpath.xml
	@(echo > .memdump)
	@log=`$(CHECKER) $(top_builddir)/xsltproc/xsltproc \
		$(srcdir)/$@.xsl $< > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo $$log ; \
	fi
	@rm -f $@.tmp

xslbench1:		xslbench1.xml
	@(echo > .memdump)
	@log=`$(CHECKER) $(top_builddir)/xsltproc/xsltproc \
		$(srcdir)/$@.xsl $< > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo $$log ; \
	fi
	@rm -f $@.tmp

xslbench2:		xslbenchdream.xml
	@(echo > .memdump)
	@log=`$(CHECKER) $(top_builddir)/xsltproc/xsltproc \
		$(srcdir)/$@.xsl $< > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo $$log ; \
	fi
	@rm -f $@.tmp

xslbench3:		xslbenchdream.xml
	@(echo > .memdump)
	@log=`$(CHECKER) $(top_builddir)/xsltproc/xsltproc \
		$(srcdir)/$@.xsl $< > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo $$log ; \
	fi
	@rm -f $@.tmp

breadth:		
	@(echo > .memdump)
	@log=`$(CHECKER) $(top_builddir)/xsltproc/xsltproc \
		$(srcdir)/find.xsl $@.xml > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo $$log ; \
	fi
	@rm -f $@.tmp

depth:		
	@(echo > .memdump)
	@log=`$(CHECKER) $(top_builddir)/xsltproc/xsltproc \
		$(srcdir)/find.xsl $@.xml > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo $$log ; \
	fi
	@rm -f $@.tmp
# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
