SubDir HAIKU_TOP src tools fs_shell ;

UseHeaders [ FDirName $(HAIKU_TOP) headers build ] : true ;

if ! $(HOST_PLATFORM_BEOS_COMPATIBLE) {
	UseHeaders [ FDirName $(HAIKU_TOP) headers build os ] : true ;
	#UseHeaders [ FDirName $(HAIKU_TOP) headers build os app ] : true ;
	UseHeaders [ FDirName $(HAIKU_TOP) headers build os kernel ] : true ;
	#UseHeaders [ FDirName $(HAIKU_TOP) headers build os interface ] : true ;
	UseHeaders [ FDirName $(HAIKU_TOP) headers build os storage ] : true ;
	UseHeaders [ FDirName $(HAIKU_TOP) headers build os support ] : true ;
}

UsePrivateHeaders fs_shell ;
UsePrivateHeaders shared ;

local defines = [ FDefines FS_SHELL=1 ] ;
SubDirCcFlags $(defines) ;
SubDirC++Flags $(defines) ;

# platform specific sources/libraries
local fsShellCommandSources ;
local externalCommandsSources ;
local fsShellCommandLibs ;
if $(HOST_PLATFORM_BEOS_COMPATIBLE) {
	fsShellCommandSources = fs_shell_command_beos.cpp ;
	externalCommandsSources = external_commands_beos.cpp ;
} else {
	fsShellCommandSources = fs_shell_command_unix.cpp ;
	externalCommandsSources = external_commands_unix.cpp ;
	fsShellCommandLibs = $(HOST_NETWORK_LIBS) ;
}

local kernelEmulationSources =
	atomic.cpp
	block_cache.cpp
	byte_order.cpp
	command_cp.cpp
	disk_device_manager.cpp
	driver_settings.cpp
	errno.cpp
	fcntl.cpp
	fd.cpp
	file_cache.cpp
	file_map.cpp
	kernel_export.cpp
	KPath.cpp
	hash.cpp
	list.cpp
	lock.cpp
	module.cpp
	node_monitor.cpp
	partition_support.cpp
	path_util.cpp
	rootfs.cpp
	sem.cpp
	stat.cpp
	stat_util.cpp
	stdio.cpp
	string.cpp
	thread.cpp
	time.cpp
	uio.cpp
	unistd.cpp
	vfs.cpp
;

BuildPlatformMergeObject <build>fs_shell_kernel.o : $(kernelEmulationSources) ;

BuildPlatformStaticLibrary <build>fuse_module.a :
	$(externalCommandsSources)

	fuse.cpp
	: <build>fs_shell_kernel.o
;

BuildPlatformStaticLibrary <build>fs_shell.a :
	$(externalCommandsSources)

	fssh.cpp
	: <build>fs_shell_kernel.o
;

SEARCH on [ FGristFiles rootfs.cpp ]
	= [ FDirName $(HAIKU_TOP) src system kernel fs ] ;

BuildPlatformMain <build>fs_shell_command
	: fs_shell_command.cpp $(fsShellCommandSources)
	: $(HOST_LIBSTDC++) $(HOST_LIBSUPC++) $(fsShellCommandLibs) ;

