SubDir HAIKU_TOP src tools cppunit ;

UseHeaders [ FDirName $(HAIKU_TOP) headers tools elfsymbolpatcher ] ;

SEARCH_SOURCE += [ FDirName $(SUBDIR) cppunit ] ;

rule CppUnitLibrary
{
	# CppUnitLibrary <sources> ;
	local _lib = libcppunit.so ;

	local defines = BUILDING_CPPUNIT ;

	if $(OS) = BEOS && $(OSPLAT) = PPC {
		defines += NO_ELF_SYMBOL_PATCHING ;
	}
	ObjectDefines $(1) : $(defines) ;

	UseCppUnitHeaders ;
	BuildPlatformMain $(_lib) : $(1) ;
	MakeLocate $(_lib) : /boot/home/config/lib ;
	LINKFLAGS on $(_lib) = $(LINKFLAGS) -nostart -Xlinker -soname=\"$(_lib)\" ;
}

CppUnitLibrary
	SemaphoreSyncObject.cpp
	TestApp.cpp
	TestCase.cpp
	TestListener.cpp
	TestShell.cpp
	TestSuite.cpp
	TestUtils.cpp
	ThreadedTestCase.cpp

	# cppunit
	Asserter.cpp
	CompilerOutputter.cpp
	Exception.cpp
	NotEqualException.cpp
	RepeatedTest.cpp
	SourceLine.cpp
	SynchronizedObject.cpp
	TestAssert.cpp
	TestCase.cpp
	TestFactoryRegistry.cpp
	TestFailure.cpp
	TestResult.cpp
	TestResultCollector.cpp
	TestRunner.cpp
	TestSetUp.cpp
	TestSucessListener.cpp
	TestSuite.cpp
	TextOutputter.cpp
	TextTestProgressListener.cpp
	TextTestResult.cpp
	TypeInfoHelper.cpp
	XmlOutputter.cpp
;

LinkAgainst libcppunit.so :
	stdc++.r4	# is called `mslcpp_4_0' on PPC -- just create a symlink
	be
;

if  $(OS) != BEOS || $(OSPLAT) != PPC {
	LinkAgainst libcppunit.so : libelfsymbolpatcher.a ;
}
