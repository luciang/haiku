////////////////////////////////////////////////////////////////////////////////
//
//	File: SavePalette.cpp
//
//	Date: December 1999
//
//	Author: Daniel Switkin
//
//	Copyright 2003 (c) by Daniel Switkin. This file is made publically available
//	under the BSD license, with the stipulations that this complete header must
//	remain at the top of the file indefinitely, and credit must be given to the
//	original author in any about box using this software.
//
////////////////////////////////////////////////////////////////////////////////

#include "SavePalette.h"
#include <Bitmap.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>

extern bool debug;

const rgb_color wsp[256] = {
	{0xff, 0xff, 0xff, 0xff}, {0xff, 0xff, 0xcc, 0xff}, 
	{0xff, 0xff, 0x99, 0xff}, {0xff, 0xff, 0x66, 0xff}, 
	{0xff, 0xff, 0x33, 0xff}, {0xff, 0xff, 0x00, 0xff}, 
	{0xff, 0xcc, 0xff, 0xff}, {0xff, 0xcc, 0xcc, 0xff}, 
	{0xff, 0xcc, 0x99, 0xff}, {0xff, 0xcc, 0x66, 0xff}, 
	{0xff, 0xcc, 0x33, 0xff}, {0xff, 0xcc, 0x00, 0xff}, 
	{0xff, 0x99, 0xff, 0xff}, {0xff, 0x99, 0xcc, 0xff}, 
	{0xff, 0x99, 0x99, 0xff}, {0xff, 0x99, 0x66, 0xff}, 
	{0xff, 0x99, 0x33, 0xff}, {0xff, 0x99, 0x00, 0xff}, 
	{0xff, 0x66, 0xff, 0xff}, {0xff, 0x66, 0xcc, 0xff}, 
	{0xff, 0x66, 0x99, 0xff}, {0xff, 0x66, 0x66, 0xff}, 
	{0xff, 0x66, 0x33, 0xff}, {0xff, 0x66, 0x00, 0xff}, 
	{0xff, 0x33, 0xff, 0xff}, {0xff, 0x33, 0xcc, 0xff}, 
	{0xff, 0x33, 0x99, 0xff}, {0xff, 0x33, 0x66, 0xff}, 
	{0xff, 0x33, 0x33, 0xff}, {0xff, 0x33, 0x00, 0xff}, 
	{0xff, 0x00, 0xff, 0xff}, {0xff, 0x00, 0xcc, 0xff}, 
	{0xff, 0x00, 0x99, 0xff}, {0xff, 0x00, 0x66, 0xff}, 
	{0xff, 0x00, 0x33, 0xff}, {0xff, 0x00, 0x00, 0xff}, 
	{0xcc, 0xff, 0xff, 0xff}, {0xcc, 0xff, 0xcc, 0xff}, 
	{0xcc, 0xff, 0x99, 0xff}, {0xcc, 0xff, 0x66, 0xff}, 
	{0xcc, 0xff, 0x33, 0xff}, {0xcc, 0xff, 0x00, 0xff}, 
	{0xcc, 0xcc, 0xff, 0xff}, {0xcc, 0xcc, 0xcc, 0xff}, 
	{0xcc, 0xcc, 0x99, 0xff}, {0xcc, 0xcc, 0x66, 0xff}, 
	{0xcc, 0xcc, 0x33, 0xff}, {0xcc, 0xcc, 0x00, 0xff}, 
	{0xcc, 0x99, 0xff, 0xff}, {0xcc, 0x99, 0xcc, 0xff}, 
	{0xcc, 0x99, 0x99, 0xff}, {0xcc, 0x99, 0x66, 0xff}, 
	{0xcc, 0x99, 0x33, 0xff}, {0xcc, 0x99, 0x00, 0xff}, 
	{0xcc, 0x66, 0xff, 0xff}, {0xcc, 0x66, 0xcc, 0xff}, 
	{0xcc, 0x66, 0x99, 0xff}, {0xcc, 0x66, 0x66, 0xff}, 
	{0xcc, 0x66, 0x33, 0xff}, {0xcc, 0x66, 0x00, 0xff}, 
	{0xcc, 0x33, 0xff, 0xff}, {0xcc, 0x33, 0xcc, 0xff}, 
	{0xcc, 0x33, 0x99, 0xff}, {0xcc, 0x33, 0x66, 0xff}, 
	{0xcc, 0x33, 0x33, 0xff}, {0xcc, 0x33, 0x00, 0xff}, 
	{0xcc, 0x00, 0xff, 0xff}, {0xcc, 0x00, 0xcc, 0xff}, 
	{0xcc, 0x00, 0x99, 0xff}, {0xcc, 0x00, 0x66, 0xff}, 
	{0xcc, 0x00, 0x33, 0xff}, {0xcc, 0x00, 0x00, 0xff}, 
	{0x99, 0xff, 0xff, 0xff}, {0x99, 0xff, 0xcc, 0xff}, 
	{0x99, 0xff, 0x99, 0xff}, {0x99, 0xff, 0x66, 0xff}, 
	{0x99, 0xff, 0x33, 0xff}, {0x99, 0xff, 0x00, 0xff}, 
	{0x99, 0xcc, 0xff, 0xff}, {0x99, 0xcc, 0xcc, 0xff}, 
	{0x99, 0xcc, 0x99, 0xff}, {0x99, 0xcc, 0x66, 0xff}, 
	{0x99, 0xcc, 0x33, 0xff}, {0x99, 0xcc, 0x00, 0xff}, 
	{0x99, 0x99, 0xff, 0xff}, {0x99, 0x99, 0xcc, 0xff}, 
	{0x99, 0x99, 0x99, 0xff}, {0x99, 0x99, 0x66, 0xff}, 
	{0x99, 0x99, 0x33, 0xff}, {0x99, 0x99, 0x00, 0xff}, 
	{0x99, 0x66, 0xff, 0xff}, {0x99, 0x66, 0xcc, 0xff}, 
	{0x99, 0x66, 0x99, 0xff}, {0x99, 0x66, 0x66, 0xff}, 
	{0x99, 0x66, 0x33, 0xff}, {0x99, 0x66, 0x00, 0xff}, 
	{0x99, 0x33, 0xff, 0xff}, {0x99, 0x33, 0xcc, 0xff}, 
	{0x99, 0x33, 0x99, 0xff}, {0x99, 0x33, 0x66, 0xff}, 
	{0x99, 0x33, 0x33, 0xff}, {0x99, 0x33, 0x00, 0xff}, 
	{0x99, 0x00, 0xff, 0xff}, {0x99, 0x00, 0xcc, 0xff}, 
	{0x99, 0x00, 0x99, 0xff}, {0x99, 0x00, 0x66, 0xff}, 
	{0x99, 0x00, 0x33, 0xff}, {0x99, 0x00, 0x00, 0xff}, 
	{0x66, 0xff, 0xff, 0xff}, {0x66, 0xff, 0xcc, 0xff}, 
	{0x66, 0xff, 0x99, 0xff}, {0x66, 0xff, 0x66, 0xff}, 
	{0x66, 0xff, 0x33, 0xff}, {0x66, 0xff, 0x00, 0xff}, 
	{0x66, 0xcc, 0xff, 0xff}, {0x66, 0xcc, 0xcc, 0xff}, 
	{0x66, 0xcc, 0x99, 0xff}, {0x66, 0xcc, 0x66, 0xff}, 
	{0x66, 0xcc, 0x33, 0xff}, {0x66, 0xcc, 0x00, 0xff}, 
	{0x66, 0x99, 0xff, 0xff}, {0x66, 0x99, 0xcc, 0xff}, 
	{0x66, 0x99, 0x99, 0xff}, {0x66, 0x99, 0x66, 0xff}, 
	{0x66, 0x99, 0x33, 0xff}, {0x66, 0x99, 0x00, 0xff}, 
	{0x66, 0x66, 0xff, 0xff}, {0x66, 0x66, 0xcc, 0xff}, 
	{0x66, 0x66, 0x99, 0xff}, {0x66, 0x66, 0x66, 0xff}, 
	{0x66, 0x66, 0x33, 0xff}, {0x66, 0x66, 0x00, 0xff}, 
	{0x66, 0x33, 0xff, 0xff}, {0x66, 0x33, 0xcc, 0xff}, 
	{0x66, 0x33, 0x99, 0xff}, {0x66, 0x33, 0x66, 0xff}, 
	{0x66, 0x33, 0x33, 0xff}, {0x66, 0x33, 0x00, 0xff}, 
	{0x66, 0x00, 0xff, 0xff}, {0x66, 0x00, 0xcc, 0xff}, 
	{0x66, 0x00, 0x99, 0xff}, {0x66, 0x00, 0x66, 0xff}, 
	{0x66, 0x00, 0x33, 0xff}, {0x66, 0x00, 0x00, 0xff}, 
	{0x33, 0xff, 0xff, 0xff}, {0x33, 0xff, 0xcc, 0xff}, 
	{0x33, 0xff, 0x99, 0xff}, {0x33, 0xff, 0x66, 0xff}, 
	{0x33, 0xff, 0x33, 0xff}, {0x33, 0xff, 0x00, 0xff}, 
	{0x33, 0xcc, 0xff, 0xff}, {0x33, 0xcc, 0xcc, 0xff}, 
	{0x33, 0xcc, 0x99, 0xff}, {0x33, 0xcc, 0x66, 0xff}, 
	{0x33, 0xcc, 0x33, 0xff}, {0x33, 0xcc, 0x00, 0xff}, 
	{0x33, 0x99, 0xff, 0xff}, {0x33, 0x99, 0xcc, 0xff}, 
	{0x33, 0x99, 0x99, 0xff}, {0x33, 0x99, 0x66, 0xff}, 
	{0x33, 0x99, 0x33, 0xff}, {0x33, 0x99, 0x00, 0xff}, 
	{0x33, 0x66, 0xff, 0xff}, {0x33, 0x66, 0xcc, 0xff}, 
	{0x33, 0x66, 0x99, 0xff}, {0x33, 0x66, 0x66, 0xff}, 
	{0x33, 0x66, 0x33, 0xff}, {0x33, 0x66, 0x00, 0xff}, 
	{0x33, 0x33, 0xff, 0xff}, {0x33, 0x33, 0xcc, 0xff}, 
	{0x33, 0x33, 0x99, 0xff}, {0x33, 0x33, 0x66, 0xff}, 
	{0x33, 0x33, 0x33, 0xff}, {0x33, 0x33, 0x00, 0xff}, 
	{0x33, 0x00, 0xff, 0xff}, {0x33, 0x00, 0xcc, 0xff}, 
	{0x33, 0x00, 0x99, 0xff}, {0x33, 0x00, 0x66, 0xff}, 
	{0x33, 0x00, 0x33, 0xff}, {0x33, 0x00, 0x00, 0xff}, 
	{0x00, 0xff, 0xff, 0xff}, {0x00, 0xff, 0xcc, 0xff}, 
	{0x00, 0xff, 0x99, 0xff}, {0x00, 0xff, 0x66, 0xff}, 
	{0x00, 0xff, 0x33, 0xff}, {0x00, 0xff, 0x00, 0xff}, 
	{0x00, 0xcc, 0xff, 0xff}, {0x00, 0xcc, 0xcc, 0xff}, 
	{0x00, 0xcc, 0x99, 0xff}, {0x00, 0xcc, 0x66, 0xff}, 
	{0x00, 0xcc, 0x33, 0xff}, {0x00, 0xcc, 0x00, 0xff}, 
	{0x00, 0x99, 0xff, 0xff}, {0x00, 0x99, 0xcc, 0xff}, 
	{0x00, 0x99, 0x99, 0xff}, {0x00, 0x99, 0x66, 0xff}, 
	{0x00, 0x99, 0x33, 0xff}, {0x00, 0x99, 0x00, 0xff}, 
	{0x00, 0x66, 0xff, 0xff}, {0x00, 0x66, 0xcc, 0xff}, 
	{0x00, 0x66, 0x99, 0xff}, {0x00, 0x66, 0x66, 0xff}, 
	{0x00, 0x66, 0x33, 0xff}, {0x00, 0x66, 0x00, 0xff}, 
	{0x00, 0x33, 0xff, 0xff}, {0x00, 0x33, 0xcc, 0xff}, 
	{0x00, 0x33, 0x99, 0xff}, {0x00, 0x33, 0x66, 0xff}, 
	{0x00, 0x33, 0x33, 0xff}, {0x00, 0x33, 0x00, 0xff}, 
	{0x00, 0x00, 0xff, 0xff}, {0x00, 0x00, 0xcc, 0xff}, 
	{0x00, 0x00, 0x99, 0xff}, {0x00, 0x00, 0x66, 0xff}, 
	{0x00, 0x00, 0x33, 0xff}, {0x00, 0x00, 0x00, 0xff}, 
	{0x00, 0x00, 0x00, 0xff}, {0x00, 0x00, 0x00, 0xff}, 
	{0x00, 0x00, 0x00, 0xff}, {0x00, 0x00, 0x00, 0xff}, 
	{0x00, 0x00, 0x00, 0xff}, {0x00, 0x00, 0x00, 0xff}, 
	{0x00, 0x00, 0x00, 0xff}, {0x00, 0x00, 0x00, 0xff}, 
	{0x00, 0x00, 0x00, 0xff}, {0x00, 0x00, 0x00, 0xff}, 
	{0x00, 0x00, 0x00, 0xff}, {0x00, 0x00, 0x00, 0xff}, 
	{0x00, 0x00, 0x00, 0xff}, {0x00, 0x00, 0x00, 0xff}, 
	{0x00, 0x00, 0x00, 0xff}, {0x00, 0x00, 0x00, 0xff}, 
	{0x00, 0x00, 0x00, 0xff}, {0x00, 0x00, 0x00, 0xff}, 
	{0x00, 0x00, 0x00, 0xff}, {0x00, 0x00, 0x00, 0xff}, 
	{0x00, 0x00, 0x00, 0xff}, {0x00, 0x00, 0x00, 0xff}, 
	{0x00, 0x00, 0x00, 0xff}, {0x00, 0x00, 0x00, 0xff}, 
	{0x00, 0x00, 0x00, 0xff}, {0x00, 0x00, 0x00, 0xff}, 
	{0x00, 0x00, 0x00, 0xff}, {0x00, 0x00, 0x00, 0xff}, 
	{0x00, 0x00, 0x00, 0xff}, {0x00, 0x00, 0x00, 0xff}, 
	{0x00, 0x00, 0x00, 0xff}, {0x00, 0x00, 0x00, 0xff}, 
	{0x00, 0x00, 0x00, 0xff}, {0x00, 0x00, 0x00, 0xff}, 
	{0x00, 0x00, 0x00, 0xff}, {0x00, 0x00, 0x00, 0xff}, 
	{0x00, 0x00, 0x00, 0xff}, {0x00, 0x00, 0x00, 0xff}, 
	{0x00, 0x00, 0x00, 0xff}, {0x00, 0x00, 0x00, 0xff}
};

ColorItem::ColorItem(unsigned int k, unsigned int c) {
    key = k;
    count = c;
}

SavePalette::SavePalette() {
	pal = new rgb_color[256];
	backgroundindex = 0;
	usetransparent = false;
	transparentindex = 0;
	size = size_in_bits = 0;
	fatalerror = false;
	mode = WEB_SAFE_PALETTE;
}

SavePalette::SavePalette(int predefined) {
	pal = new rgb_color[256];
	backgroundindex = 0;
	usetransparent = false;
	transparentindex = 0;
	fatalerror = false;
	
	mode = predefined;
	size_in_bits = 8;
	
	if (predefined == WEB_SAFE_PALETTE) {
		memcpy(pal, wsp, sizeof(rgb_color) * 256);
		size = 216;
	} else if (predefined == BEOS_SYSTEM_PALETTE) {
		color_map *map = (color_map *)system_colors();
		memcpy(pal, map->color_list, sizeof(rgb_color) * 256);
		size = 256;
	} else if (predefined == GREYSCALE_PALETTE) {
		for (int x = 0; x < 256; x++) {
			pal[x].red = pal[x].green = pal[x].blue = x;
			pal[x].alpha = 0xff;
		}
		size = 256;
	}
}

SavePalette::SavePalette(BBitmap *bitmap) {
	pal = new rgb_color[256];
	backgroundindex = 0;
	usetransparent = false;
	transparentindex = 0;
	fatalerror = false;
	mode = OPTIMAL_PALETTE;

	SFHash *hash = new SFHash(1 << 16);
	if (hash == NULL || hash->fatalerror) {
		if (debug) printf("Out of memory in SavePalette(BBitmap *)\n");
		if (hash != NULL) delete hash;
		fatalerror = true;
		return;
	}
    unsigned char r, g, b;
    
    color_space cs = bitmap->ColorSpace();
    if (cs != B_RGB32 && cs != B_RGBA32 && cs != B_RGB32_BIG && cs != B_RGBA32_BIG) {
    	if (debug) {
    		printf("Wrong color space given in SavePalette(BBitmap):\n");
    		printf("%d %d %d %d or 0x%x\n", (cs & 0xff000000) >> 24, (cs & 0xff0000) >> 16,
    			(cs & 0xff00) >> 8, cs & 0xff, cs);
    	}
    	delete hash;
    	fatalerror = true;
    	return;
   	}
   	
   	BRect rect = bitmap->Bounds();
   	int height = rect.IntegerHeight() + 1;
   	int width = rect.IntegerWidth() + 1;
   	unsigned char *bits = (unsigned char *)bitmap->Bits();

    for (int y = 0; y < height; y++) {
        for (int x = 0; x < width; x++) {
        	if (cs == B_RGB32 || cs == B_RGBA32) {
        		b = bits[0];
        		g = bits[1];
        		r = bits[2];
        	} else {
        		r = bits[1];
        		g = bits[2];
        		b = bits[3];
        	}
			bits += 4;
			
            unsigned int key = (r << 16) + (g << 8) + b;
            ColorItem *ci = (ColorItem *)hash->GetItem(key);
            if (ci == NULL) {
                ci = new ColorItem(key, 1);
                if (ci == NULL) {
                	if (debug) printf("Out of memory in SavePalette(BBitmap *)\n");
			        delete hash;
			        fatalerror = true;
			        return;
			    }
                hash->AddItem((HashItem *)ci);
            } else {
                ci->count++;
            }
        }
    }
    
	int unique_colors = hash->CountItems();
	size_in_bits = 1;
	while (((1 << size_in_bits) < unique_colors) && (size_in_bits < 8)) size_in_bits++;
	size = 1 << size_in_bits;

    ColorItem **topcolors = (ColorItem **)malloc(size  * 4);
    if (topcolors == NULL) {
        if (debug) printf("Out of memory in SavePalette(BBitmap *)\n");
        delete hash;
        fatalerror = true;
        return;
    }
    ColorItem *dummy = new ColorItem(0, 0);
    for (int x = 0; x < size; x++) topcolors[x] = dummy;

    for (int x = 0; x < unique_colors; x++) {
        ColorItem *ci = (ColorItem *)hash->NextItem();
        for (int y = 0; y < size; y++) {
            if (ci->count > topcolors[y]->count) {
                for (int z = size - 1; z > y; z--) {
                    topcolors[z] = topcolors[z-1];
                }
                topcolors[y] = ci;
                break;
            }
        }
    }
    
    for (int x = 0; x < size; x++) {
    	pal[x].red = topcolors[x]->key >> 16;
    	pal[x].green = (topcolors[x]->key & 0xff00) >> 8;
        pal[x].blue = topcolors[x]->key & 0xff;
        pal[x].alpha = 0xff;
    }
    
    delete dummy;
    free(topcolors);
    delete hash;
}

/* Standard mapping services once a palette is loaded */
unsigned char SavePalette::IndexForColor(unsigned char red, unsigned char green,
	unsigned char blue) {
	
	if (mode == GREYSCALE_PALETTE) {
		unsigned char result = (red + (green << 1) + blue) >> 2;
		return result;
	}
	
	unsigned char best = 0;
	int min = 255 * 3;
	
	for (int x = 0; x < size && min != 0; x++) {
		int diff = abs(red - pal[x].red);
		diff += abs(green - pal[x].green);
		diff += abs(blue - pal[x].blue);
		if (diff < min) {
			min = diff;
			best = x;
		}
	}
	return best;
}

unsigned char SavePalette::IndexForColor(rgb_color color) {
	return IndexForColor(color.red, color.green, color.blue);
}

SavePalette::~SavePalette() {
	delete [] pal;
}

