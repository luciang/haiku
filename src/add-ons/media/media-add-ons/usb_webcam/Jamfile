SubDir HAIKU_TOP src add-ons media media-add-ons usb_webcam ;

SetSubDirSupportedPlatformsBeOSCompatible ;

# note: when adding new addons, sensors
# or colorspace transforms, one should regenerate
# the *Internal*.h headers with the makefile.

# for USBKit.h
UseLibraryHeaders usb ;

# Zeta has a libusb.so, we have a USBKit.a
if $(TARGET_PLATFORM) = haiku {
usbKitLibraryName = USBKit.a ;
} else {
usbKitLibraryName = usb ;
}

# HOW the F*** do I do that with Jam ?
#SRCS := $(wildcard *.cpp) \
#$(wildcard addons/*/*.cpp) \
#$(wildcard sensors/*/*.cpp) \
#$(wildcard cstransforms/*.cpp)


# source directories
local sourceDirs =
	addons/quickcam
	addons/sonix
	cstransforms
	sensors
;

local sourceDir ;
for sourceDir in $(sourceDirs) {
	SEARCH_SOURCE += [ FDirName $(HAIKU_TOP) src add-ons media media-add-ons usb_webcam $(sourceDir) ] ;
}

## addon sources
local addonSources ;
addonSources = QuickCamDevice.cpp SonixCamDevice.cpp ;

## colorspace transforms sources
local csTransformsSources ;
csTransformsSources = Bayer.cpp ;

## sensors sources
local sensorsSources ;
sensorsSources = hdcs1000.cpp hv7131e1.cpp tas5110c1b.cpp ;

## how to build header files from sources to include the list of built-in addons.
# but it doesn't seem to work for some reason...

rule USBWebcamHeaderGen
{
	SEARCH on $(3) = $(SEARCH_SOURCE) ;

	Depends $(1) : $(3) ;
	MakeLocateArch $(<) ;
	USBWebcamHeaderGen1 $(2) : $(3) : $(1) ;
	LocalClean clean : $(<) ;
}

actions USBWebcamHeaderGen1
{
	alert 'grep -h $(1) $(2) > $(3) ' ;
}

USBWebcamHeaderGen [ FGristFiles CamInternalAddons.h ] : B_WEBCAM_MKINTFUNC : $(addonSources) ;
USBWebcamHeaderGen [ FGristFiles CamInternalSensors.h ] : B_WEBCAM_DECLARE_SENSOR : $(sensorsSources) ;
USBWebcamHeaderGen [ FGristFiles CamInternalColorSpaceTransforms.h ] : B_WEBCAM_DECLARE_CSTRANSFORM : $(csTransformsSources) ;

Addon usb_webcam.media_addon : media :
	$(addonSources)
	$(csTransformsSources)
	$(sensorsSources)
	AddOn.cpp
	Producer.cpp
	CamBufferedFilterInterface.cpp
	CamBufferingDeframer.cpp
	CamColorSpaceTransform.cpp
	CamDeframer.cpp
	CamDevice.cpp
	CamFilterInterface.cpp
	CamRoster.cpp
	CamSensor.cpp
	CamStreamingDeframer.cpp
;

LinkAgainst usb_webcam.media_addon : be media $(usbKitLibraryName) ;

# force dependancies
Includes [ FGristFiles CamRoster.cpp ] : [ FGristFiles CamInternalAddons.h ] ;
Includes [ FGristFiles CamDevice.cpp ] : [ FGristFiles CamInternalSensors.h ] ;
Includes [ FGristFiles CamColorSpaceTransform.cpp ] : [ FGristFiles CamInternalColorSpaceTransforms.h ] ;

