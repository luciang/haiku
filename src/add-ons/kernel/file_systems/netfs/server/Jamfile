SubDir HAIKU_TOP src add-ons kernel file_systems netfs server ;

local userlandFSIncludes = [ FDirName $(HAIKU_TOP) headers private
	userlandfs ] ;

UsePrivateHeaders shared ;
UsePrivateKernelHeaders ;

SubDirSysHdrs [ FDirName $(userlandFSIncludes) legacy ] ;
SubDirHdrs [ FDirName $(userlandFSIncludes) shared ] ;
SubDirHdrs [ FDirName $(SUBDIR) $(DOTDOT) headers server ] ;
SubDirHdrs [ FDirName $(SUBDIR) $(DOTDOT) headers shared ] ;

SEARCH_SOURCE += [ FDirName $(SUBDIR) $(DOTDOT) shared ] ;
SEARCH_SOURCE += [ FDirName $(HAIKU_TOP) src add-ons kernel file_systems
	userlandfs shared ] ;

DEFINES += USER=1 ;
DEFINES += DEBUG_APP="\\\"netfs_server\\\"" ;

Application netfs_server
	:
	DebugSupport.cpp

	driver_settings.c
	DriverSettings.cpp
	String.cpp

	AbstractConnection.cpp
	AttrDirInfo.cpp
	Blocker.cpp
	BlockerPool.cpp
	Channel.cpp
	Connection.cpp
	ConnectionFactory.cpp
	EntryInfo.cpp
	FSObject.cpp
	InsecureChannel.cpp
	InsecureConnection.cpp
	NetAddress.cpp
	NetFSDefs.cpp
	NetFSServerRosterDefs.cpp
	NodeInfo.cpp
	PortChannel.cpp
	PortConnection.cpp
	Request.cpp
	RequestChannel.cpp
	RequestConnection.cpp
	RequestDumper.cpp
	RequestFactory.cpp
	RequestFlattener.cpp
	RequestHandler.cpp
	Requests.cpp
	RequestUnflattener.cpp
	ServerInfo.cpp
	ServerNodeID.cpp
	TaskManager.cpp
	ThreadLocal.cpp

	AttributeDirectory.cpp
	ClientConnection.cpp
	ClientVolume.cpp
	ConnectionListener.cpp
	ConnectionListenerFactory.cpp
	Directory.cpp
	Entry.cpp
	EntryRef.cpp
	FDManager.cpp
	GlobalBlockerPool.cpp
	InsecureConnectionListener.cpp
	Lockable.cpp
	NetFSServer.cpp
	Node.cpp
	NodeHandle.cpp
	NodeHandleMap.cpp
	NodeMonitor.cpp
	NodeMonitoringEvent.cpp
	Path.cpp
	PortConnectionListener.cpp
	QueryDomain.cpp
	RequestBufferReplacer.cpp
	SecurityContext.cpp
	StatisticsManager.cpp
	UserSecurityContext.cpp
	Volume.cpp
	VolumeManager.cpp
	:
	be $(TARGET_NETWORK_LIBS) $(TARGET_LIBSUPC++) libshared.a
	:
	netfs_server.rdef
;
