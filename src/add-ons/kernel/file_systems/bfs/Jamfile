SubDir OBOS_TOP src add-ons kernel file_systems bfs ;

# save original optimization level
oldOPTIM = $(OPTIM) ;

# set some additional defines
{
	local defines =
		KEEP_WRONG_DIRENT_RECLEN
		UNSAFE_GET_VNODE
		#BFS_BIG_ENDIAN_ONLY
		;

	# Force the API version to be the R5 one even when compiling
	# under Dano/Zeta
	if $(COMPILE_FOR_R5) {
		defines += COMPILE_FOR_R5 ;
	} else if $(COMPILE_FOR_ZETA) {
		defines += COMPILE_FOR_ZETA ;
	}
	
	# Enable OpenBFS to be compiled as a full BFS replacement. Will
	# report itself as "bfs" instead of "obfs"
	if $(BFS_REPLACEMENT) {
		defines += BFS_REPLACEMENT ;
		bfsAddOnName = bfs ;
	} else {
		bfsAddOnName = obfs ;
	}	

	if $(DEBUG) = 0 {
		# the gcc on BeOS doesn't compile BFS correctly with -O2 or more
		OPTIM = -O1 ;
	}

	defines = [ FDefines $(defines) ] ;
	SubDirCcFlags $(defines) -Wall -Wno-multichar ;
	SubDirC++Flags $(defines) -Wall -Wno-multichar ;
}

UsePrivateHeaders [ FDirName kernel ] ;			# For kernel_cpp.cpp

R5KernelAddon $(bfsAddOnName) : [ FDirName kernel file_systems ] :
	BlockAllocator.cpp
	BPlusTree.cpp
	kernel_cpp.cpp
	Debug.cpp
	Index.cpp
	Inode.cpp
	Journal.cpp
	kernel_interface.cpp
	Query.cpp
	Utility.cpp
	Volume.cpp
	BufferPool.cpp
	;

SEARCH on [ FGristFiles
		kernel_cpp.cpp 
	] = [ FDirName $(OBOS_TOP) src kernel core util ] ;

#-----------------------------------------------------

rule InstallBFS
{
	Depends $(<) : $(>) ;
}

actions ignore InstallBFS
{
	cp $(>) /boot/home/config/add-ons/kernel/file_systems/
}

InstallBFS install : obfs ;

# restore original optimization level
OPTIM = $(oldOPTIM) ;
